===== Extrayendo componentes de Frontend-Web (excluyendo módulos, configuraciones, layouts y tests) =====
===== Archivo: src/app/auth/register/page.tsx =====
"use client";

import React, { useState } from "react";
import { TextField, Button, Typography, Box } from "@mui/material";
import styled, { keyframes, createGlobalStyle } from "styled-components";
import { useDispatch } from "react-redux";
import { registerUser } from "../../../store/slices/authSlice";
import { AppDispatch } from "../../../store";
import { useRouter } from "next/navigation";

const fadeIn = keyframes`
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
`;

const GlobalStyle = createGlobalStyle`
  html, body, #__next {
    height: 100%;
    margin: 0;
    padding: 0;
  }
  *, *::before, *::after {
    box-sizing: border-box;
  }
`;

const BackgroundWrapper = styled.div`
  background-size: cover;
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const FormContainer = styled.div`
  background-color: rgba(255, 255, 255, 0.95);
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  animation: ${fadeIn} 1s ease-out;
  max-width: 400px;
  width: 100%;
`;

const RegisterPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const router = useRouter();
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      setError("Las contraseñas no coinciden");
      return;
    }
    try {
      await dispatch(registerUser({ username, email, password })).unwrap();
      // Redirige a la ruta configurada (backend ya la tiene configurada)
      router.push("/auth/login");
    } catch (err: any) {
      setError(err.message || "Error al registrarse");
    }
  };

  return (
    <>
      <GlobalStyle />
      <BackgroundWrapper>
        <FormContainer>
          <Box component="form" onSubmit={handleSubmit}>
            <Typography
              variant="h4"
              align="center"
              gutterBottom
              sx={{ color: "#000" }}
            >
              Registro
            </Typography>
            <TextField
              label="Usuario"
              variant="outlined"
              fullWidth
              margin="normal"
              value={username}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setUsername(e.target.value)
              }
              required
            />
            <TextField
              label="Correo electrónico"
              variant="outlined"
              fullWidth
              margin="normal"
              type="email"
              value={email}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setEmail(e.target.value)
              }
              required
            />
            <TextField
              label="Contraseña"
              type="password"
              variant="outlined"
              fullWidth
              margin="normal"
              value={password}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setPassword(e.target.value)
              }
              required
            />
            <TextField
              label="Confirmar Contraseña"
              type="password"
              variant="outlined"
              fullWidth
              margin="normal"
              value={confirmPassword}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setConfirmPassword(e.target.value)
              }
              required
            />
            {error && (
              <Typography color="error" variant="body2">
                {error}
              </Typography>
            )}
            <Button
              type="submit"
              variant="contained"
              color="primary"
              fullWidth
              sx={{ marginTop: 2 }}
            >
              Registrarse
            </Button>
            <Button
              variant="outlined"
              color="secondary"
              fullWidth
              sx={{ marginTop: 1 }}
              onClick={() => alert("Registro con Google no implementado")}
            >
              Registrarse con Google
            </Button>
          </Box>
        </FormContainer>
      </BackgroundWrapper>
    </>
  );
};

export default RegisterPage;






===== Archivo: src/app/auth/login/AuthPage.tsx =====
"use client";
import React from "react";
import styled from "styled-components";
import AuthFlipCard from "../../../components/Auth/AuthFlipCard";

const PageContainer = styled.div`
  position: relative;
  width: 100vw;
  height: 100vh;
`;

const LogoContainer = styled.div`
  /* Ocupa la mitad izquierda y centra el contenido */
  position: absolute;
  left: 0;
  width: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 50%;
  transform: translateY(-50%);
`;

const FormContainer = styled.div`
  /* El formulario se posiciona en la mitad derecha, un poco más arriba */
  position: absolute;
  left: 50%;
  top: 45%; /* Ajusta este valor para elevar o bajar el formulario */
  transform: translate(0, -50%);
`;

const AuthPage: React.FC = () => {
  return (
    <PageContainer>
      <LogoContainer>
      </LogoContainer>
      <FormContainer>
        <AuthFlipCard />
      </FormContainer>
    </PageContainer>
  );
};

export default AuthPage;



===== Archivo: src/app/auth/login/page.tsx =====
"use client";

import React, { useState, useEffect } from "react";
import styled, { createGlobalStyle } from "styled-components";
import { useRouter } from "next/navigation";

// ================ Global Styles ================
const GlobalStyles = createGlobalStyle`
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  :root {
    --background: #ffffff;
    --foreground: #171717;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --background: #0a0a0a;
      --foreground: #ededed;
    }
  }

  body {
    color: var(--foreground);
    background: var(--background);
    font-family: Arial, Helvetica, sans-serif;
  }

  /***************************************************
   * Generated by SVG Artista
   * MIT license (https://opensource.org/licenses/MIT)
   * W. https://svgartista.net
   **************************************************/

    fill: transparent;
    transition: fill 0.7s cubic-bezier(0.6, -0.28, 0.735, 0.045) 1.1s;
  }
    fill: #49d397;
  }

    fill: transparent;
    transition: fill 0.7s cubic-bezier(0.6, -0.28, 0.735, 0.045) 1.2s;
  }
    fill: #579fef;
  }

    fill: transparent;
    transition: fill 0.7s cubic-bezier(0.6, -0.28, 0.735, 0.045) 1.3s;
  }
    fill: #4d6fed;
  }

    fill: transparent;
    transition: fill 0.7s cubic-bezier(0.6, -0.28, 0.735, 0.045) 1.4s;
  }
    fill: #3364cf;
  }
`;

// ============ Autenticación falsa ============
async function fakeLogin(username: string, password: string) {
  if (username === "test" && password === "123") return true;
  throw new Error("Usuario/contraseña inválidos");
}
async function fakeRegister(username: string, email: string, password: string) {
  if (!username || !email || !password) throw new Error("Datos incompletos");
  return true;
}

// ========== Componente del Logo Animado ==========
const AnimatedLogoInline: React.FC = () => {
  const [active, setActive] = useState(false);

  useEffect(() => {
    // Activamos la animación tras montar el componente
    const timer = setTimeout(() => setActive(true), 200);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div>
      {/* Nuevo SVG convertido a JSX */}
      <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlnsXlink="http://www.w3.org/1999/xlink"
        width="375"
        height="375"
        zoomAndPan="magnify"
        viewBox="0 0 375 374.999991"
        preserveAspectRatio="xMidYMid meet"
        version="1.0"
        className={active ? "active" : ""}
      >
        <defs>
          <g></g>
          <clipPath id="afe59d0000">
            <path
              d="M 160 96 L 309.734375 96 L 309.734375 282.890625 L 160 282.890625 Z M 160 96 "
              clipRule="nonzero"
              className="svg-elem-1"
            />
          </clipPath>
          <clipPath id="d00cb3a8a7">
            <path
              d="M 90 28.640625 L 307 28.640625 L 307 199 L 90 199 Z M 90 28.640625 "
              clipRule="nonzero"
              className="svg-elem-2"
            />
          </clipPath>
          <clipPath id="b0d0330c0a">
            <path
              d="M 87 96 L 234 96 L 234 282.890625 L 87 282.890625 Z M 87 96 "
              clipRule="nonzero"
              className="svg-elem-3"
            />
          </clipPath>
        </defs>
        <g clipPath="url(#afe59d0000)">
          <path
            fill="#49d397"
            d="M 282.605469 151.296875 L 282.605469 196.332031 C 291.546875 191.167969 300.488281 186.007812 309.425781 180.84375 L 309.429688 220.574219 L 275.019531 240.441406 C 275.023438 230.117188 275.023438 219.792969 275.019531 209.46875 L 236.019531 231.984375 L 236.019531 262.960938 L 201.609375 282.820312 L 201.609375 243.089844 L 275.019531 200.707031 L 275.019531 115.945312 L 309.425781 96.082031 L 309.429688 135.808594 Z M 194.929688 198.457031 L 194.925781 158.726562 L 160.519531 138.859375 L 160.515625 178.59375 Z M 194.929688 198.457031 "
            fillOpacity="1"
            fillRule="evenodd"
            className="svg-elem-4"
          />
        </g>
        <g clipPath="url(#d00cb3a8a7)">
          <path
            fill="#579fef"
            d="M 245.203125 86.511719 L 206.199219 63.992188 C 215.140625 58.832031 224.082031 53.667969 233.023438 48.507812 L 198.617188 28.640625 L 164.207031 48.511719 C 173.148438 53.667969 182.089844 58.832031 191.03125 63.992188 L 152.03125 86.511719 L 125.207031 71.023438 L 90.800781 90.890625 L 125.207031 110.757812 L 198.617188 68.375 L 272.023438 110.753906 L 306.429688 90.890625 L 272.023438 71.023438 Z M 201.609375 198.058594 L 201.613281 158.328125 L 236.019531 138.460938 L 236.023438 178.191406 Z M 201.609375 198.058594 "
            fillOpacity="1"
            fillRule="evenodd"
            className="svg-elem-5"
          />
        </g>
        <g clipPath="url(#b0d0330c0a)">
          <path
            fill="#4d6fed"
            d="M 113.933594 151.695312 L 113.933594 196.730469 C 104.992188 191.570312 96.050781 186.40625 87.113281 181.242188 L 87.109375 220.972656 L 121.519531 240.839844 C 121.515625 230.515625 121.515625 220.191406 121.519531 209.867188 L 160.519531 232.382812 L 160.519531 263.359375 L 194.929688 283.21875 L 194.929688 243.488281 L 121.519531 201.105469 L 121.519531 116.34375 L 87.113281 96.480469 L 87.109375 136.207031 Z M 164.207031 133.273438 L 198.617188 113.40625 L 233.023438 133.273438 L 198.617188 153.136719 Z M 164.207031 133.273438 "
            fillOpacity="1"
            fillRule="evenodd"
            className="svg-elem-6"
          />
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(63.022643, 322.086074)">
            <g>
              <path
                d="M 11.203125 0.40625 C 9.347656 0.40625 7.664062 -0.00390625 6.15625 -0.828125 C 4.644531 -1.648438 3.453125 -2.796875 2.578125 -4.265625 C 1.710938 -5.742188 1.28125 -7.445312 1.28125 -9.375 C 1.28125 -11.351562 1.738281 -13.097656 2.65625 -14.609375 C 3.570312 -16.128906 4.832031 -17.320312 6.4375 -18.1875 C 8.050781 -19.050781 9.894531 -19.484375 11.96875 -19.484375 C 14.03125 -19.484375 15.863281 -19.046875 17.46875 -18.171875 C 19.082031 -17.296875 20.34375 -16.085938 21.25 -14.546875 C 22.164062 -13.003906 22.625 -11.210938 22.625 -9.171875 L 22.625 0 L 17.421875 0 L 17.3125 -1.96875 C 16.550781 -1.1875 15.640625 -0.59375 14.578125 -0.1875 C 13.523438 0.207031 12.398438 0.40625 11.203125 0.40625 Z M 11.96875 -4.453125 C 13.394531 -4.453125 14.566406 -4.910156 15.484375 -5.828125 C 16.398438 -6.742188 16.859375 -7.960938 16.859375 -9.484375 C 16.859375 -11.023438 16.390625 -12.257812 15.453125 -13.1875 C 14.523438 -14.125 13.351562 -14.59375 11.9375 -14.59375 C 10.507812 -14.59375 9.332031 -14.125 8.40625 -13.1875 C 7.488281 -12.257812 7.03125 -11.035156 7.03125 -9.515625 C 7.03125 -7.972656 7.492188 -6.742188 8.421875 -5.828125 C 9.359375 -4.910156 10.539062 -4.453125 11.96875 -4.453125 Z M 11.96875 -4.453125 "
                className="svg-elem-7"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(95.777453, 322.086074)">
            <g>
              <path
                d="M 7.65625 5.890625 L 1.890625 5.890625 L 1.890625 -9.171875 C 1.890625 -11.210938 2.347656 -13.003906 3.265625 -14.546875 C 4.191406 -16.085938 5.453125 -17.296875 7.046875 -18.171875 C 8.648438 -19.046875 10.484375 -19.484375 12.546875 -19.484375 C 14.617188 -19.484375 16.457031 -19.050781 18.0625 -18.1875 C 19.675781 -17.320312 20.941406 -16.128906 21.859375 -14.609375 C 22.785156 -13.097656 23.25 -11.351562 23.25 -9.375 C 23.25 -7.445312 22.804688 -5.742188 21.921875 -4.265625 C 21.035156 -2.796875 19.84375 -1.648438 18.34375 -0.828125 C 16.851562 -0.00390625 15.175781 0.40625 13.3125 0.40625 C 12.300781 0.40625 11.300781 0.253906 10.3125 -0.046875 C 9.320312 -0.359375 8.4375 -0.847656 7.65625 -1.515625 Z M 12.546875 -4.453125 C 13.972656 -4.453125 15.148438 -4.910156 16.078125 -5.828125 C 17.015625 -6.742188 17.484375 -7.972656 17.484375 -9.515625 C 17.484375 -11.035156 17.019531 -12.257812 16.09375 -13.1875 C 15.175781 -14.125 14.007812 -14.59375 12.59375 -14.59375 C 11.164062 -14.59375 9.984375 -14.125 9.046875 -13.1875 C 8.117188 -12.257812 7.65625 -11.023438 7.65625 -9.484375 C 7.65625 -7.960938 8.113281 -6.742188 9.03125 -5.828125 C 9.957031 -4.910156 11.128906 -4.453125 12.546875 -4.453125 Z M 12.546875 -4.453125 "
                className="svg-elem-8"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(128.532263, 322.086074)">
            <g>
              <path
                d="M 11.9375 0.40625 C 9.882812 0.40625 8.050781 -0.0195312 6.4375 -0.875 C 4.832031 -1.738281 3.570312 -2.921875 2.65625 -4.421875 C 1.738281 -5.929688 1.28125 -7.640625 1.28125 -9.546875 C 1.28125 -11.484375 1.738281 -13.195312 2.65625 -14.6875 C 3.570312 -16.1875 4.835938 -17.359375 6.453125 -18.203125 C 8.078125 -19.054688 9.914062 -19.484375 11.96875 -19.484375 C 14.03125 -19.484375 15.859375 -19.054688 17.453125 -18.203125 C 19.054688 -17.359375 20.316406 -16.1875 21.234375 -14.6875 C 22.160156 -13.195312 22.625 -11.5 22.625 -9.59375 C 22.625 -7.675781 22.160156 -5.957031 21.234375 -4.4375 C 20.316406 -2.925781 19.050781 -1.738281 17.4375 -0.875 C 15.832031 -0.0195312 14 0.40625 11.9375 0.40625 Z M 11.96875 -4.484375 C 13.394531 -4.484375 14.566406 -4.945312 15.484375 -5.875 C 16.398438 -6.8125 16.859375 -8.035156 16.859375 -9.546875 C 16.859375 -11.085938 16.390625 -12.316406 15.453125 -13.234375 C 14.523438 -14.160156 13.351562 -14.625 11.9375 -14.625 C 10.53125 -14.625 9.359375 -14.160156 8.421875 -13.234375 C 7.492188 -12.316406 7.03125 -11.113281 7.03125 -9.625 C 7.03125 -8.082031 7.492188 -6.835938 8.421875 -5.890625 C 9.359375 -4.953125 10.539062 -4.484375 11.96875 -4.484375 Z M 11.96875 -4.484375 "
                className="svg-elem-9"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(160.666516, 322.086074)">
            <g>
              <path
                d="M 7.859375 0 L 2.171875 0 L 2.171875 -25.453125 L 7.859375 -25.453125 Z M 7.859375 0 "
                className="svg-elem-10"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(178.941522, 322.086074)">
            <g>
              <path
                d="M 11.9375 0.40625 C 9.882812 0.40625 8.050781 -0.0195312 6.4375 -0.875 C 4.832031 -1.738281 3.570312 -2.921875 2.65625 -4.421875 C 1.738281 -5.929688 1.28125 -7.640625 1.28125 -9.546875 C 1.28125 -11.484375 1.738281 -13.195312 2.65625 -14.6875 C 3.570312 -16.1875 4.835938 -17.359375 6.453125 -18.203125 C 8.078125 -19.054688 9.914062 -19.484375 11.96875 -19.484375 C 14.03125 -19.484375 15.859375 -19.054688 17.453125 -18.203125 C 19.054688 -17.359375 20.316406 -16.1875 21.234375 -14.6875 C 22.160156 -13.195312 22.625 -11.5 22.625 -9.59375 C 22.625 -7.675781 22.160156 -5.957031 21.234375 -4.4375 C 20.316406 -2.925781 19.050781 -1.738281 17.4375 -0.875 C 15.832031 -0.0195312 14 0.40625 11.9375 0.40625 Z M 11.96875 -4.484375 C 13.394531 -4.484375 14.566406 -4.945312 15.484375 -5.875 C 16.398438 -6.8125 16.859375 -8.035156 16.859375 -9.546875 C 16.859375 -11.085938 16.390625 -12.316406 15.453125 -13.234375 C 14.523438 -14.160156 13.351562 -14.625 11.9375 -14.625 C 10.53125 -14.625 9.359375 -14.160156 8.421875 -13.234375 C 7.492188 -12.316406 7.03125 -11.113281 7.03125 -9.625 C 7.03125 -8.082031 7.492188 -6.835938 8.421875 -5.890625 C 9.359375 -4.953125 10.539062 -4.484375 11.96875 -4.484375 Z M 11.96875 -4.484375 "
                className="svg-elem-11"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(211.075772, 322.086074)">
            <g>
              <path
                d="M 27.890625 -19.0625 L 33.625 -19.0625 L 33.625 -9.828125 C 33.625 -7.785156 33.226562 -5.992188 32.4375 -4.453125 C 31.644531 -2.910156 30.546875 -1.710938 29.140625 -0.859375 C 27.734375 -0.015625 26.113281 0.40625 24.28125 0.40625 C 22.894531 0.40625 21.628906 0.132812 20.484375 -0.40625 C 19.335938 -0.957031 18.429688 -1.695312 17.765625 -2.625 C 17.097656 -1.695312 16.1875 -0.957031 15.03125 -0.40625 C 13.882812 0.132812 12.617188 0.40625 11.234375 0.40625 C 9.421875 0.40625 7.804688 -0.015625 6.390625 -0.859375 C 4.984375 -1.710938 3.878906 -2.910156 3.078125 -4.453125 C 2.285156 -5.992188 1.890625 -7.785156 1.890625 -9.828125 L 1.890625 -19.0625 L 7.625 -19.0625 L 7.625 -8.890625 C 7.625 -7.585938 7.960938 -6.519531 8.640625 -5.6875 C 9.316406 -4.863281 10.179688 -4.453125 11.234375 -4.453125 C 12.316406 -4.453125 13.195312 -4.863281 13.875 -5.6875 C 14.550781 -6.519531 14.890625 -7.585938 14.890625 -8.890625 L 14.890625 -19.0625 L 20.625 -19.0625 L 20.625 -8.890625 C 20.625 -7.585938 20.960938 -6.519531 21.640625 -5.6875 C 22.316406 -4.863281 23.195312 -4.453125 24.28125 -4.453125 C 25.332031 -4.453125 26.195312 -4.863281 26.875 -5.6875 C 27.550781 -6.519531 27.890625 -7.585938 27.890625 -8.890625 Z M 27.890625 -19.0625 "
                className="svg-elem-12"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(254.828354, 322.086074)">
            <g>
              <path
                d="M 11.203125 0.40625 C 9.347656 0.40625 7.664062 -0.00390625 6.15625 -0.828125 C 4.644531 -1.648438 3.453125 -2.796875 2.578125 -4.265625 C 1.710938 -5.742188 1.28125 -7.445312 1.28125 -9.375 C 1.28125 -11.351562 1.738281 -13.097656 2.65625 -14.609375 C 3.570312 -16.128906 4.832031 -17.320312 6.4375 -18.1875 C 8.050781 -19.050781 9.894531 -19.484375 11.96875 -19.484375 C 14.03125 -19.484375 15.863281 -19.046875 17.46875 -18.171875 C 19.082031 -17.296875 20.34375 -16.085938 21.25 -14.546875 C 22.164062 -13.003906 22.625 -11.210938 22.625 -9.171875 L 22.625 0 L 17.421875 0 L 17.3125 -1.96875 C 16.550781 -1.1875 15.640625 -0.59375 14.578125 -0.1875 C 13.523438 0.207031 12.398438 0.40625 11.203125 0.40625 Z M 11.96875 -4.453125 C 13.394531 -4.453125 14.566406 -4.910156 15.484375 -5.828125 C 16.398438 -6.742188 16.859375 -7.960938 16.859375 -9.484375 C 16.859375 -11.023438 16.390625 -12.257812 15.453125 -13.1875 C 14.523438 -14.125 13.351562 -14.59375 11.9375 -14.59375 C 10.507812 -14.59375 9.332031 -14.125 8.40625 -13.1875 C 7.488281 -12.257812 7.03125 -11.035156 7.03125 -9.515625 C 7.03125 -7.972656 7.492188 -6.742188 8.421875 -5.828125 C 9.359375 -4.910156 10.539062 -4.453125 11.96875 -4.453125 Z M 11.96875 -4.453125 "
                className="svg-elem-13"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(287.583169, 322.086074)">
            <g>
              <path
                d="M 7.59375 0 L 1.890625 0 L 1.890625 -9.6875 C 1.890625 -11.644531 2.304688 -13.359375 3.140625 -14.828125 C 3.984375 -16.296875 5.113281 -17.4375 6.53125 -18.25 C 7.945312 -19.070312 9.515625 -19.484375 11.234375 -19.484375 C 12.660156 -19.484375 13.914062 -19.28125 15 -18.875 C 16.082031 -18.476562 17.046875 -17.910156 17.890625 -17.171875 L 15.140625 -13.28125 C 14.835938 -13.601562 14.398438 -13.90625 13.828125 -14.1875 C 13.253906 -14.476562 12.578125 -14.625 11.796875 -14.625 C 10.410156 -14.625 9.363281 -14.1875 8.65625 -13.3125 C 7.945312 -12.4375 7.59375 -11.273438 7.59375 -9.828125 Z M 7.59375 0 "
                className="svg-elem-14"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(313.822074, 322.086074)">
            <g>
              <path
                d="M 12.171875 -4.40625 C 13.753906 -4.40625 15.316406 -4.9375 16.859375 -6 L 19.109375 -2 C 17.835938 -1.082031 16.628906 -0.457031 15.484375 -0.125 C 14.335938 0.207031 13.050781 0.375 11.625 0.375 C 9.6875 0.375 7.9375 -0.03125 6.375 -0.84375 C 4.8125 -1.65625 3.570312 -2.800781 2.65625 -4.28125 C 1.738281 -5.769531 1.28125 -7.523438 1.28125 -9.546875 C 1.28125 -11.066406 1.554688 -12.4375 2.109375 -13.65625 C 2.660156 -14.875 3.414062 -15.921875 4.375 -16.796875 C 5.34375 -17.671875 6.445312 -18.335938 7.6875 -18.796875 C 8.925781 -19.253906 10.238281 -19.484375 11.625 -19.484375 C 13.019531 -19.484375 14.328125 -19.296875 15.546875 -18.921875 C 16.765625 -18.554688 17.953125 -17.9375 19.109375 -17.0625 L 16.796875 -12.96875 C 15.992188 -13.5625 15.226562 -13.988281 14.5 -14.25 C 13.78125 -14.519531 12.992188 -14.65625 12.140625 -14.65625 C 11.015625 -14.65625 10.03125 -14.394531 9.1875 -13.875 C 8.351562 -13.363281 7.765625 -12.613281 7.421875 -11.625 L 14.546875 -11.625 L 14.546875 -7.96875 L 7.234375 -7.96875 C 7.535156 -6.84375 8.128906 -5.96875 9.015625 -5.34375 C 9.898438 -4.71875 10.953125 -4.40625 12.171875 -4.40625 Z M 12.171875 -4.40625 "
                className="svg-elem-15"
              />
            </g>
          </g>
        </g>
        <g fill="#3364cf" fillOpacity="1">
          <g transform="translate(193.199978, 371.739011)">
            <g>
              {/* Grupo vacío para mantener la consistencia */}
            </g>
          </g>
        </g>
      </svg>
    </div>
  );
};

// ============ COMPONENTE PRINCIPAL ============
export default function LoginRegisterPage() {
  const router = useRouter();
  const [isFlipped, setIsFlipped] = useState(false);
  const [loginUsername, setLoginUsername] = useState("");
  const [loginPassword, setLoginPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [loginError, setLoginError] = useState("");
  const [regUsername, setRegUsername] = useState("");
  const [regEmail, setRegEmail] = useState("");
  const [regPassword, setRegPassword] = useState("");
  const [regConfirm, setRegConfirm] = useState("");
  const [regError, setRegError] = useState("");

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoginError("");
    try {
      await fakeLogin(loginUsername, loginPassword);
      router.push("/dashboard");
    } catch (err: any) {
      setLoginError(err.message || "Error al iniciar sesión");
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setRegError("");
    if (regPassword !== regConfirm) {
      setRegError("Las contraseñas no coinciden");
      return;
    }
    try {
      await fakeRegister(regUsername, regEmail, regPassword);
      setIsFlipped(false);
    } catch (err: any) {
      setRegError(err.message || "Error al registrarse");
    }
  };

  return (
    <PageWrapper>
      <GlobalStyles />
      <LeftContainer>
        {/* Logo animado */}
        <AnimatedLogoInline />
      </LeftContainer>
      <CircleContainer>
        <Circle size={220} top="10%" left="40%" />
        <Circle size={150} top="30%" left="70%" />
        <Circle size={120} top="55%" left="50%" />
        <Circle size={80} top="75%" left="65%" />
      </CircleContainer>
      <FlipContainer>
        <FlipInner $isFlipped={isFlipped}>
          {/* CARA LOGIN */}
          <Side>
            <CardShape>
              <Title>WELCOME!!</Title>
              <Form onSubmit={handleLogin}>
                <InputGroup>
                  <IconHolder>
                    <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
                      <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3Zm5-6a3 3 0 1 0-3-3 3 3 0 0 0 3 3Z" />
                    </svg>
                  </IconHolder>
                  <Input
                    type="text"
                    placeholder="Username"
                    value={loginUsername}
                    onChange={(e) => setLoginUsername(e.target.value)}
                    required
                  />
                </InputGroup>
                <InputGroup>
                  <IconHolder>
                    <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
                      <path d="M8 4a3 3 0 0 0-3 3v1H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1V7a3 3 0 0 0-3-3z" />
                    </svg>
                  </IconHolder>
                  <Input
                    type="password"
                    placeholder="Password"
                    value={loginPassword}
                    onChange={(e) => setLoginPassword(e.target.value)}
                    required
                  />
                </InputGroup>
                <CheckRow>
                  <label>
                    <Bullet
                      type="radio"
                      checked={rememberMe}
                      onChange={() => setRememberMe(!rememberMe)}
                    />
                    <span>Remember me</span>
                  </label>
                  <span>Forgot password?</span>
                </CheckRow>
                {loginError && <ErrorMessage>{loginError}</ErrorMessage>}
                <PrimaryButton type="submit">Login</PrimaryButton>
              </Form>
              <SecondaryText>
                Don’t have an account?{" "}
                <span onClick={() => setIsFlipped(true)}>Sign Up</span>
              </SecondaryText>
              <OrText>Or with</OrText>
              <SocialRow>
                <SocialButton>Google</SocialButton>
                <SocialButton>Apple</SocialButton>
              </SocialRow>
            </CardShape>
          </Side>
          {/* CARA REGISTER */}
          <Side style={{ transform: "rotateY(180deg)" }}>
            <CardShape>
              <Title>Sign Up</Title>
              <Form onSubmit={handleRegister}>
                <InputGroup>
                  <IconHolder>
                    <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
                      <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3Zm5-6a3 3 0 1 0-3-3 3 3 0 0 0 3 3Z" />
                    </svg>
                  </IconHolder>
                  <Input
                    type="text"
                    placeholder="Username"
                    value={regUsername}
                    onChange={(e) => setRegUsername(e.target.value)}
                    required
                  />
                </InputGroup>
                <InputGroup>
                  <IconHolder>
                    <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
                      <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-.5a.5.5 0 0 0-.5.5v.217l6 3.6 6-3.6V4a.5.5 0 0 0-.5-.5H2zm12 2.383-5.28 3.168a.5.5 0 0 1-.44 0L3 5.883V12a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V5.883z"/>
                    </svg>
                  </IconHolder>
                  <Input
                    type="email"
                    placeholder="Email"
                    value={regEmail}
                    onChange={(e) => setRegEmail(e.target.value)}
                    required
                  />
                </InputGroup>
                <InputGroup>
                  <IconHolder>
                    <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
                      <path d="M8 4a3 3 0 0 0-3 3v1H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1V7a3 3 0 0 0-3-3z" />
                    </svg>
                  </IconHolder>
                  <Input
                    type="password"
                    placeholder="Password"
                    value={regPassword}
                    onChange={(e) => setRegPassword(e.target.value)}
                    required
                  />
                </InputGroup>
                <InputGroup>
                  <IconHolder>
                    <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
                      <path d="M8 4a3 3 0 0 0-3 3v1H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1V7a3 3 0 0 0-3-3z" />
                    </svg>
                  </IconHolder>
                  <Input
                    type="password"
                    placeholder="Confirm password"
                    value={regConfirm}
                    onChange={(e) => setRegConfirm(e.target.value)}
                    required
                  />
                </InputGroup>
                {regError && <ErrorMessage>{regError}</ErrorMessage>}
                <ButtonsRow>
                  <PrimaryButton type="submit">Sign Up</PrimaryButton>
                  <SecondaryBtn type="button" onClick={() => setIsFlipped(false)}>
                    Login
                  </SecondaryBtn>
                </ButtonsRow>
              </Form>
            </CardShape>
          </Side>
        </FlipInner>
      </FlipContainer>
    </PageWrapper>
  );
}

/* ===================== ESTILOS ===================== */
const PageWrapper = styled.div`
  position: relative;
  width: 100%;
  min-height: 100vh;
  background: #fff;
  overflow: hidden;
  font-family: sans-serif;
`;

const LeftContainer = styled.div`
  position: absolute;
  left: 13%;
  top: 45%;
  transform: translateY(-50%);
  display: flex;
  align-items: center;
  justify-content: center;
`;

const CircleContainer = styled.div`
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  width: 50%;
  pointer-events: none;
  z-index: 1;
`;

interface CircleProps {
  size: number;
  top: string;
  left: string;
}

const Circle = styled.div<CircleProps>`
  position: absolute;
  width: ${(p) => p.size}px;
  height: ${(p) => p.size}px;
  border-radius: 50%;
  background: #d9ecff;
  top: ${(p) => p.top};
  left: ${(p) => p.left};
  opacity: 0.8;
`;

const FlipContainer = styled.div`
  position: absolute;
  right: 10%;
  top: 50%;
  transform: translateY(-50%);
  width: 340px;
  height: 480px;
  perspective: 1000px;
  z-index: 2;
`;

const FlipInner = styled.div<{ $isFlipped: boolean }>`
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.8s cubic-bezier(0.45, 0.05, 0.55, 0.95);
  transform-style: preserve-3d;
  transform: ${(props) => (props.$isFlipped ? "rotateY(180deg)" : "none")};
`;

const Side = styled.div`
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
`;

const CardShape = styled.div`
  width: 100%;
  height: 100%;
  padding: 2rem;
  background: #fff;
  border-radius: 0 50px 50px 0;
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
`;

const Title = styled.h2`
  margin: 0 0 1rem;
  font-weight: bold;
  color: #333;
  text-align: center;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
`;

const InputGroup = styled.div`
  position: relative;
  display: flex;
  align-items: center;
`;

const IconHolder = styled.span`
  position: absolute;
  left: 10px;
  font-size: 14px;
  color: #999;
  display: flex;
  align-items: center;
`;

const Input = styled.input`
  width: 100%;
  padding: 0.6rem 0.6rem 0.6rem 2rem;
  border-radius: 8px;
  border: 1px solid #ccc;
  font-size: 14px;
  outline: none;
  color: #333;
  &::placeholder {
    color: #999;
  }
`;

const Bullet = styled.input`
  margin-right: 4px;
`;

const CheckRow = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 14px;
  color: #333;
  margin: 0.5rem 0;
  span {
    cursor: pointer;
  }
`;

const ErrorMessage = styled.div`
  font-size: 13px;
  color: red;
  margin-top: -4px;
`;

const PrimaryButton = styled.button`
  padding: 0.6rem;
  border: none;
  border-radius: 20px;
  background: #5ed7e8;
  color: #fff;
  font-weight: bold;
  font-size: 14px;
  cursor: pointer;
  transition: 0.3s;
  &:hover {
    opacity: 0.9;
  }
`;

const ButtonsRow = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 0.5rem;
`;

const SecondaryBtn = styled.button`
  flex: 1;
  padding: 0.6rem;
  border: 2px solid #5ed7e8;
  border-radius: 20px;
  background: transparent;
  color: #5ed7e8;
  font-weight: bold;
  font-size: 14px;
  cursor: pointer;
  transition: 0.3s;
  &:hover {
    background: #e2fbfd;
  }
`;

const SecondaryText = styled.div`
  margin: 0.5rem 0;
  font-size: 14px;
  text-align: center;
  color: #333;
  span {
    color: #666;
    text-decoration: underline;
    cursor: pointer;
    margin-left: 5px;
  }
`;

const OrText = styled.div`
  text-align: center;
  margin: 0.5rem 0;
  font-size: 14px;
  color: #666;
`;

const SocialRow = styled.div`
  display: flex;
  gap: 0.5rem;
`;

const SocialButton = styled.button`
  flex: 1;
  padding: 0.6rem;
  border: 1px solid #ccc;
  border-radius: 20px;
  background: #fff;
  font-size: 14px;
  font-weight: bold;
  color: #333;
  cursor: pointer;
  &:hover {
    background: #f2f2f2;
  }
`;



===== Archivo: src/app/(protected)/putaway/page.tsx =====
"use client";

import React, { useState, ChangeEvent, FormEvent } from "react";
import styled from "styled-components";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Tooltip,
  Legend,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Bar,
  Cell,
} from "recharts";
import { FaBoxOpen, FaPlus, FaEdit, FaTrash, FaSave, FaTimes } from "react-icons/fa";

// Definición de la interfaz para Putaway
interface Putaway {
  id: number;
  putawayId: string;
  product: string;
  quantity: number;
  location: string;
  putawayDate: string;
  status: string; // Por ejemplo: "Completed", "In Progress", "Pending"
}

// Datos demo iniciales
const initialPutaways: Putaway[] = [
  {
    id: 1,
    putawayId: "PTW-001",
    product: "Producto X",
    quantity: 150,
    location: "Almacén A",
    putawayDate: "2025-04-14T09:00:00",
    status: "Completed",
  },
  {
    id: 2,
    putawayId: "PTW-002",
    product: "Producto Y",
    quantity: 80,
    location: "Almacén B",
    putawayDate: "2025-04-15T10:30:00",
    status: "In Progress",
  },
  {
    id: 3,
    putawayId: "PTW-003",
    product: "Producto Z",
    quantity: 120,
    location: "Almacén A",
    putawayDate: "2025-04-16T08:45:00",
    status: "Pending",
  },
  {
    id: 4,
    putawayId: "PTW-004",
    product: "Producto X",
    quantity: 200,
    location: "Almacén C",
    putawayDate: "2025-04-16T11:20:00",
    status: "Completed",
  },
  {
    id: 5,
    putawayId: "PTW-005",
    product: "Producto Y",
    quantity: 90,
    location: "Almacén B",
    putawayDate: "2025-04-17T14:00:00",
    status: "In Progress",
  },
];

// Colores para el PieChart
const pieColors = ["#4BBF73", "#F9A826", "#FF5757"];

// Función que prepara la data para el gráfico de pastel según el estado
const getStatusData = (putaways: Putaway[]) => [
  { name: "Completed", value: putaways.filter((p) => p.status === "Completed").length },
  { name: "In Progress", value: putaways.filter((p) => p.status === "In Progress").length },
  { name: "Pending", value: putaways.filter((p) => p.status === "Pending").length },
];

// Función que agrupa los putaways por ubicación para el gráfico de barras
const getLocationData = (putaways: Putaway[]) => {
  const locations: { [key: string]: number } = {};
  putaways.forEach((p) => {
    locations[p.location] = (locations[p.location] || 0) + 1;
  });
  return Object.entries(locations).map(([location, count]) => ({ location, count }));
};

export default function PutawayPage() {
  // Estado que mantiene los putaways (simulación de backend)
  const [putaways, setPutaways] = useState<Putaway[]>(initialPutaways);

  // Estado para el formulario de nuevo putaway
  const [newPutaway, setNewPutaway] = useState<Omit<Putaway, "id">>({
    putawayId: "",
    product: "",
    quantity: 0,
    location: "",
    putawayDate: "",
    status: "",
  });

  // Estado para la edición: guarda el id a editar y sus datos temporales
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editPutaway, setEditPutaway] = useState<Omit<Putaway, "id">>({
    putawayId: "",
    product: "",
    quantity: 0,
    location: "",
    putawayDate: "",
    status: "",
  });

  // Manejo de cambios en el formulario de nuevo putaway
  const handleNewInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewPutaway({
      ...newPutaway,
      [name]: name === "quantity" ? Number(value) : value,
    });
  };

  // Agrega un nuevo putaway
  const handleAddPutaway = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const newId = putaways.length > 0 ? Math.max(...putaways.map((p) => p.id)) + 1 : 1;
    const putawayToAdd: Putaway = { id: newId, ...newPutaway };
    setPutaways([...putaways, putawayToAdd]);
    setNewPutaway({ putawayId: "", product: "", quantity: 0, location: "", putawayDate: "", status: "" });
  };

  // Inicia la edición de un putaway
  const handleEditClick = (putaway: Putaway) => {
    setEditingId(putaway.id);
    setEditPutaway({
      putawayId: putaway.putawayId,
      product: putaway.product,
      quantity: putaway.quantity,
      location: putaway.location,
      putawayDate: putaway.putawayDate,
      status: putaway.status,
    });
  };

  // Maneja cambios en el formulario de edición
  const handleEditInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditPutaway({
      ...editPutaway,
      [name]: name === "quantity" ? Number(value) : value,
    });
  };

  // Guarda los cambios de edición
  const handleSaveEdit = (id: number) => {
    const updatedPutaways = putaways.map((p) =>
      p.id === id ? { id, ...editPutaway } : p
    );
    setPutaways(updatedPutaways);
    setEditingId(null);
  };

  // Cancela la edición
  const handleCancelEdit = () => {
    setEditingId(null);
  };

  // Borra un putaway
  const handleDelete = (id: number) => {
    const updatedPutaways = putaways.filter((p) => p.id !== id);
    setPutaways(updatedPutaways);
  };

  return (
    <Container>
      {/* Header del módulo */}
      <Header>
        <FaBoxOpen size={40} color="#4BBF73" />
        <Title>Módulo Putaway</Title>
      </Header>
      <Subtitle>Organización y seguimiento de putaway</Subtitle>

      {/* Formulario para agregar nuevo putaway */}
      <FormContainer onSubmit={handleAddPutaway}>
        <Input
          name="putawayId"
          placeholder="Putaway ID"
          value={newPutaway.putawayId}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="product"
          placeholder="Producto"
          value={newPutaway.product}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="number"
          name="quantity"
          placeholder="Cantidad"
          value={newPutaway.quantity === 0 ? "" : newPutaway.quantity}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="location"
          placeholder="Ubicación"
          value={newPutaway.location}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="datetime-local"
          name="putawayDate"
          value={newPutaway.putawayDate}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="status"
          placeholder="Estado (Completed, In Progress, Pending)"
          value={newPutaway.status}
          onChange={handleNewInputChange}
          required
        />
        <SubmitButton type="submit">
          <FaPlus /> Agregar Putaway
        </SubmitButton>
      </FormContainer>

      {/* Tarjetas resumen */}
      <CardContainer>
        <Card>
          <CardTitle>Total Putaways</CardTitle>
          <CardValue>{putaways.length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Completed</CardTitle>
          <CardValue>{putaways.filter((p) => p.status === "Completed").length}</CardValue>
        </Card>
        <Card>
          <CardTitle>In Progress</CardTitle>
          <CardValue>{putaways.filter((p) => p.status === "In Progress").length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Pending</CardTitle>
          <CardValue>{putaways.filter((p) => p.status === "Pending").length}</CardValue>
        </Card>
      </CardContainer>

      {/* Tabla con opciones para editar y borrar */}
      <TableContainer>
        <Table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Putaway ID</th>
              <th>Producto</th>
              <th>Cantidad</th>
              <th>Ubicación</th>
              <th>Fecha</th>
              <th>Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {putaways.map((p) => (
              <tr key={p.id}>
                <td>{p.id}</td>
                <td>
                  {editingId === p.id ? (
                    <InputSmall
                      name="putawayId"
                      value={editPutaway.putawayId}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    p.putawayId
                  )}
                </td>
                <td>
                  {editingId === p.id ? (
                    <InputSmall
                      name="product"
                      value={editPutaway.product}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    p.product
                  )}
                </td>
                <td>
                  {editingId === p.id ? (
                    <InputSmall
                      type="number"
                      name="quantity"
                      value={editPutaway.quantity === 0 ? "" : editPutaway.quantity}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    p.quantity
                  )}
                </td>
                <td>
                  {editingId === p.id ? (
                    <InputSmall
                      name="location"
                      value={editPutaway.location}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    p.location
                  )}
                </td>
                <td>
                  {editingId === p.id ? (
                    <InputSmall
                      type="datetime-local"
                      name="putawayDate"
                      value={editPutaway.putawayDate}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    new Date(p.putawayDate).toLocaleString()
                  )}
                </td>
                <td>
                  {editingId === p.id ? (
                    <InputSmall
                      name="status"
                      value={editPutaway.status}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    p.status
                  )}
                </td>
                <td>
                  {editingId === p.id ? (
                    <>
                      <ActionButton onClick={() => handleSaveEdit(p.id)} color="#4BBF73">
                        <FaSave />
                      </ActionButton>
                      <ActionButton onClick={handleCancelEdit} color="#FF5757">
                        <FaTimes />
                      </ActionButton>
                    </>
                  ) : (
                    <>
                      <ActionButton onClick={() => handleEditClick(p)} color="#F9A826">
                        <FaEdit />
                      </ActionButton>
                      <ActionButton onClick={() => handleDelete(p.id)} color="#FF5757">
                        <FaTrash />
                      </ActionButton>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </TableContainer>

      {/* Gráficos en tiempo real */}
      <ChartsContainer>
        {/* Pie Chart: Distribución por Estado */}
        <ChartWrapper>
          <ChartTitle>Distribución por Estado</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie dataKey="value" data={getStatusData(putaways)} cx="50%" cy="50%" outerRadius={80} label>
                {getStatusData(putaways).map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </ChartWrapper>
        {/* Bar Chart: Putaways por Ubicación */}
        <ChartWrapper>
          <ChartTitle>Putaways por Ubicación</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={getLocationData(putaways)}>
              <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
              <XAxis dataKey="location" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="count" fill="#82ca9d" name="Cantidad" />
            </BarChart>
          </ResponsiveContainer>
        </ChartWrapper>
      </ChartsContainer>
    </Container>
  );
}

/* ===============================
   Estilos con styled-components
   =============================== */
const Container = styled.div`
  padding: 2rem;
  background-color: #f4f7fa;
  min-height: 100vh;
`;

const Header = styled.div`
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
`;

const Title = styled.h1`
  color: #333;
  font-size: 2rem;
  font-weight: bold;
`;

const Subtitle = styled.p`
  color: #555;
  font-size: 1.2rem;
  margin-bottom: 2rem;
`;

const FormContainer = styled.form`
  display: flex;
  gap: 0.5rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
`;

const Input = styled.input`
  padding: 0.5rem;
  border-radius: 0.5rem;
  border: 1px solid #ccc;
  flex: 1 1 200px;
`;

const InputSmall = styled(Input)`
  width: 100%;
  flex: unset;
  margin-bottom: 0.5rem;
`;

const SubmitButton = styled.button`
  background-color: #4BBF73;
  color: #fff;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  &:hover {
    background-color: #3ea15e;
  }
`;

const CardContainer = styled.div`
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const Card = styled.div`
  background-color: #fff;
  padding: 1rem 1.5rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  flex: 1 1 180px;
  text-align: center;
`;

const CardTitle = styled.p`
  margin: 0;
  font-size: 1rem;
  color: #777;
`;

const CardValue = styled.p`
  margin: 0.5rem 0 0;
  font-size: 1.5rem;
  font-weight: bold;
  color: #333;
`;

const TableContainer = styled.div`
  overflow-x: auto;
  margin-bottom: 2rem;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9rem;

  th,
  td {
    border: 1px solid #ddd;
    padding: 0.75rem;
    text-align: left;
  }

  th {
    background-color: #f0f0f0;
  }
`;

const ActionButton = styled.button<{ color: string }>`
  background-color: transparent;
  border: none;
  color: ${(props) => props.color};
  cursor: pointer;
  margin-right: 0.5rem;
  font-size: 1rem;
`;

const ChartsContainer = styled.div`
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const ChartWrapper = styled.div`
  background-color: #fff;
  flex: 1 1 400px;
  padding: 1rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
`;

const ChartTitle = styled.h2`
  font-size: 1.2rem;
  color: #333;
  margin-bottom: 1rem;
`;



===== Archivo: src/app/(protected)/slotting/page.tsx =====
"use client";

import React, { useState, ChangeEvent, FormEvent } from "react";
import styled from "styled-components";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Tooltip,
  Legend,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Bar,
  Cell,
} from "recharts";
import { FaThList, FaPlus, FaEdit, FaTrash, FaSave, FaTimes } from "react-icons/fa";

// Definición de la interfaz para Slot
interface Slot {
  id: number;
  slotId: string;
  location: string;
  capacity: number;
  usedCapacity: number;
  status: string; // "Available", "Partial", "Full"
}

// Datos demo iniciales
const initialSlots: Slot[] = [
  {
    id: 1,
    slotId: "SLT-001",
    location: "Almacén A",
    capacity: 100,
    usedCapacity: 40,
    status: "Available",
  },
  {
    id: 2,
    slotId: "SLT-002",
    location: "Almacén B",
    capacity: 80,
    usedCapacity: 80,
    status: "Full",
  },
  {
    id: 3,
    slotId: "SLT-003",
    location: "Almacén A",
    capacity: 120,
    usedCapacity: 60,
    status: "Partial",
  },
  {
    id: 4,
    slotId: "SLT-004",
    location: "Almacén C",
    capacity: 150,
    usedCapacity: 150,
    status: "Full",
  },
  {
    id: 5,
    slotId: "SLT-005",
    location: "Almacén B",
    capacity: 90,
    usedCapacity: 30,
    status: "Available",
  },
];

// Colores para el PieChart
const pieColors = ["#4BBF73", "#F9A826", "#FF5757"];

// Función para generar datos del gráfico de pastel según el estado
const getStatusData = (slots: Slot[]) => [
  { name: "Available", value: slots.filter((s) => s.status === "Available").length },
  { name: "Partial", value: slots.filter((s) => s.status === "Partial").length },
  { name: "Full", value: slots.filter((s) => s.status === "Full").length },
];

// Función para agrupar los slots por ubicación y obtener su cantidad
const getLocationData = (slots: Slot[]) => {
  const locations: { [key: string]: number } = {};
  slots.forEach((s) => {
    locations[s.location] = (locations[s.location] || 0) + 1;
  });
  return Object.entries(locations).map(([location, count]) => ({ location, count }));
};

export default function SlottingPage() {
  // Estado que mantiene los slots (simulando data del backend)
  const [slots, setSlots] = useState<Slot[]>(initialSlots);

  // Estados para el formulario de nuevo slot
  const [newSlot, setNewSlot] = useState<Omit<Slot, "id">>({
    slotId: "",
    location: "",
    capacity: 0,
    usedCapacity: 0,
    status: "",
  });

  // Estados para la edición: guarda el id a editar y sus datos temporales
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editSlot, setEditSlot] = useState<Omit<Slot, "id">>({
    slotId: "",
    location: "",
    capacity: 0,
    usedCapacity: 0,
    status: "",
  });

  // Maneja los cambios en el formulario de nuevo slot
  const handleNewInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewSlot({
      ...newSlot,
      [name]:
        name === "capacity" || name === "usedCapacity" ? Number(value) : value,
    });
  };

  // Agrega un nuevo slot
  const handleAddSlot = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const newId = slots.length > 0 ? Math.max(...slots.map((s) => s.id)) + 1 : 1;
    const slotToAdd: Slot = { id: newId, ...newSlot };
    setSlots([...slots, slotToAdd]);
    setNewSlot({ slotId: "", location: "", capacity: 0, usedCapacity: 0, status: "" });
  };

  // Inicia la edición de un slot
  const handleEditClick = (slot: Slot) => {
    setEditingId(slot.id);
    setEditSlot({
      slotId: slot.slotId,
      location: slot.location,
      capacity: slot.capacity,
      usedCapacity: slot.usedCapacity,
      status: slot.status,
    });
  };

  // Maneja cambios en el formulario de edición
  const handleEditInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditSlot({
      ...editSlot,
      [name]:
        name === "capacity" || name === "usedCapacity" ? Number(value) : value,
    });
  };

  // Guarda los cambios de edición
  const handleSaveEdit = (id: number) => {
    const updatedSlots = slots.map((s) =>
      s.id === id ? { id, ...editSlot } : s
    );
    setSlots(updatedSlots);
    setEditingId(null);
  };

  // Cancela la edición
  const handleCancelEdit = () => {
    setEditingId(null);
  };

  // Borra un slot
  const handleDelete = (id: number) => {
    const updatedSlots = slots.filter((s) => s.id !== id);
    setSlots(updatedSlots);
  };

  return (
    <Container>
      {/* Header del módulo */}
      <Header>
        <FaThList size={40} color="#4BBF73" />
        <Title>Módulo Slotting</Title>
      </Header>
      <Subtitle>Organización y seguimiento de slots</Subtitle>

      {/* Formulario para agregar nuevo slot */}
      <FormContainer onSubmit={handleAddSlot}>
        <Input
          name="slotId"
          placeholder="Slot ID"
          value={newSlot.slotId}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="location"
          placeholder="Ubicación"
          value={newSlot.location}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="number"
          name="capacity"
          placeholder="Capacidad"
          value={newSlot.capacity === 0 ? "" : newSlot.capacity}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="number"
          name="usedCapacity"
          placeholder="Capacidad Usada"
          value={newSlot.usedCapacity === 0 ? "" : newSlot.usedCapacity}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="status"
          placeholder="Estado (Available, Partial, Full)"
          value={newSlot.status}
          onChange={handleNewInputChange}
          required
        />
        <SubmitButton type="submit">
          <FaPlus /> Agregar Slot
        </SubmitButton>
      </FormContainer>

      {/* Tarjetas resumen */}
      <CardContainer>
        <Card>
          <CardTitle>Total Slots</CardTitle>
          <CardValue>{slots.length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Available</CardTitle>
          <CardValue>{slots.filter((s) => s.status === "Available").length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Partial</CardTitle>
          <CardValue>{slots.filter((s) => s.status === "Partial").length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Full</CardTitle>
          <CardValue>{slots.filter((s) => s.status === "Full").length}</CardValue>
        </Card>
      </CardContainer>

      {/* Tabla con opciones para editar y borrar */}
      <TableContainer>
        <Table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Slot ID</th>
              <th>Ubicación</th>
              <th>Capacidad</th>
              <th>Usada</th>
              <th>Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {slots.map((slot) => (
              <tr key={slot.id}>
                <td>{slot.id}</td>
                <td>
                  {editingId === slot.id ? (
                    <InputSmall
                      name="slotId"
                      value={editSlot.slotId}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    slot.slotId
                  )}
                </td>
                <td>
                  {editingId === slot.id ? (
                    <InputSmall
                      name="location"
                      value={editSlot.location}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    slot.location
                  )}
                </td>
                <td>
                  {editingId === slot.id ? (
                    <InputSmall
                      type="number"
                      name="capacity"
                      value={editSlot.capacity === 0 ? "" : editSlot.capacity}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    slot.capacity
                  )}
                </td>
                <td>
                  {editingId === slot.id ? (
                    <InputSmall
                      type="number"
                      name="usedCapacity"
                      value={editSlot.usedCapacity === 0 ? "" : editSlot.usedCapacity}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    slot.usedCapacity
                  )}
                </td>
                <td>
                  {editingId === slot.id ? (
                    <InputSmall
                      name="status"
                      value={editSlot.status}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    slot.status
                  )}
                </td>
                <td>
                  {editingId === slot.id ? (
                    <>
                      <ActionButton onClick={() => handleSaveEdit(slot.id)} color="#4BBF73">
                        <FaSave />
                      </ActionButton>
                      <ActionButton onClick={handleCancelEdit} color="#FF5757">
                        <FaTimes />
                      </ActionButton>
                    </>
                  ) : (
                    <>
                      <ActionButton onClick={() => handleEditClick(slot)} color="#F9A826">
                        <FaEdit />
                      </ActionButton>
                      <ActionButton onClick={() => handleDelete(slot.id)} color="#FF5757">
                        <FaTrash />
                      </ActionButton>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </TableContainer>

      {/* Gráficos en tiempo real */}
      <ChartsContainer>
        {/* Pie Chart: Distribución por Estado */}
        <ChartWrapper>
          <ChartTitle>Distribución por Estado</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie dataKey="value" data={getStatusData(slots)} cx="50%" cy="50%" outerRadius={80} label>
                {getStatusData(slots).map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </ChartWrapper>
        {/* Bar Chart: Slots por Ubicación */}
        <ChartWrapper>
          <ChartTitle>Slots por Ubicación</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={getLocationData(slots)}>
              <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
              <XAxis dataKey="location" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="count" fill="#82ca9d" name="Cantidad" />
            </BarChart>
          </ResponsiveContainer>
        </ChartWrapper>
      </ChartsContainer>
    </Container>
  );
}

/* ===============================
   Estilos con styled-components
   =============================== */
const Container = styled.div`
  padding: 2rem;
  background-color: #f4f7fa;
  min-height: 100vh;
`;

const Header = styled.div`
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
`;

const Title = styled.h1`
  color: #333;
  font-size: 2rem;
  font-weight: bold;
`;

const Subtitle = styled.p`
  color: #555;
  font-size: 1.2rem;
  margin-bottom: 2rem;
`;

const FormContainer = styled.form`
  display: flex;
  gap: 0.5rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
`;

const Input = styled.input`
  padding: 0.5rem;
  border-radius: 0.5rem;
  border: 1px solid #ccc;
  flex: 1 1 200px;
`;

const InputSmall = styled(Input)`
  width: 100%;
  flex: unset;
  margin-bottom: 0.5rem;
`;

const SubmitButton = styled.button`
  background-color: #4BBF73;
  color: #fff;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  &:hover {
    background-color: #3ea15e;
  }
`;

const CardContainer = styled.div`
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const Card = styled.div`
  background-color: #fff;
  padding: 1rem 1.5rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  flex: 1 1 180px;
  text-align: center;
`;

const CardTitle = styled.p`
  margin: 0;
  font-size: 1rem;
  color: #777;
`;

const CardValue = styled.p`
  margin: 0.5rem 0 0;
  font-size: 1.5rem;
  font-weight: bold;
  color: #333;
`;

const TableContainer = styled.div`
  overflow-x: auto;
  margin-bottom: 2rem;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9rem;

  th,
  td {
    border: 1px solid #ddd;
    padding: 0.75rem;
    text-align: left;
  }

  th {
    background-color: #f0f0f0;
  }
`;

const ActionButton = styled.button<{ color: string }>`
  background-color: transparent;
  border: none;
  color: ${(props) => props.color};
  cursor: pointer;
  margin-right: 0.5rem;
  font-size: 1rem;
`;

const ChartsContainer = styled.div`
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const ChartWrapper = styled.div`
  background-color: #fff;
  flex: 1 1 400px;
  padding: 1rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
`;

const ChartTitle = styled.h2`
  font-size: 1.2rem;
  color: #333;
  margin-bottom: 1rem;
`;



===== Archivo: src/app/(protected)/chat/page.tsx =====
// app/(protected)/chat/page.tsx
"use client";

import React, { useState } from "react";
import CallModal from "@/components/Chat/CallModal";
import {
  Container,
  Header,
  HeaderIconCircle,
  ChatIcon,
  HeaderTitle,
  BarsContainer,
  Bar,
  MainContent,
  LeftPanel,
  UsersTitle,
  UsersList,
  UserItem,
  AvatarWrapper,
  UserAvatarImg,
  StatusDot,
  UserText,
  UserName,
  UserStatus,
  ChatPanel,
  ChatHeader,
  UserHeader,
  HeaderAvatarImg,
  HeaderInfo,
  HeaderName,
  HeaderTime,
  ProfileCard,
  ProfileImg,
  ProfileName,
  ProfileRole,
  ProfileLocalTime,
  ProfileActions,
  ProfileActionButton,
  MessagesArea,
  MessageRow,
  MsgAvatarImg,
  MsgBubble,
  MsgHeader,
  MsgUserName,
  MsgTime,
  MsgText,
  MessageInputArea,
  InputField,
  ReloadIcon,
  NoUserSelected,
} from "@/components/Chat/styles";

/* Tipos y datos mock */
interface User {
  id: number;
  name: string;
  isOnline: boolean;
  avatar: string;
}

const mockUsers: User[] = [
  {
    id: 1,
    name: "Julimz",
    isOnline: true,
  },
  {
    id: 2,
    name: "Offline",
    isOnline: false,
  },
  {
    id: 3,
    name: "UserX",
    isOnline: true,
  },
];

interface Message {
  id: number;
  userId: number;
  text: string;
  time: string;
}

const mockMessages: Message[] = [
  {
    id: 101,
    userId: 1,
    text: "Hola, ¿en qué puedo ayudarte?",
    time: "3:40 pm",
  },
];

type CallType = "audio" | "video" | null;

export default function ChatPage() {
  const [selectedUser, setSelectedUser] = useState<User | null>(mockUsers[0]);
  const [showProfileCard, setShowProfileCard] = useState(false);
  const [inputMessage, setInputMessage] = useState("");
  const [callType, setCallType] = useState<CallType>(null);

  const handleSelectUser = (user: User) => {
    setSelectedUser(user);
    setShowProfileCard(false);
  };

  const handleToggleProfileCard = () => {
    setShowProfileCard((prev) => !prev);
  };

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;
    alert(`Mensaje enviado: ${inputMessage}`);
    setInputMessage("");
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleVoiceCall = () => {
    setCallType("audio");
  };

  const handleVideoCall = () => {
    setCallType("video");
  };

  const handleCloseCall = () => {
    setCallType(null);
  };

  return (
    <Container>
      {/* Header estilo “segunda imagen” */}
      <Header>
        {/* Círculo degradado con ícono */}
        <HeaderIconCircle>
        </HeaderIconCircle>

        {/* Texto Chat */}
        <HeaderTitle>Chat</HeaderTitle>

        {/* Barras decorativas en la esquina superior derecha */}
        <BarsContainer>
          <Bar height={50} />
          <Bar height={30} />
          <Bar height={15} />
        </BarsContainer>
      </Header>

      <MainContent>
        {/* Panel Izquierdo: Lista de Usuarios */}
        <LeftPanel>
          <UsersTitle>Usuarios</UsersTitle>
          <UsersList>
            {mockUsers.map((user) => (
              <UserItem
                key={user.id}
                onClick={() => handleSelectUser(user)}
                $selected={selectedUser?.id === user.id}
              >
                <AvatarWrapper>
                  <UserAvatarImg src={user.avatar} alt={user.name} />
                  <StatusDot $online={user.isOnline} />
                </AvatarWrapper>
                <UserText>
                  <UserName>{user.name}</UserName>
                  <UserStatus $online={user.isOnline}>
                    {user.isOnline ? "Online" : "Offline"}
                  </UserStatus>
                </UserText>
              </UserItem>
            ))}
          </UsersList>
        </LeftPanel>

        {/* Panel Central (Chat) */}
        <ChatPanel>
          {selectedUser ? (
            <>
              <ChatHeader>
                <UserHeader onClick={handleToggleProfileCard}>
                  <HeaderAvatarImg src={selectedUser.avatar} alt={selectedUser.name} />
                  <HeaderInfo>
                    <HeaderName>{selectedUser.name}</HeaderName>
                    <HeaderTime>4:00 PM local time</HeaderTime>
                  </HeaderInfo>
                </UserHeader>

                {showProfileCard && (
                  <ProfileCard>
                    <ProfileImg src={selectedUser.avatar} alt={selectedUser.name} />
                    <ProfileName>{selectedUser.name}</ProfileName>
                    <ProfileRole>Operator</ProfileRole>
                    <ProfileLocalTime>4:00 PM local time</ProfileLocalTime>
                    <ProfileActions>
                      <ProfileActionButton onClick={() => alert("Mensaje directo")}>
                        Message
                      </ProfileActionButton>
                      <ProfileActionButton onClick={handleVoiceCall}>
                        📞
                      </ProfileActionButton>
                      <ProfileActionButton onClick={handleVideoCall}>
                        🎥
                      </ProfileActionButton>
                    </ProfileActions>
                  </ProfileCard>
                )}
              </ChatHeader>

              {/* Mensajes */}
              <MessagesArea>
                {mockMessages
                  .filter((m) => m.userId === selectedUser.id)
                  .map((msg) => (
                    <MessageRow key={msg.id}>
                      <MsgAvatarImg src={selectedUser.avatar} alt={selectedUser.name} />
                      <MsgBubble>
                        <MsgHeader>
                          <MsgUserName>{selectedUser.name}</MsgUserName>
                          <MsgTime>{msg.time}</MsgTime>
                        </MsgHeader>
                        <MsgText>{msg.text}</MsgText>
                      </MsgBubble>
                    </MessageRow>
                  ))}
              </MessagesArea>

              {/* Barra de input para escribir mensaje */}
              <MessageInputArea>
                <InputField
                  placeholder="Escribe un mensaje..."
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyDown={handleKeyDown}
                />
                <ReloadIcon>⟳</ReloadIcon>
              </MessageInputArea>
            </>
          ) : (
            <NoUserSelected>
              <p>Selecciona un usuario para chatear</p>
            </NoUserSelected>
          )}
        </ChatPanel>
      </MainContent>

      {/* Modal de llamada (audio / video) */}
      {callType && (
        <CallModal
          callType={callType}
          user={selectedUser}
          onClose={handleCloseCall}
        />
      )}
    </Container>
  );
}



===== Archivo: src/app/(protected)/picking/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";
import styled, { createGlobalStyle } from "styled-components";

// ===== Colores de ejemplo =====
const backgroundColor = "#EAF5FA";   // Fondo general
const cardBgColor = "#FFFFFF";       // Fondo de tarjetas y tabla
const menuBgColor = "#FFFFFF";       // Fondo del submenú
const hoverBgColor = "#f4f9fc";      // Hover en submenú y tabla
const borderColor = "#d3e0e9";       // Bordes suaves
const textColor = "#333";            // Color de texto principal
const accentColor = "#5ce1e6";       // Botones y acentos

// ===== Estilos globales =====
const GlobalStyle = createGlobalStyle`
  body {
    background-color: ${backgroundColor};
    color: ${textColor};
    margin: 0;
    padding: 0;
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  }
`;

// ===== Contenedor principal del módulo =====
const ModuleContainer = styled.div`
  display: flex;
  flex-direction: column;
  /* Reducimos el padding top para acercar el contenido al header */
  padding: 0rem 1rem 1rem 1rem;
  gap: 1rem;
`;

// ===== Submenú horizontal (más cerca del top) =====
const ModuleNavBar = styled.nav`
  display: flex;
  align-items: center;
  gap: 1rem;
  background-color: ${menuBgColor};
  padding: 0.5rem 1rem;
  border-radius: 8px;
  border: 1px solid ${borderColor};
  /* Minimiza margen top y bottom para acercarlo aún más */
  margin-top: 0;
  margin-bottom: 0.5rem;
`;

const ModuleNavItem = styled.div<{ $active?: boolean }>`
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  border-radius: 6px;
  font-weight: ${({ $active }) => ($active ? "bold" : "normal")};
  background-color: ${({ $active }) => ($active ? hoverBgColor : "transparent")};

  &:hover {
    background-color: ${hoverBgColor};
  }
`;

// ===== Contenedor de tarjetas (2x2) =====
const CardsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 1rem;
`;

const DataCard = styled.div`
  background-color: ${cardBgColor};
  border-radius: 12px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  text-align: center;
`;

const CardTitle = styled.h3`
  margin: 0;
  font-size: 1rem;
  color: ${textColor};
`;

const CardNumber = styled.div`
  margin: 0.5rem 0;
  font-size: 2rem;
  font-weight: bold;
  color: ${textColor};
`;

const CardInfo = styled.div`
  font-size: 0.9rem;
  color: #666;
`;

// ===== Botón de acción =====
const ActionButton = styled.button`
  background-color: ${accentColor};
  color: #fff;
  border: none;
  padding: 0.6rem 1rem;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s;
  margin: 0 0.25rem;

  &:hover {
    background-color: #54c6d6;
  }
`;

// ===== Tabla de pickings =====
const TableContainer = styled.div`
  background-color: ${cardBgColor};
  border-radius: 12px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const TableTitle = styled.h3`
  margin-top: 0;
`;

const StyledTable = styled.table`
  width: 100%;
  border-collapse: collapse;
  margin-top: 0.5rem;

  th,
  td {
    border: 1px solid ${borderColor};
    padding: 0.75rem;
    text-align: left;
  }

  th {
    background-color: ${hoverBgColor};
  }

  tbody tr:hover {
    background-color: ${hoverBgColor};
  }
`;

// ===== Formulario para crear un nuevo picking =====
const CreateForm = styled.form`
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;

  input {
    padding: 0.5rem;
    border: 1px solid ${borderColor};
    border-radius: 6px;
  }
`;

// ===== Interfaz para un Picking (puedes ajustarla a tus campos reales) =====
interface Picking {
  id: number;
  orderNumber: string;
  quantity: number;
}

export default function PickingPage() {
  // ============= Lógica para las tarjetas (demo) ============
  const pendingOrders = 54;
  const pendingTime = "152 minutes per order";

  const onHold = 10;
  const onHoldTime = "58 minutes per order";

  const inProcess = 123;
  const inProcessTime = "120 minutes per order";

  const onPallet = 12;
  const onPalletTime = "23 minutes per order";

  // ============= Lógica para la tabla de pickings ============
  const [pickings, setPickings] = useState<Picking[]>([]);

  // Estados para crear un nuevo picking
  const [newOrderNumber, setNewOrderNumber] = useState("");
  const [newQuantity, setNewQuantity] = useState<number>(0);

  // Obtiene los pickings del backend
  const fetchPickings = async () => {
    try {
      const res = await fetch("http://localhost:3000/picking");
      const data = await res.json();
      if (Array.isArray(data)) {
        setPickings(data);
      } else {
        console.error("La respuesta no es un array:", data);
        setPickings([]);
      }
    } catch (error) {
      console.error("Error al obtener pickings:", error);
    }
  };

  // Carga inicial de datos
  useEffect(() => {
    fetchPickings();
  }, []);

  // Crear un nuevo picking
  const handleCreate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const res = await fetch("http://localhost:3000/picking", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          orderNumber: newOrderNumber,
          quantity: newQuantity,
        }),
      });
      if (!res.ok) {
        console.error("Error al crear picking:", await res.text());
      }
      setNewOrderNumber("");
      setNewQuantity(0);
      fetchPickings(); // refresca la tabla
    } catch (error) {
      console.error("Error al crear picking:", error);
    }
  };

  // Editar un picking (demo: aquí solo mostramos un log)
  const handleEdit = (id: number) => {
    console.log("Editar picking con id:", id);
    // Podrías abrir un modal para editar o navegar a otra ruta
  };

  // Eliminar un picking
  const handleDelete = async (id: number) => {
    try {
      const res = await fetch(`http://localhost:3000/picking/${id}`, {
        method: "DELETE",
      });
      if (!res.ok) {
        console.error("Error al eliminar picking:", await res.text());
      }
      fetchPickings(); // refresca la tabla
    } catch (error) {
      console.error("Error al eliminar picking:", error);
    }
  };

  return (
    <>
      <GlobalStyle />

      <ModuleContainer>
        {/* Submenú horizontal al tope */}
        <ModuleNavBar>
          <ModuleNavItem $active>My Operators</ModuleNavItem>
          <ModuleNavItem>Incidents</ModuleNavItem>
          <ModuleNavItem>Returns</ModuleNavItem>
          <ModuleNavItem>Reports & Updates</ModuleNavItem>
          <ModuleNavItem>Handheld Devices</ModuleNavItem>
        </ModuleNavBar>

        {/* Grid de tarjetas (2x2) con métricas */}
        <CardsGrid>
          <DataCard>
            <CardTitle>To Be Picked / Pending Fulfillment</CardTitle>
            <CardNumber>{pendingOrders}</CardNumber>
            <CardInfo>Average Order Processing Time</CardInfo>
            <CardInfo>{pendingTime}</CardInfo>
          </DataCard>

          <DataCard>
            <CardTitle>On Hold</CardTitle>
            <CardNumber>{onHold}</CardNumber>
            <CardInfo>Average Order Processing Time</CardInfo>
            <CardInfo>{onHoldTime}</CardInfo>
          </DataCard>

          <DataCard>
            <CardTitle>In Process / Processing</CardTitle>
            <CardNumber>{inProcess}</CardNumber>
            <CardInfo>Average Order Processing Time</CardInfo>
            <CardInfo>{inProcessTime}</CardInfo>
          </DataCard>

          <DataCard>
            <CardTitle>On Pallet / Palletized</CardTitle>
            <CardNumber>{onPallet}</CardNumber>
            <CardInfo>Average Order Processing Time</CardInfo>
            <CardInfo>{onPalletTime}</CardInfo>
          </DataCard>
        </CardsGrid>

        {/* Botón de acción */}
        <ActionButton style={{ alignSelf: "flex-start" }}>
          View warehouses
        </ActionButton>

        {/* Tabla con los pickings */}
        <TableContainer>
          <TableTitle>Pickings List</TableTitle>

          {/* Formulario para crear un nuevo picking */}
          <CreateForm onSubmit={handleCreate}>
            <input
              type="text"
              placeholder="Order Number"
              value={newOrderNumber}
              onChange={(e) => setNewOrderNumber(e.target.value)}
              required
            />
            <input
              type="number"
              placeholder="Quantity"
              value={newQuantity}
              onChange={(e) => setNewQuantity(Number(e.target.value))}
              required
            />
            <ActionButton type="submit">Add</ActionButton>
          </CreateForm>

          <StyledTable>
            <thead>
              <tr>
                <th>ID</th>
                <th>Order Number</th>
                <th>Quantity</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {pickings.map((p) => (
                <tr key={p.id}>
                  <td>{p.id}</td>
                  <td>{p.orderNumber}</td>
                  <td>{p.quantity}</td>
                  <td>
                    <ActionButton onClick={() => handleEdit(p.id)}>Edit</ActionButton>
                    <ActionButton onClick={() => handleDelete(p.id)}>Delete</ActionButton>
                  </td>
                </tr>
              ))}
            </tbody>
          </StyledTable>
        </TableContainer>
      </ModuleContainer>
    </>
  );
}



===== Archivo: src/app/(protected)/dashboard/AsyncContent.tsx =====
'use client';

export default function AsyncContent() {
  return <div>Contenido asíncrono cargado.</div>;
}



===== Archivo: src/app/(protected)/dashboard/page.tsx =====
"use client";

import React from "react";
import styled from "styled-components";
import { useAuth } from "@/context/AuthContext";
import { useRouter } from "next/navigation";

const Container = styled.div`
  margin-top: 60px; /* Ajusta a la altura real de tu header */
  padding: 2rem;
  min-height: calc(100vh - 60px);

  background-size: 400px auto;

  position: relative;
  font-family: "Nunito Sans", sans-serif;
`;

/** Título de bienvenida */
const WelcomeText = styled.h2`
  font-size: 24px;
  margin-bottom: 1.5rem;
  color: ${({ theme }) => theme.palette.text.primary};
  font-family: "Nunito Sans", sans-serif;
`;

/** Grid para las tarjetas */
const CardsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 160px);
  gap: 1rem;
  margin-top: 2rem;

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    grid-template-rows: auto;
  }
`;

/** Tarjeta principal */
const Card = styled.div`
  position: relative;
  background: ${({ theme }) => theme.palette.background.paper};
  border-radius: 16px;
  box-shadow: 0 12px 12px rgba(0, 0, 0, 0.4);
  cursor: pointer;
  overflow: hidden;
  transition: transform 0.2s;
  font-family: "Nunito Sans", sans-serif;

  &:hover {
    transform: translateY(-3px);
  }
`;


/** Círculo degradado a la izquierda */
const GradientCircle = styled.div`
  position: absolute;
  left: 16px;
  top: 50%;
  transform: translateY(-50%);
  width: 72px;
  height: 72px;
  border-radius: 50%;
  background: linear-gradient(
    135deg,
    ${({ theme }) => theme.palette.secondary.main} 0%,
    ${({ theme }) => theme.palette.primary.main} 100%
  );
  display: flex;
  align-items: center;
  justify-content: center;
`;

/** Icono en blanco (usando filtro si el icono es negro originalmente) */
const CircleIcon = styled.img`
  width: 36px;
  height: 36px;
  /* Convierte iconos oscuros en blancos.
     Si tus íconos ya son blancos, elimina esta línea. */
  filter: brightness(0) invert(1);
`;

/** Contenedor para centrar el texto vertical y horizontalmente */
const CardContent = styled.div`
  /* Ocupa todo el espacio interno de la tarjeta */
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;

  /* Padding lateral para no solaparnos con el círculo ni las barras */
  padding: 0 64px;
`;

/** Contenedor de texto */
const TextContainer = styled.div`
  text-align: center;
`;

/** Título (ej. “Picking”) con fuente más grande */
const CardTitle = styled.h3`
  margin: 0;
  font-size: 24px; /* Más grande */
  font-weight: 700;
  color: ${({ theme }) => theme.palette.text.primary};
  font-family: "Nunito Sans", sans-serif;
`;

/** Número (ej. “27”) */
const CardNumber = styled.div`
  margin-top: 6px;
  font-size: 18px;
  font-weight: 600;
  color: ${({ theme }) => theme.palette.text.secondary};
  font-family: "Nunito Sans", sans-serif;
`;

/** Barras verticales en la esquina superior derecha */
const BarsContainer = styled.div`
  position: absolute;
  top: 12px; /* Empieza desde arriba */
  right: 16px;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 6px;
`;

/** Dos barras: la más grande arriba, la más pequeña debajo */
const Bar = styled.div<{ height: number }>`
  width: 10px;
  height: ${(p) => p.height}px;
  border-radius: 4px;
  background: linear-gradient(
    135deg,
    ${({ theme }) => theme.palette.secondary.main} 0%,
    ${({ theme }) => theme.palette.primary.main} 100%
  );
`;

/** Mapeo de íconos (ajusta nombres si difieren) */
const logosMapping: Record<string, string> = {
};

export default function DashboardPage() {
  const { user } = useAuth();
  const router = useRouter();

  // Datos de ejemplo para las 9 tarjetas
  const cards = [
    { title: "Users", number: 10, route: "/users" },
    { title: "Picking", number: 27, route: "/picking" },
    { title: "Slotting", number: 35, route: "/slotting" },
    { title: "Dashboards", number: 10, route: "/dashboards" },
    { title: "Packing", number: 10, route: "/packing" },
    { title: "Location", number: 10, route: "/locations" },
    { title: "Arrivals", number: 10, route: "/arrivals" },
    { title: "Putaway", number: 10, route: "/putaway" },
    { title: "Items", number: 10, route: "/items" },
  ];

  const handleCardClick = (route: string) => {
    router.push(route);
  };

  return (
    <Container>
      <WelcomeText>Hola {user?.username || "Usuario"}...</WelcomeText>

      <CardsGrid>
        {cards.map((c) => (
          <Card key={c.title} onClick={() => handleCardClick(c.route)}>
            {/* Círculo degradado con el icono en blanco */}
            <GradientCircle>
              <CircleIcon src={`/logos/${logosMapping[c.title]}`} alt={c.title} />
            </GradientCircle>

            {/* Contenido centrado */}
            <CardContent>
              <TextContainer>
                <CardTitle>{c.title}</CardTitle>
                <CardNumber>{c.number}</CardNumber>
              </TextContainer>
            </CardContent>

            {/* Dos barras verticales (grande y pequeña) en la esquina superior derecha */}
            <BarsContainer>
              <Bar height={50} />
              <Bar height={25} />
            </BarsContainer>
          </Card>
        ))}
      </CardsGrid>
    </Container>
  );
}



===== Archivo: src/app/(protected)/dashboards/page.tsx =====
"use client";

import React, { useState } from "react";
import styled from "styled-components";
import * as XLSX from "xlsx";
import dynamic from "next/dynamic";
import {
  ResponsiveContainer,
  AreaChart,
  Area,
  BarChart,
  Bar,
  CartesianGrid,
  Legend,
  Line,
  LineChart,
  Pie,
  PieChart,
  Cell,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";

/* ==============================================
   1) IMPORTS MAPA (react-simple-maps) v2
   Nota: ZoomableGroup ya no existe en la versión 2, se usará center y zoom en ComposableMap.
   ============================================== */
const ComposableMap = dynamic(() =>
  import("react-simple-maps").then((mod) => mod.ComposableMap),
  { ssr: false }
) as any;

const Geographies = dynamic(() =>
  import("react-simple-maps").then((mod) => mod.Geographies),
  { ssr: false }
) as any;

const Geography = dynamic(() =>
  import("react-simple-maps").then((mod) => mod.Geography),
  { ssr: false }
) as any;

const Marker = dynamic(() =>
  import("react-simple-maps").then((mod) => mod.Marker),
  { ssr: false }
) as any;

/* ==============================================
   2) DATOS DE PRUEBA
   ============================================== */
const kpiData = [
  { label: "Ítems Totales", value: 1145 },
  { label: "Stock Total (unid.)", value: 23543 },
  { label: "Órdenes Mensuales", value: 2134 },
  { label: "Pendientes de Envío", value: 78 },
];

const inboundOutboundData = [
  { mes: "Ene", inbound: 1200, outbound: 800 },
  { mes: "Feb", inbound: 1100, outbound: 950 },
  { mes: "Mar", inbound: 1500, outbound: 1300 },
  { mes: "Abr", inbound: 1800, outbound: 1200 },
  { mes: "May", inbound: 1600, outbound: 1400 },
  { mes: "Jun", inbound: 2000, outbound: 1700 },
  { mes: "Jul", inbound: 2100, outbound: 1850 },
  { mes: "Ago", inbound: 1950, outbound: 1600 },
  { mes: "Sep", inbound: 2200, outbound: 1900 },
  { mes: "Oct", inbound: 2400, outbound: 2000 },
  { mes: "Nov", inbound: 2500, outbound: 2300 },
  { mes: "Dic", inbound: 2700, outbound: 2500 },
];

const topSKUsData = [
  { sku: "SKU-001", ventas: 320 },
  { sku: "SKU-002", ventas: 280 },
  { sku: "SKU-003", ventas: 150 },
  { sku: "SKU-004", ventas: 100 },
  { sku: "SKU-005", ventas: 90 },
  { sku: "SKU-006", ventas: 75 },
  { sku: "SKU-007", ventas: 60 },
  { sku: "SKU-008", ventas: 50 },
];

const categoryData = [
  { name: "Electrónicos", value: 400 },
  { name: "Ropa", value: 300 },
  { name: "Hogar", value: 200 },
  { name: "Deportes", value: 150 },
  { name: "Jardinería", value: 100 },
  { name: "Oficina", value: 80 },
];

const pickingTimesData = [
  { dia: "Lun", tiempo: 35 },
  { dia: "Mar", tiempo: 40 },
  { dia: "Mié", tiempo: 32 },
  { dia: "Jue", tiempo: 45 },
  { dia: "Vie", tiempo: 38 },
  { dia: "Sáb", tiempo: 25 },
  { dia: "Dom", tiempo: 30 },
];

const orderCompletionData = [
  { mes: "Ene", completadas: 800, fallidas: 50 },
  { mes: "Feb", completadas: 950, fallidas: 40 },
  { mes: "Mar", completadas: 1200, fallidas: 60 },
  { mes: "Abr", completadas: 1300, fallidas: 55 },
  { mes: "May", completadas: 1500, fallidas: 70 },
  { mes: "Jun", completadas: 1700, fallidas: 80 },
  { mes: "Jul", completadas: 1800, fallidas: 75 },
  { mes: "Ago", completadas: 1650, fallidas: 90 },
  { mes: "Sep", completadas: 2000, fallidas: 100 },
  { mes: "Oct", completadas: 2200, fallidas: 120 },
  { mes: "Nov", completadas: 2300, fallidas: 110 },
  { mes: "Dic", completadas: 2450, fallidas: 130 },
];

const warehouseCapacityData = [
  { name: "Almacén Central", used: 8000, free: 2000, total: 10000 },
  { name: "Almacén Norte", used: 7000, free: 3000, total: 10000 },
  { name: "Almacén Sur", used: 6500, free: 1500, total: 8000 },
  { name: "Almacén Este", used: 3000, free: 2000, total: 5000 },
  { name: "Almacén Oeste", used: 4000, free: 4000, total: 8000 },
  { name: "Almacén Aux", used: 1200, free: 1800, total: 3000 },
];

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#A461D8", "#FF6AB2"];

/* MAPA: Escala alta para ver más cerca */
interface WarehouseMarker {
  name: string;
  coordinates: [number, number];
  totalStock: number;
  status: "OK" | "LOW";
}

const geoUrl = "https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json";

const warehouseMapData: WarehouseMarker[] = [
  { name: "CDMX-WH1", coordinates: [-99.1332, 19.4326], totalStock: 80, status: "OK" },
  { name: "Monterrey-WH2", coordinates: [-100.3161, 25.6866], totalStock: 50, status: "LOW" },
  { name: "Tokio-WH9", coordinates: [139.6503, 35.6762], totalStock: 16, status: "OK" },
  { name: "Houston-WH3", coordinates: [-95.3698, 29.7604], totalStock: 25, status: "OK" },
  { name: "Los Angeles-WH5", coordinates: [-118.2437, 34.0522], totalStock: 7, status: "LOW" },
  { name: "Berlín-WH10", coordinates: [13.4050, 52.5200], totalStock: 12, status: "OK" },
  { name: "Shanghái-WH12", coordinates: [121.4737, 31.2304], totalStock: 30, status: "OK" },
];

/* ==============================================
   3) COMPONENTE PRINCIPAL
   ============================================== */
export default function DashboardsPage() {
  // Estado para zoom y centro
  const [mapCenter, setMapCenter] = useState<[number, number]>([0, 20]);
  const [mapZoom, setMapZoom] = useState(1);

  // Al hacer clic en la lista lateral
  const handleListClick = (wh: WarehouseMarker) => {
    setMapCenter(wh.coordinates);
    setMapZoom(4);
  };

  // Al hacer clic en un marcador
  const handleMarkerClick = (wh: WarehouseMarker) => {
    setMapCenter(wh.coordinates);
    setMapZoom(4);
  };

  // Exportar data a Excel
  const exportChartDataToExcel = (dataArray: any[], sheetName: string) => {
    const workbook = XLSX.utils.book_new();
    const sheet = XLSX.utils.json_to_sheet(dataArray);
    XLSX.utils.book_append_sheet(workbook, sheet, sheetName);
    XLSX.writeFile(workbook, `${sheetName}.xlsx`);
  };

  return (
    <DashboardContainer>
      {/* Encabezado */}
      <Header>
        <TitleSection>
          <TitleText>Dashboard</TitleText>
        </TitleSection>
      </Header>

      {/* KPIs */}
      <KPISection>
        {kpiData.map((kpi, i) => (
          <KPICard key={i}>
            <KPIValue>{kpi.value}</KPIValue>
            <KPILabel>{kpi.label}</KPILabel>
          </KPICard>
        ))}
      </KPISection>

      {/* GRID PRINCIPAL */}
      <DashboardGrid>
        {/* AREA CHART */}
        <AreaChartWrapper>
          <ChartHeader>
            <ChartTitle>Rendimiento Órdenes</ChartTitle>
            <DownloadButton
              onClick={() => exportChartDataToExcel(orderCompletionData, "RendimientoOrdenes")}
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <ChartContainer>
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={orderCompletionData} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>
                <defs>
                  <linearGradient id="colorCompletadas" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
                    <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
                  </linearGradient>
                  <linearGradient id="colorFallidas" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#ffc658" stopOpacity={0.8} />
                    <stop offset="95%" stopColor="#ffc658" stopOpacity={0} />
                  </linearGradient>
                </defs>
                <XAxis dataKey="mes" />
                <YAxis />
                <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
                <Tooltip />
                <Area
                  type="monotone"
                  dataKey="completadas"
                  stroke="#82ca9d"
                  fill="url(#colorCompletadas)"
                  animationDuration={1500}
                />
                <Area
                  type="monotone"
                  dataKey="fallidas"
                  stroke="#ffc658"
                  fill="url(#colorFallidas)"
                  animationDuration={1500}
                />
              </AreaChart>
            </ResponsiveContainer>
          </ChartContainer>
        </AreaChartWrapper>

        {/* LINE CHART - Inbound vs Outbound */}
        <LineChartWrapper>
          <ChartHeader>
            <ChartTitle>Flujo Mensual</ChartTitle>
            <DownloadButton
              onClick={() => exportChartDataToExcel(inboundOutboundData, "FlujoMensual")}
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <ChartContainer>
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={inboundOutboundData} margin={{ top: 10, right: 10, bottom: 0, left: 0 }}>
                <CartesianGrid strokeDasharray="5 5" stroke="#ccc" />
                <XAxis dataKey="mes" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="inbound"
                  stroke="#8884d8"
                  strokeWidth={2}
                  name="Entradas"
                  animationDuration={1500}
                />
                <Line
                  type="monotone"
                  dataKey="outbound"
                  stroke="#82ca9d"
                  strokeWidth={2}
                  name="Salidas"
                  animationDuration={1500}
                />
              </LineChart>
            </ResponsiveContainer>
          </ChartContainer>
        </LineChartWrapper>

        {/* BARRAS - TOP SKUs */}
        <BarChartWrapper>
          <ChartHeader>
            <ChartTitle>Top SKUs</ChartTitle>
            <DownloadButton
              onClick={() => exportChartDataToExcel(topSKUsData, "TopSKUs")}
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <ChartContainer>
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={topSKUsData} margin={{ top: 0, right: 0, bottom: 0, left: 0 }}>
                <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
                <XAxis dataKey="sku" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="ventas" fill="#82ca9d" animationDuration={1500} name="Ventas" />
              </BarChart>
            </ResponsiveContainer>
          </ChartContainer>
        </BarChartWrapper>

        {/* PIE CHART - Categorías */}
        <PieChartWrapper>
          <ChartHeader>
            <ChartTitle>Categorías</ChartTitle>
            <DownloadButton
              onClick={() => exportChartDataToExcel(categoryData, "Categorias")}
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <ChartContainer>
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={categoryData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={60}
                  label
                  animationDuration={1500}
                >
                  {categoryData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </ChartContainer>
        </PieChartWrapper>

        {/* STACKED BAR - Capacidad */}
        <CapacityBarWrapper>
          <ChartHeader>
            <ChartTitle>Capacidad Almacenes</ChartTitle>
            <DownloadButton
              onClick={() =>
                exportChartDataToExcel(warehouseCapacityData, "CapacidadAlmacenes")
              }
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <ChartContainer>
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={warehouseCapacityData} margin={{ top: 10, right: 10, bottom: 0, left: 0 }}>
                <CartesianGrid strokeDasharray="5 5" stroke="#ccc" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar
                  dataKey="used"
                  stackId="cap"
                  fill="#f66c7b"
                  animationDuration={1500}
                  name="Usado"
                />
                <Bar
                  dataKey="free"
                  stackId="cap"
                  fill="#82ca9d"
                  animationDuration={1500}
                  name="Libre"
                />
              </BarChart>
            </ResponsiveContainer>
          </ChartContainer>
        </CapacityBarWrapper>

        {/* LINE CHART - Tiempo de Picking */}
        <PickingLineWrapper>
          <ChartHeader>
            <ChartTitle>Tiempo Picking</ChartTitle>
            <DownloadButton
              onClick={() => exportChartDataToExcel(pickingTimesData, "TiempoPicking")}
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <ChartContainer>
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={pickingTimesData} margin={{ top: 10, right: 10, bottom: 0, left: 0 }}>
                <CartesianGrid strokeDasharray="5 5" stroke="#ccc" />
                <XAxis dataKey="dia" />
                <YAxis />
                <Tooltip />
                <Line
                  type="monotone"
                  dataKey="tiempo"
                  stroke="#8884d8"
                  strokeWidth={2}
                  animationDuration={1500}
                />
              </LineChart>
            </ResponsiveContainer>
          </ChartContainer>
        </PickingLineWrapper>

        {/* MAPA + DETALLE (sin ZoomableGroup, usando center y zoom en ComposableMap) */}
        <MapWrapper>
          <ChartHeader>
            <ChartTitle>Mapa de Sucursales</ChartTitle>
            <DownloadButton
              onClick={() => exportChartDataToExcel(warehouseMapData, "MapaSucursales")}
            >
              ↓
            </DownloadButton>
          </ChartHeader>
          <BigMapContainer>
            <ResponsiveContainer width="100%" height="100%">
              <ComposableMap center={mapCenter} zoom={mapZoom}>
                <Geographies geography={geoUrl}>
                  {({ geographies }: { geographies: any[] }) =>
                    geographies.map((geo) => (
                      <Geography
                        key={geo.rsmKey}
                        geography={geo}
                        fill="#e0e0e0"
                        stroke="#999"
                        strokeWidth={0.5}
                      />
                    ))
                  }
                </Geographies>
                {warehouseMapData.map((wh) => (
                  <Marker
                    key={wh.name}
                    coordinates={wh.coordinates}
                    onClick={() => {
                      setMapCenter(wh.coordinates);
                      setMapZoom(4);
                    }}
                  >
                    <circle
                      r={5}
                      fill={wh.status === "OK" ? "#00C49F" : "#FFBB28"}
                      stroke="#FFF"
                      strokeWidth={1.5}
                      style={{ cursor: "pointer" }}
                    />
                    <text
                      x={8}
                      y={2}
                      textAnchor="start"
                      style={{
                        fontFamily: "sans-serif",
                        fontSize: "10px",
                        fill: "#333",
                        pointerEvents: "none",
                      }}
                    >
                      {wh.name} ({wh.totalStock})
                    </text>
                  </Marker>
                ))}
              </ComposableMap>
            </ResponsiveContainer>
          </BigMapContainer>
        </MapWrapper>

        <MapDetailWrapper>
          <ChartHeader>
            <ChartTitle>Detalle del Mapa</ChartTitle>
          </ChartHeader>
          <MapDetailBox>
            {warehouseMapData.map((wh) => (
              <DetailItem
                key={wh.name}
                onClick={() => {
                  setMapCenter(wh.coordinates);
                  setMapZoom(4);
                }}
              >
                <span>{wh.name} ({wh.totalStock})</span>
                <Dot status={wh.status} />
              </DetailItem>
            ))}
          </MapDetailBox>
        </MapDetailWrapper>
      </DashboardGrid>
    </DashboardContainer>
  );
}

/* ==============================================
   4) ESTILOS
   ============================================== */

const DashboardContainer = styled.div`
  width: 100%;
  min-height: 100vh;
  background: #fdfdfd;
  padding: 1rem 2rem;
`;

const Header = styled.header`
  display: flex;
  align-items: center;
  margin-bottom: 1rem;
  gap: 0.75rem;
`;

const TitleSection = styled.div`
  display: flex;
  align-items: center;
  gap: 0.75rem;
`;

const TitleImage = styled.img`
  width: 48px;
  height: 48px;
`;

const TitleText = styled.h1`
  font-size: 2rem;
  color: #333;
  text-transform: uppercase;
  letter-spacing: 1px;
  margin: 0;
`;

const KPISection = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
`;

const KPICard = styled.div`
  background: #fff;
  border-radius: 0.75rem;
  padding: 1rem;
  text-align: center;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s, box-shadow 0.3s;
  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
  }
`;

const KPIValue = styled.div`
  font-size: 1.6rem;
  font-weight: bold;
  color: #333;
`;

const KPILabel = styled.div`
  font-size: 0.9rem;
  color: #666;
  margin-top: 0.3rem;
`;

const DashboardGrid = styled.div`
  display: grid;
  gap: 1rem;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: auto auto auto;
  grid-template-areas:
    "area area line bar"
    "pie capacity picking bar"
    "map map map mapDetail";
`;

const AreaChartWrapper = styled.div`
  grid-area: area;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const LineChartWrapper = styled.div`
  grid-area: line;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const BarChartWrapper = styled.div`
  grid-area: bar;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const PieChartWrapper = styled.div`
  grid-area: pie;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const CapacityBarWrapper = styled.div`
  grid-area: capacity;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const PickingLineWrapper = styled.div`
  grid-area: picking;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
`;

const MapWrapper = styled.div`
  grid-area: map;
  background: linear-gradient(135deg, #f9f9f9, #f3f3f3);
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
`;

const MapDetailWrapper = styled.div`
  grid-area: mapDetail;
  background: #fff;
  border-radius: 0.75rem;
  padding: 0.5rem;
  box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
`;

const ChartHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 0.5rem;
`;

const ChartTitle = styled.h3`
  font-size: 0.95rem;
  font-weight: bold;
  color: #444;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin: 0;
`;

const DownloadButton = styled.button`
  background: #007bff;
  color: #fff;
  border: none;
  padding: 0.4rem 0.7rem;
  border-radius: 0.3rem;
  cursor: pointer;
  font-size: 0.8rem;
  &:hover {
    background: #0056b3;
  }
`;

const ChartContainer = styled.div`
  width: 100%;
  height: 220px;
  margin-top: 0.5rem;
`;

const BigMapContainer = styled.div`
  width: 100%;
  height: 450px;
  border-radius: 0.5rem;
  overflow: hidden;
  background: #fafafa;
  margin-top: 0.5rem;
`;

const MapDetailBox = styled.div`
  padding: 0.5rem;
  font-size: 0.9rem;
  color: #555;
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
`;

const DetailItem = styled.div`
  display: flex;
  justify-content: space-between;
  cursor: pointer;
  &:hover {
    text-decoration: underline;
  }
  span {
    color: #333;
    font-size: 0.9rem;
  }
`;

const Dot = styled.div<{ status: "OK" | "LOW" }>`
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: ${({ status }) => (status === "OK" ? "#00C49F" : "#FFBB28")};
`;



===== Archivo: src/app/(protected)/locations/Warehouse2D.tsx =====
"use client";

import React from "react";
import styled, { keyframes } from "styled-components";
import { locations } from "../locations/LocationModel";

// Animación para la ruta (efecto de trazo en movimiento)
const dashAnimation = keyframes`
  to {
    stroke-dashoffset: 0;
  }
`;

// Componente para la ruta animada
const AnimatedPolyline = styled.polyline`
  stroke-dasharray: 10;
  stroke-dashoffset: 20;
  animation: ${dashAnimation} 2s linear infinite;
`;

  width: 100%;
  height: 100%;
  background: #eef2f3;
`;

// Animación de aparición para los labels
const fadeIn = keyframes`
  from { opacity: 0; }
  to { opacity: 1; }
`;

// Etiqueta principal de zona
const ZoneLabel = styled.text`
  font-family: 'Segoe UI', sans-serif;
  font-size: 20px;
  fill: #fff;
  font-weight: bold;
  pointer-events: none;
  opacity: 0;
  animation: ${fadeIn} 1s forwards;
`;

// Sub-etiqueta para subnombres o detalles
const SubLabel = styled.text`
  font-family: 'Segoe UI', sans-serif;
  font-size: 14px;
  fill: #fff;
  pointer-events: none;
  opacity: 0;
  animation: ${fadeIn} 1.5s forwards;
`;

interface Warehouse2DProps {
  /**
   * Array de IDs de nodos que conforman la ruta BFS.
   * Por ejemplo: ["A1", "H2L", "H2R", "B3", ...]
   */
  routeNodes?: string[] | null;
  onSlotClick: (zone: any) => void;
  selectedSlot: any;
}

/**
 * Convierte un nodeId (por ejemplo, "A1") en coordenadas (x,y)
 * utilizando:
 *   1) Si es un slot, se toma la posición de `locations`.
 *   2) Si es una zona genérica (p.ej. "almacenamiento"), se usa un fallback.
 */
function getCoordinatesForNode(nodeId: string): { x: number; y: number } {
  const loc = locations.find((l) => l.slotId === nodeId);
  if (loc) {
    return { x: loc.x, y: loc.y };
  }
  const fallback: Record<string, { x: number; y: number }> = {
    recepcion: { x: 195, y: 150 },
    almacenamiento: { x: 440, y: 270 },
    pasilloPicking: { x: 955, y: 270 },
    picking: { x: 1230, y: 270 },
    pasilloPacking: { x: 955, y: 640 },
    packing: { x: 1230, y: 640 },
    calidad: { x: 195, y: 640 },
    oficinas: { x: 270, y: 860 },
    despacho: { x: 1230, y: 910 },
  };
  return fallback[nodeId] || { x: 50, y: 50 };
}

const Warehouse2D: React.FC<Warehouse2DProps> = ({ routeNodes, onSlotClick, selectedSlot }) => {
  // Maneja el clic en una zona o elemento
  const handleZoneClick = (zone: any) => {
    onSlotClick(zone);
  };

  // Construye el string de puntos para el polyline a partir de los IDs de la ruta
  let routePoints = "";
  if (routeNodes && routeNodes.length > 0) {
    routePoints = routeNodes
      .map((nodeId) => {
        const { x, y } = getCoordinatesForNode(nodeId);
        return `${x},${y}`;
      })
      .join(" ");
  }

  // Renderiza los racks (ejemplo para la zona de Almacenamiento)
  const renderRacks = (
    startX: number,
    startY: number,
    columns: number,
    rows: number,
    rackWidth: number,
    rackHeight: number,
    gap: number,
    zoneName: string
  ) => {
    const racks = [];
    for (let col = 0; col < columns; col++) {
      for (let row = 0; row < rows; row++) {
        const x = startX + col * (rackWidth + gap);
        const y = startY + row * (rackHeight + gap);
        racks.push(
          <g
            key={`rack-${zoneName}-${col}-${row}`}
            onClick={() =>
              handleZoneClick({ id: `${zoneName}-rack-${col}-${row}`, label: `${zoneName} Rack ${col}-${row}` })
            }
            style={{ cursor: "pointer" }}
          >
            <rect
              x={x}
              y={y}
              width={rackWidth}
              height={rackHeight}
              fill="url(#gradRacks)"
              stroke="#333"
              strokeWidth="1"
              rx="2"
              ry="2"
            />
            <SubLabel x={x + rackWidth / 2} y={y + rackHeight / 2} textAnchor="middle" dominantBaseline="middle">
              {`${col}-${row}`}
            </SubLabel>
          </g>
        );
      }
    }
    return racks;
  };

  // Renderiza los bins para Picking
  const renderBins = (
    startX: number,
    startY: number,
    columns: number,
    rows: number,
    binWidth: number,
    binHeight: number,
    gap: number,
    zoneName: string
  ) => {
    const bins = [];
    for (let col = 0; col < columns; col++) {
      for (let row = 0; row < rows; row++) {
        const x = startX + col * (binWidth + gap);
        const y = startY + row * (binHeight + gap);
        bins.push(
          <g
            key={`bin-${zoneName}-${col}-${row}`}
            onClick={() =>
              handleZoneClick({ id: `${zoneName}-bin-${col}-${row}`, label: `${zoneName} Bin ${col}-${row}` })
            }
            style={{ cursor: "pointer" }}
          >
            <rect
              x={x}
              y={y}
              width={binWidth}
              height={binHeight}
              fill="url(#gradPicking)"
              stroke="#555"
              strokeWidth="1"
              rx="2"
              ry="2"
            />
            <SubLabel x={x + binWidth / 2} y={y + binHeight / 2} textAnchor="middle" dominantBaseline="middle">
              {`${col}-${row}`}
            </SubLabel>
          </g>
        );
      }
    }
    return bins;
  };

  // Renderiza las estaciones de Packing
  const renderPackingStations = (
    startX: number,
    startY: number,
    count: number,
    stationWidth: number,
    stationHeight: number,
    gap: number,
    zoneName: string
  ) => {
    const stations = [];
    for (let i = 0; i < count; i++) {
      const x = startX + i * (stationWidth + gap);
      stations.push(
        <g
          key={`packing-${zoneName}-${i}`}
          onClick={() =>
            handleZoneClick({ id: `${zoneName}-packing-${i}`, label: `${zoneName} Packing ${i + 1}` })
          }
          style={{ cursor: "pointer" }}
        >
          <rect
            x={x}
            y={startY}
            width={stationWidth}
            height={stationHeight}
            fill="url(#gradPacking)"
            stroke="#444"
            strokeWidth="1"
            rx="4"
            ry="4"
          />
          <SubLabel
            x={x + stationWidth / 2}
            y={startY + stationHeight / 2}
            textAnchor="middle"
            dominantBaseline="middle"
          >
            {`${i + 1}`}
          </SubLabel>
        </g>
      );
    }
    return stations;
  };

  return (
    <SvgContainer viewBox="0 0 1500 1000">
      <defs>
        <linearGradient id="gradRecepcion" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style={{ stopColor: "#ff7e5f", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#feb47b", stopOpacity: 1 }} />
        </linearGradient>
        <linearGradient id="gradRacks" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" style={{ stopColor: "#6a11cb", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#2575fc", stopOpacity: 1 }} />
        </linearGradient>
        <linearGradient id="gradPicking" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style={{ stopColor: "#ff9966", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#ff5e62", stopOpacity: 1 }} />
        </linearGradient>
        <linearGradient id="gradPacking" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style={{ stopColor: "#00b09b", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#96c93d", stopOpacity: 1 }} />
        </linearGradient>
        <linearGradient id="gradDespacho" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style={{ stopColor: "#ff5e62", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#ff9966", stopOpacity: 1 }} />
        </linearGradient>
        <linearGradient id="gradCalidad" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style={{ stopColor: "#00c6ff", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#0072ff", stopOpacity: 1 }} />
        </linearGradient>
        <linearGradient id="gradOficinas" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style={{ stopColor: "#f7971e", stopOpacity: 1 }} />
          <stop offset="100%" style={{ stopColor: "#ffd200", stopOpacity: 1 }} />
        </linearGradient>
      </defs>

      {/* Nombre del Almacén */}
      <text
        x="750"
        y="50"
        textAnchor="middle"
        fontFamily="Segoe UI, sans-serif"
        fontSize="32"
        fill="#333"
        fontWeight="bold"
      >
        Warehouse Demo - Ultimate Impact
      </text>

      {/* Zona de Recepción */}
      <g onClick={() => handleZoneClick({ id: "recepcion", label: "Recepción" })} style={{ cursor: "pointer" }}>
        <rect x="20" y="80" width="350" height="140" fill="url(#gradRecepcion)" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="195" y="150" textAnchor="middle" dominantBaseline="middle">
          Recepción
        </ZoneLabel>
        <SubLabel x="195" y="180" textAnchor="middle" dominantBaseline="middle">
          Check-In & Salida
        </SubLabel>
      </g>

      {/* Zona de Almacenamiento */}
      <g onClick={() => handleZoneClick({ id: "almacenamiento", label: "Almacenamiento" })} style={{ cursor: "pointer" }}>
        <rect x="20" y="240" width="840" height="350" fill="#fff" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="440" y="270" textAnchor="middle" dominantBaseline="middle" style={{ fill: "#333", fontSize: "24px" }}>
          Almacenamiento
        </ZoneLabel>
        <SubLabel x="440" y="300" textAnchor="middle" dominantBaseline="middle">
          Racks y Estanterías
        </SubLabel>
        {renderRacks(40, 320, 8, 4, 80, 40, 12, "Almacenamiento")}
      </g>

      {/* Pasillo de Picking */}
      <g onClick={() => handleZoneClick({ id: "pasilloPicking", label: "Pasillo de Picking" })} style={{ cursor: "pointer" }}>
        <rect x="880" y="240" width="150" height="350" fill="#c8d6e5" stroke="#777" strokeDasharray="5,5" strokeWidth="2" rx="10" ry="10" />
        <ZoneLabel x="955" y="270" textAnchor="middle" dominantBaseline="middle" style={{ fill: "#333", fontSize: "20px" }}>
          Pasillo
        </ZoneLabel>
        <SubLabel x="955" y="300" textAnchor="middle" dominantBaseline="middle">
          de Picking
        </SubLabel>
      </g>

      {/* Zona de Picking */}
      <g onClick={() => handleZoneClick({ id: "picking", label: "Picking" })} style={{ cursor: "pointer" }}>
        <rect x="1080" y="240" width="300" height="200" fill="url(#gradPicking)" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="1230" y="270" textAnchor="middle" dominantBaseline="middle">
          Picking
        </ZoneLabel>
        <SubLabel x="1230" y="300" textAnchor="middle" dominantBaseline="middle">
          Contenedores
        </SubLabel>
        {renderBins(1100, 280, 6, 2, 40, 40, 8, "Picking")}
      </g>

      {/* Pasillo de Packing */}
      <g onClick={() => handleZoneClick({ id: "pasilloPacking", label: "Pasillo de Packing" })} style={{ cursor: "pointer" }}>
        <rect x="880" y="610" width="150" height="250" fill="#c8d6e5" stroke="#777" strokeDasharray="5,5" strokeWidth="2" rx="10" ry="10" />
        <ZoneLabel x="955" y="640" textAnchor="middle" dominantBaseline="middle" style={{ fill: "#333", fontSize: "20px" }}>
          Pasillo
        </ZoneLabel>
        <SubLabel x="955" y="670" textAnchor="middle" dominantBaseline="middle">
          de Packing
        </SubLabel>
      </g>

      {/* Zona de Packing */}
      <g onClick={() => handleZoneClick({ id: "packing", label: "Packing" })} style={{ cursor: "pointer" }}>
        <rect x="1080" y="610" width="300" height="250" fill="url(#gradPacking)" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="1230" y="640" textAnchor="middle" dominantBaseline="middle">
          Packing
        </ZoneLabel>
        <SubLabel x="1230" y="670" textAnchor="middle" dominantBaseline="middle">
          Estaciones
        </SubLabel>
        {renderPackingStations(1100, 650, 5, 40, 40, 10, "Packing")}
      </g>

      {/* Zona de Calidad */}
      <g onClick={() => handleZoneClick({ id: "calidad", label: "Calidad" })} style={{ cursor: "pointer" }}>
        <rect x="20" y="610" width="350" height="180" fill="url(#gradCalidad)" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="195" y="640" textAnchor="middle" dominantBaseline="middle">
          Calidad
        </ZoneLabel>
        <SubLabel x="195" y="670" textAnchor="middle" dominantBaseline="middle">
          Control
        </SubLabel>
      </g>

      {/* Zona de Oficinas */}
      <g onClick={() => handleZoneClick({ id: "oficinas", label: "Oficinas" })} style={{ cursor: "pointer" }}>
        <rect x="20" y="810" width="500" height="150" fill="url(#gradOficinas)" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="270" y="860" textAnchor="middle" dominantBaseline="middle">
          Oficinas
        </ZoneLabel>
        <SubLabel x="270" y="890" textAnchor="middle" dominantBaseline="middle">
          Administración
        </SubLabel>
      </g>

      {/* Zona de Despacho */}
      <g onClick={() => handleZoneClick({ id: "despacho", label: "Despacho" })} style={{ cursor: "pointer" }}>
        <rect x="1080" y="880" width="300" height="80" fill="url(#gradDespacho)" stroke="#333" strokeWidth="2" rx="15" ry="15" />
        <ZoneLabel x="1230" y="910" textAnchor="middle" dominantBaseline="middle">
          Despacho
        </ZoneLabel>
        <SubLabel x="1230" y="935" textAnchor="middle" dominantBaseline="middle">
          Salida
        </SubLabel>
      </g>

      {/* Rutas animadas fijas (ejemplo) */}
      <AnimatedPolyline
        points="1100,320 1050,320 1050,400 1080,400 1080,480 1100,480"
        fill="none"
        stroke="#ff0000"
        strokeWidth="4"
      />
      <AnimatedPolyline
        points="1100,650 1050,650 1050,730 1080,730 1080,810 1100,810"
        fill="none"
        stroke="#0000ff"
        strokeWidth="4"
      />

      {/* Ruta generada por la Picklist, usando las coordenadas reales */}
      {routeNodes && routeNodes.length > 0 && (
        <AnimatedPolyline
          points={routePoints}
          fill="none"
          stroke="#00aa00"
          strokeWidth="3"
        />
      )}
    </SvgContainer>
  );
};

export default Warehouse2D;



===== Archivo: src/app/(protected)/locations/Warehouse3D.tsx =====
"use client";

import React, { useState } from "react";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Line } from "@react-three/drei";
import * as THREE from "three";
import styled from "styled-components";
import { LocationData, nodes3D, edges3D, locations } from "./LocationModel";

function Building3D() {
  return (
    <group>
      {/* Piso 80x60 */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} receiveShadow>
        <planeGeometry args={[80, 60]} />
        <meshStandardMaterial color="#cccccc" side={THREE.DoubleSide} />
      </mesh>

      {/* 4 paredes sencillas */}
      <mesh position={[0, 3, -30]} receiveShadow>
        <boxGeometry args={[80, 6, 1]} />
        <meshStandardMaterial color="#888" />
      </mesh>
      <mesh position={[0, 3, 30]} receiveShadow>
        <boxGeometry args={[80, 6, 1]} />
        <meshStandardMaterial color="#888" />
      </mesh>
      <mesh position={[-40, 3, 0]} receiveShadow>
        <boxGeometry args={[1, 6, 60]} />
        <meshStandardMaterial color="#888" />
      </mesh>
      <mesh position={[40, 3, 0]} receiveShadow>
        <boxGeometry args={[1, 6, 60]} />
        <meshStandardMaterial color="#888" />
      </mesh>
    </group>
  );
}

function Route3D({ routeNodes }: { routeNodes: string[] | null }) {
  if (!routeNodes || routeNodes.length < 2) return null;

  const points: [number, number, number][] = routeNodes.map((id) => {
    const n = nodes3D.find((nn) => nn.id === id)!;
    // y = 0.1 => altura de la línea
    return [n.x, 0.1, n.z];
  });

  return <Line points={points} color="#007BFF" lineWidth={3} dashed={false} />;
}

function Location3D(props: {
  loc: LocationData;
  onClick: (loc: LocationData) => void;
  isSelected: boolean;
}) {
  const { loc, onClick, isSelected } = props;
  const [hovered, setHovered] = useState(false);

  // Escala x,y => X,Z en 3D
  function scaleX(val: number) {
    return -40 + (val / 800) * 80;
  }
  function scaleZ(val: number) {
    return -30 + (val / 600) * 60;
  }

  const X = scaleX(loc.x);
  const Z = scaleZ(loc.y);

  let baseColor = "red";
  if (loc.classType === "A") baseColor = "green";
  if (loc.classType === "B") baseColor = "blue";

  const color = hovered ? "orange" : baseColor;

  return (
    <group
      position={[X, 2, Z]}
      onClick={() => onClick(loc)}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
    >
      <mesh castShadow receiveShadow>
        <boxGeometry args={[2, 2, 2]} />
        <meshStandardMaterial color={color} />
      </mesh>
      {isSelected && (
        <mesh>
          <boxGeometry args={[2.2, 2.2, 2.2]} />
          <meshBasicMaterial color="yellow" wireframe />
        </mesh>
      )}
    </group>
  );
}

function Warehouse3D(props: {
  routeNodes: string[] | null;
  onSlotClick: (loc: LocationData) => void;
  selectedSlot: LocationData | null;
}) {
  const { routeNodes, onSlotClick, selectedSlot } = props;

  return (
    <VisualizationCard>
      <Canvas
        shadows
        camera={{ position: [60, 50, 60], fov: 60 }}
        style={{ width: "100%", height: "100%" }}
      >
        <OrbitControls makeDefault />
        <ambientLight intensity={0.6} />
        <directionalLight position={[20, 40, 20]} intensity={0.8} castShadow />

        <Building3D />

        {/* Renderizamos cada rack como un cubo */}
        {locations.map((loc) => (
          <Location3D
            key={loc.slotId}
            loc={loc}
            onClick={onSlotClick}
            isSelected={selectedSlot?.slotId === loc.slotId}
          />
        ))}

        <Route3D routeNodes={routeNodes} />
      </Canvas>
    </VisualizationCard>
  );
}

export default Warehouse3D;

const VisualizationCard = styled.div`
  width: 100%;
  height: 100%;
  background: #fff;
  border-radius: 0.4rem;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  overflow: hidden;
  position: relative;
`;



===== Archivo: src/app/(protected)/locations/WarehouseSketchfab.tsx =====
"use client";

import React from "react";
import styled from "styled-components";

function WarehouseSketchfab({ onClose }: { onClose: () => void }) {
  // El iframe se mantiene 100% igual
  const iframeProps = {
    title: "Modelo Avanzado",
    frameBorder: "0",
    allowFullScreen: true,
    mozallowfullscreen: "true",
    webkitallowfullscreen: "true",
    allow: "autoplay; fullscreen; xr-spatial-tracking",
    "xr-spatial-tracking": "true" as const,
    "execution-while-out-of-viewport": "true" as const,
    "execution-while-not-rendered": "true" as const,
    "web-share": "true" as const,
    // Ajusta la URL a tu modelo:
    src: "https://sketchfab.com/models/3197c8e358994d5a8a86421d977c8a00/embed?ui_infos=0&ui_controls=0",
    style: { width: "100%", height: "100%" },
  };

  return (
    <Overlay>
      <CloseButton onClick={onClose}>Regresar</CloseButton>
      <iframe {...iframeProps} />
    </Overlay>
  );
}

export default WarehouseSketchfab;

const Overlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: #000;
  z-index: 1000;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 70px;
  left: 1rem;
  z-index: 1001;
  background-color: #e85b5b;
  color: #fff;
  border: none;
  border-radius: 1rem;
  padding: 0.6rem 1.2rem;
  font-size: 0.9rem;
  font-weight: 600;
  cursor: pointer;
`;



===== Archivo: src/app/(protected)/locations/PickingList.tsx =====
"use client";

import React from "react";
import styled from "styled-components";
import { LocationData } from "./LocationModel";

function PickingList({ items }: { items: LocationData[] }) {
  return (
    <PickingListContainer>
      <h3>Picking List</h3>
      {items.length === 0 ? (
        <p>No hay ítems en la lista.</p>
      ) : (
        <ul>
          {items.map((item) => (
            <li key={item.slotId}>
              <strong>{item.slotId}</strong> - {item.productSku} ({item.stock} unidades)
            </li>
          ))}
        </ul>
      )}
    </PickingListContainer>
  );
}

export default PickingList;

const PickingListContainer = styled.div`
  background: #f0f8ff;
  padding: 1rem;
  margin-top: 1rem;
  border-radius: 0.4rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
`;



===== Archivo: src/app/(protected)/locations/page.tsx =====
"use client";

import React, { useState } from "react";
import styled from "styled-components";
import Warehouse2D from "../locations/Warehouse2D";
import WarehouseSketchfab from "../locations/WarehouseSketchfab";
import PickingList from "../locations/PickingList";
import { locations, workers, nodes2D } from "../locations/LocationModel";
import { bfsRouteAvoidingWorkers, createAdjacency } from "../locations/BFSUtils";

/** Función para mapear un slot a su nodo más cercano en 2D */
function mapSlotToNode2D(slotId: string): string {
  const slot = locations.find((l) => l.slotId === slotId);
  if (!slot) return "TL";
  let best = "TL";
  let bestDist = Infinity;
  for (const n of nodes2D) {
    const dx = slot.x - n.x;
    const dy = slot.y - n.y;
    const dist = Math.hypot(dx, dy);
    if (dist < bestDist) {
      bestDist = dist;
      best = n.id;
    }
  }
  return best;
}

// Creamos la tabla de adyacencia para nodos2D
const adjacency2D = createAdjacency(
  nodes2D.map((n) => n.id),
  [
    ["TL", "TR"], ["TR", "BR"], ["BR", "BL"], ["BL", "TL"],
    ["H1L", "H1R"],
    ["H2L", "H2R"],
    ["H3L", "H3R"],
    ["H4L", "H4R"],
    ["H5L", "H5R"],
    ["TL", "H1L"], ["H1L", "H2L"], ["H2L", "H3L"],
    ["H3L", "H4L"], ["H4L", "H5L"], ["H5L", "BL"],
    ["TR", "H1R"], ["H1R", "H2R"], ["H2R", "H3R"],
    ["H3R", "H4R"], ["H4R", "H5R"], ["H5R", "BR"],
  ]
);

// Definimos algunos Picklists de prueba
const testPicklists: Record<string, string[]> = {
  "Picklist 1": ["A1", "A2", "A3", "B1", "B2", "B3", "C1", "C3"],
  "Picklist 2": ["A1", "B1", "C1"],
  "Picklist 3": ["A3", "B3", "C3"],
};

export default function LocationsPage() {
  // Solo tendremos vista 2D y Sketchfab (modelo avanzado)
  const [viewMode, setViewMode] = useState<"2D" | "Sketchfab">("2D");
  const [selectedLocation, setSelectedLocation] = useState<any>(null);
  const [selectedPicklistKey, setSelectedPicklistKey] = useState<string>("Picklist 1");
  const [routeNodes, setRouteNodes] = useState<string[] | null>(null);
  const [pickingItems, setPickingItems] = useState<any[]>([]);
  const [isCollected, setIsCollected] = useState<boolean>(false);

  const handleSlotClick = (loc: any) => {
    setSelectedLocation(loc);
  };

  // Calcula la ruta concatenada para recorrer todos los slots del Picklist
  const computePicklistRoute = () => {
    const picklist = testPicklists[selectedPicklistKey];
    if (!picklist || picklist.length === 0) {
      setRouteNodes(null);
      setPickingItems([]);
      return;
    }
    let fullRoute: string[] = [];
    // Inicia desde el primer slot del Picklist
    let currentNode = mapSlotToNode2D(picklist[0]);
    fullRoute.push(currentNode);
    for (let i = 1; i < picklist.length; i++) {
      const nextNode = mapSlotToNode2D(picklist[i]);
      const routeSegment = bfsRouteAvoidingWorkers(currentNode, nextNode, adjacency2D, nodes2D, workers);
      if (routeSegment) {
        // Evitar duplicar el nodo de conexión
        if (fullRoute[fullRoute.length - 1] === routeSegment[0]) {
          routeSegment.shift();
        }
        fullRoute = fullRoute.concat(routeSegment);
        currentNode = nextNode;
      }
    }
    setRouteNodes(fullRoute);
    setIsCollected(false);
    const items = locations.filter((loc) => picklist.includes(loc.slotId));
    setPickingItems(items);
  };

  const clearRoute = () => {
    setRouteNodes(null);
    setPickingItems([]);
    setIsCollected(false);
  };

  // Estimamos el tiempo (por ejemplo, 0.5 minutos por nodo recorrido)
  const estimatedTime = routeNodes ? Math.round(routeNodes.length * 0.5) : 0;

  return (
    <PageContainer>
      <HeaderRow>
        <PageTitle>Almacén Interactivo - Picklist Demo</PageTitle>
      </HeaderRow>

      <ControlRow>
        <div>
          <label>Selecciona Picklist:</label>
          <select
            value={selectedPicklistKey}
            onChange={(e) => setSelectedPicklistKey(e.target.value)}
            style={{ marginLeft: "0.5rem", marginRight: "1rem" }}
          >
            {Object.keys(testPicklists).map((key) => (
              <option key={key} value={key}>
                {key}
              </option>
            ))}
          </select>
        </div>
        <Button onClick={computePicklistRoute}>Generar Ruta Picklist</Button>
        <Button onClick={clearRoute}>Limpiar Ruta</Button>
      </ControlRow>

      <ButtonRow>
        <TabButton $active={viewMode === "2D"} onClick={() => setViewMode("2D")}>
          Vista 2D
        </TabButton>
        <TabButton $active={viewMode === "Sketchfab"} onClick={() => setViewMode("Sketchfab")}>
          Modelo Avanzado
        </TabButton>
      </ButtonRow>

      <MainLayout>
        <VisualizationArea>
          {viewMode === "2D" && (
            <Warehouse2D
              routeNodes={routeNodes}
              onSlotClick={handleSlotClick}
              selectedSlot={selectedLocation}
            />
          )}
          {viewMode === "Sketchfab" && (
            <WarehouseSketchfab onClose={() => setViewMode("2D")} />
          )}
        </VisualizationArea>

        <InfoPanel>
          <Section>
            <h3>Detalles de la Ubicación</h3>
            {selectedLocation ? (
              <>
                <p>
                  <strong>Slot:</strong> {selectedLocation.slotId}
                </p>
                <p>
                  <strong>SKU:</strong> {selectedLocation.productSku}
                </p>
                <p>
                  <strong>Stock:</strong> {selectedLocation.stock}
                </p>
                <p>
                  <strong>Clase:</strong> {selectedLocation.classType}
                </p>
              </>
            ) : (
              <p>Selecciona una ubicación para ver detalles</p>
            )}
          </Section>

          <Section>
            <h3>Detalles de Ruta Picklist</h3>
            {routeNodes && routeNodes.length > 0 ? (
              <>
                <p>
                  <strong>Ruta:</strong> {routeNodes.join(" -> ")}
                </p>
                <p>
                  <strong>Tiempo estimado:</strong> {estimatedTime} minutos
                </p>
                <p>
                  <strong>Estado:</strong> {isCollected ? "Recolectado" : "Pendiente"}
                </p>
                {!isCollected && (
                  <Button onClick={() => setIsCollected(true)}>Marcar como Recolectado</Button>
                )}
              </>
            ) : (
              <p>No se ha generado una ruta.</p>
            )}
          </Section>

          <Section>
            <PickingList items={pickingItems} />
          </Section>
        </InfoPanel>
      </MainLayout>
    </PageContainer>
  );
}

const PageContainer = styled.div`
  width: 100%;
  min-height: calc(100vh - 60px);
  padding: 1rem 2rem;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  color: #000;
`;

const HeaderRow = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const PageTitle = styled.h2`
  font-size: 1.5rem;
  color: #000;
  margin: 0;
`;

const ControlRow = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
  color: #000;
`;

const ButtonRow = styled.div`
  display: flex;
  gap: 0.5rem;
`;

const Button = styled.button`
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 0.4rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-size: 0.9rem;
  &:hover {
    background-color: #0056b3;
  }
`;

// Usamos transient prop para evitar pasar "active" al DOM:
const TabButton = styled(Button)<{ $active?: boolean }>`
  background-color: ${({ $active }) => ($active ? "#0056b3" : "#007bff")};
  opacity: ${({ $active }) => ($active ? 1 : 0.8)};
`;

const MainLayout = styled.div`
  display: flex;
  flex: 1;
  gap: 1rem;
`;

const VisualizationArea = styled.div`
  flex: 1;
  min-height: 700px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  color: #000;
`;

const InfoPanel = styled.div`
  width: 300px;
  min-height: 200px;
  background: #fff;
  border-radius: 0.4rem;
  padding: 1rem;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  color: #000;
`;

const Section = styled.div`
  margin-bottom: 1rem;
`;



===== Archivo: src/app/(protected)/users/page.tsx =====
"use client";

import React, { useEffect, useState } from "react";
import styled from "styled-components";

interface User {
  id: string;
  name: string;
  username: string;
  email: string;
  phone?: string;
  role: string;
  image?: string; // Propiedad para la imagen
}

// Datos de ejemplo. En tu caso, vendrán del fetch a tu API
const mockUsers: User[] = [
  {
    id: "1",
    name: "User001",
    username: "User001",
    email: "test@test.com",
    phone: "3184553490",
    role: "OPERATOR",
  },
  {
    id: "2",
    name: "User002",
    username: "User002",
    email: "user2@test.com",
    phone: "3201234567",
    role: "ADMIN",
  },
];

const UsersPage: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [editingUser, setEditingUser] = useState<User | null>(null);

  useEffect(() => {
    // Simulación de fetch. En tu caso, haz la llamada real:
    setUsers(mockUsers);
  }, []);

  const totalUsers = users.length;

  const handleEdit = (user: User) => {
    setEditingUser(user);
  };

  const handleDelete = (user: User) => {
    console.log("Eliminar usuario:", user.id);
    // Aquí tu lógica para eliminar
  };

  const handleCloseEdit = () => {
    setEditingUser(null);
  };

  return (
    <PageContainer>
      {/* Encabezado: Logo (círculo) + "Users {n}" */}
      <HeaderWrapper>
        <LogoCircle>
        </LogoCircle>
        <HeaderText>
          Users <span>{totalUsers}</span>
        </HeaderText>
      </HeaderWrapper>

      {/* Burbujas decorativas (opcionales) */}
      <BubblesContainer>
        <Bubble size={150} top="10%" right="5%" />
        <Bubble size={100} top="35%" right="10%" />
        <Bubble size={200} top="60%" right="2%" />
        <Bubble size={60} top="80%" right="8%" />
      </BubblesContainer>

      {/* Ícono con badge en esquina inferior derecha (opcional) */}
      <BoxIconContainer>
        <BoxPlaceholder>Box</BoxPlaceholder>
        <NotificationBadge>2</NotificationBadge>
      </BoxIconContainer>

      {/* Vista de edición o tarjetas de usuarios */}
      {editingUser ? (
        <EditUserView user={editingUser} onClose={handleCloseEdit} />
      ) : (
        <CardsContainer>
          {users.map((user) => (
            <UserCard key={user.id}>
              {/* Sección izquierda: Avatar + info (Nombre, @username, email) */}
              <LeftSection>
                <AvatarCircle>
                  <img
                    alt={user.username}
                  />
                </AvatarCircle>
                <UserText>
                  <UserName>{user.name}</UserName>
                  <UserUsername>@{user.username}</UserUsername>
                  <UserEmail>{user.email}</UserEmail>
                </UserText>
              </LeftSection>

              {/* Sección derecha: Rol, Teléfono y botones */}
              <RightSection>
                <RolePhone>
                  <UserRole>{user.role}</UserRole>
                  {user.phone && <UserPhone>{user.phone}</UserPhone>}
                </RolePhone>
                <ButtonsContainer>
                  <EditButton onClick={() => handleEdit(user)}>
                    Editar
                  </EditButton>
                  <DeleteButton onClick={() => handleDelete(user)}>
                    Eliminar
                  </DeleteButton>
                </ButtonsContainer>
              </RightSection>
            </UserCard>
          ))}
        </CardsContainer>
      )}
    </PageContainer>
  );
};

export default UsersPage;

/* ========================= Vista de Edición ========================= */
interface EditUserViewProps {
  user: User;
  onClose: () => void;
}

const EditUserView: React.FC<EditUserViewProps> = ({ user, onClose }) => {
  const [name, setName] = useState(user.name);
  const [username, setUsername] = useState(user.username);
  const [phone, setPhone] = useState(user.phone || "");
  const [role, setRole] = useState(user.role);

  const handleSave = () => {
    console.log("Guardando cambios...", { name, username, phone, role });
    // Lógica para actualizar
    onClose();
  };

  return (
    <EditContainer>
      {/* Formulario (columna izquierda) */}
      <EditForm>
        <FormTitle>Editar perfil</FormTitle>
        <UserHandle>@{username}</UserHandle>

        <FieldLabel>Name</FieldLabel>
        <FieldInput
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />

        <FieldLabel>Username</FieldLabel>
        <FieldInput
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />

        <FieldLabel>Teléfono</FieldLabel>
        <FieldInput
          type="text"
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
        />

        <FieldLabel>Rol</FieldLabel>
        <FieldInput
          type="text"
          value={role}
          onChange={(e) => setRole(e.target.value)}
        />

        <SaveButton onClick={handleSave}>Guardar</SaveButton>
      </EditForm>

      {/* Tarjeta de vista previa (columna derecha) */}
      <PreviewCard>
        <PreviewImage>
          <img
            alt={user.username}
          />
        </PreviewImage>

        <PreviewData>
          <PreviewLabel>Name</PreviewLabel>
          <PreviewValue>{name}</PreviewValue>

          <PreviewLabel>Username</PreviewLabel>
          <PreviewValue>{username}</PreviewValue>

          <PreviewLabel>Teléfono</PreviewLabel>
          <PreviewValue>{phone}</PreviewValue>

          <PreviewLabel>Rol</PreviewLabel>
          <PreviewValue>{role}</PreviewValue>
        </PreviewData>
      </PreviewCard>
    </EditContainer>
  );
};

/* ======================== Estilos Generales ======================== */
const PageContainer = styled.div`
  position: relative;
  width: 100%;
  min-height: 100vh;
  background-color: #fff;
  z-index: 1;
`;

const HeaderWrapper = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  margin: 2rem;
`;

/* Nuevo componente para el logo en el encabezado */
const LogoCircle = styled.div`
  width: 60px;
  height: 60px;
  border-radius: 50%;
  overflow: hidden;
  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
`;

const HeaderText = styled.h2`
  font-size: 2rem;
  font-weight: 700;
  color: #333;
  margin: 0;

  span {
    font-size: 1.5rem;
    font-weight: 600;
    color: #666;
    margin-left: 0.5rem;
  }
`;

/* Burbujas decorativas */
const BubblesContainer = styled.div`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  width: 50%;
  pointer-events: none;
  overflow: hidden;
  z-index: -1;
`;

interface BubbleProps {
  size: number;
  top: string;
  right: string;
}

const Bubble = styled.div<BubbleProps>`
  position: absolute;
  width: ${(props) => props.size}px;
  height: ${(props) => props.size}px;
  border-radius: 50%;
  background: #b2daf0;
  opacity: 0.8;
  top: ${(props) => props.top};
  right: ${(props) => props.right};
`;

/* Ícono con badge en esquina inferior derecha */
const BoxIconContainer = styled.div`
  position: absolute;
  bottom: 20px;
  right: 20px;
  width: 60px;
  height: 60px;
  z-index: 100;
`;

const BoxPlaceholder = styled.div`
  width: 100%;
  height: 100%;
  background-color: #cccccc;
  border-radius: 0.5rem;
  color: #333;
  font-size: 0.9rem;
  font-weight: 700;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const NotificationBadge = styled.div`
  position: absolute;
  top: -6px;
  right: -6px;
  background-color: #f00;
  color: #fff;
  font-size: 0.7rem;
  font-weight: 700;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
`;

/* ===================== Tarjetas de Usuarios ===================== */
const CardsContainer = styled.div`
  width: 90%;
  max-width: 1200px;
  margin: 2rem auto;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
`;

const UserCard = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fff;
  border-radius: 2rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  padding: 1.5rem 2rem;
  gap: 1rem;
`;

const LeftSection = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
`;

const AvatarCircle = styled.div`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
`;

const UserText = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.3rem;
`;

const UserName = styled.div`
  font-size: 1.1rem;
  font-weight: 700;
  color: #333;
`;

const UserUsername = styled.div`
  font-size: 0.9rem;
  color: #555;
`;

const UserEmail = styled.div`
  font-size: 0.9rem;
  color: #555;
`;

const RightSection = styled.div`
  display: flex;
  align-items: center;
  gap: 2rem;
`;

const RolePhone = styled.div`
  display: flex;
  align-items: center;
  gap: 1.5rem;
`;

const UserRole = styled.div`
  font-size: 0.9rem;
  font-weight: 600;
  color: #333;
  text-transform: uppercase;
`;

const UserPhone = styled.div`
  font-size: 0.9rem;
  color: #333;
`;

const ButtonsContainer = styled.div`
  display: flex;
  gap: 0.5rem;
`;

const EditButton = styled.button`
  background-color: #2e67f8;
  color: #fff;
  border: none;
  border-radius: 1rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-size: 0.85rem;
  font-weight: 600;

  &:hover {
    background-color: #1f4cbc;
  }
`;

const DeleteButton = styled.button`
  background-color: #e85b5b;
  color: #fff;
  border: none;
  border-radius: 1rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-size: 0.85rem;
  font-weight: 600;

  &:hover {
    background-color: #d14242;
  }
`;

/* ===================== Vista de Edición ===================== */
const EditContainer = styled.div`
  width: 90%;
  max-width: 1200px;
  margin: 4rem auto 3rem auto;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  gap: 3rem;
`;

const EditForm = styled.div`
  flex: 1;
  max-width: 450px;
  display: flex;
  flex-direction: column;
`;

const FormTitle = styled.h2`
  font-size: 2rem;
  font-weight: 700;
  color: #333;
  margin-bottom: 0.2rem;
`;

const UserHandle = styled.span`
  font-size: 1.2rem;
  color: #333;
  margin-bottom: 2rem;
  display: inline-block;
`;

const FieldLabel = styled.label`
  font-size: 1rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 0.3rem;
`;

const FieldInput = styled.input`
  border: none;
  border-bottom: 1px solid #ccc;
  padding: 0.4rem 0;
  margin-bottom: 1.2rem;
  font-size: 1rem;
  color: #333;

  &:focus {
    outline: none;
    border-bottom: 2px solid #333;
  }
`;

const SaveButton = styled.button`
  width: fit-content;
  background-color: #2e67f8;
  color: #fff;
  border: none;
  border-radius: 1rem;
  padding: 0.6rem 1.5rem;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;

  &:hover {
    background-color: #1f4cbc;
  }
`;

const PreviewCard = styled.div`
  flex: 1;
  max-width: 450px;
  background-color: #fff;
  border-radius: 1rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  align-self: flex-start;
`;

/* Actualizamos PreviewImage para mostrar la foto del usuario */
const PreviewImage = styled.div`
  width: 100px;
  height: 100px;
  border-radius: 50%;
  overflow: hidden;
  margin: 0 auto 1rem auto;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
`;

const PreviewData = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;

const PreviewLabel = styled.div`
  font-size: 0.9rem;
  font-weight: 600;
  color: #333;
`;

const PreviewValue = styled.div`
  font-size: 1rem;
  font-weight: 500;
  color: #333;
`;



===== Archivo: src/app/(protected)/titan/page.tsx =====
"use client";
import React, { useState } from "react";
import styled from "styled-components";
import { FaVolumeUp, FaMicrophone } from "react-icons/fa";

// ====================== PREGUNTAS DEL PANEL IZQUIERDO ======================
const leftPanelQuestions = [
  {
    category: "Inventario",
    questions: [
      "¿Cuál es el valor total de todos los productos?",
      "¿Cuántos productos hay en total?",
      "¿Cuántas unidades hay en total?",
    ],
  },
  {
    category: "Stock",
    questions: [
      "¿Cuál es el producto con más stock?",
      "¿Cuál es el producto con menos stock?",
    ],
  },
  {
    category: "Precios",
    questions: [
      "¿Cuál es el producto con mayor precio?",
      "¿Cuál es el producto con menor precio?",
    ],
  },
  {
    category: "Valoración",
    questions: ["¿Cuál es el producto más valioso del inventario?"],
  },
  {
    category: "Consultas Adicionales",
    questions: [
      "¿Cuándo es momento de pedir para este producto?",
      "¿Cuál es la capacidad actual de almacenaje de mis 3 centros de distribución?",
      "¿Quiénes son mis colaboradores más activos?",
      "¿Cuál ha sido mi porcentaje de coincidencia en los últimos conteos cíclicos?",
    ],
  },
];

// ====================== TIPADO PARA MENSAJES ======================
interface Message {
  sender: "user" | "bot";
  text: string;
  image?: string;
}

// ====================== COMPONENTE PRINCIPAL ======================
export default function TitanPage() {
  // Estado de la conversación
  const [messages, setMessages] = useState<Message[]>([
    { sender: "bot", text: "¡Hola! ¿En qué puedo ayudarte?" },
  ]);
  // Estado del input del mensaje
  const [input, setInput] = useState("");

  // Función de voz mejorada: divide el texto en oraciones y las reproduce secuencialmente.
  const speakText = (text: string) => {
    const sentences = text.split(/(?<=[.?!])\s+/);
    if (!sentences.length) return;
    let index = 0;
    const speakNext = () => {
      if (index < sentences.length) {
        const utterance = new SpeechSynthesisUtterance(sentences[index]);
        // Usamos "es-MX" para un acento más latino; ajusta rate y pitch para conseguir un tono más natural
        utterance.lang = "es-US";
        utterance.rate = 0.92; // Un poco más lento para mayor claridad
        utterance.pitch = 1.0; // Tono normal
        utterance.onend = () => {
          index++;
          speakNext();
        };
        window.speechSynthesis.speak(utterance);
      }
    };
    speakNext();
  };

  // Función para iniciar el reconocimiento de voz
  const startListening = () => {
    const SpeechRecognition =
      (window as any).SpeechRecognition ||
      (window as any).webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("Tu navegador no soporta el reconocimiento de voz.");
      return;
    }
    const recognition = new SpeechRecognition();
    recognition.lang = "es-MX";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setInput(transcript);
    };
    recognition.onerror = (event: { error: any }) => {
      console.error("Error en reconocimiento de voz:", event.error);
    };
    recognition.start();
  };

  // Función para enviar el mensaje y llamar la API REST de Rasa
  const handleSend = async () => {
    const trimmed = input.trim();
    if (!trimmed) return;

    // Agregar el mensaje del usuario
    const userMsg: Message = { sender: "user", text: trimmed };
    setMessages((prev) => [...prev, userMsg]);

    const payload = { sender: "usuario123", message: trimmed };

    try {
      const response = await fetch("http://localhost:5005/webhooks/rest/webhook", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const data = await response.json();
      data.forEach((reply: any) => {
        const botMsg: Message = {
          sender: "bot",
          text: reply.text ? reply.text : "GRAFICO:",
          image: reply.image || null,
        };
        setMessages((prev) => [...prev, botMsg]);
      });
    } catch (error) {
      console.error("Error al conectar con Rasa:", error);
      const errorMsg: Message = { sender: "bot", text: "Hubo un error al obtener la respuesta." };
      setMessages((prev) => [...prev, errorMsg]);
    }
    setInput("");
  };

  // Permite enviar el mensaje con la tecla Enter
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleSend();
    }
  };

  // Al hacer clic en alguna pregunta del panel izquierdo
  const handleQuestionClick = (question: string) => {
    setInput(question);
  };

  return (
    <Container>
      <Header>
        <Logo>TITAN</Logo>
        <BubbleContainer>
          <Bubble />
        </BubbleContainer>
      </Header>

      <MainContent>
        <LeftPanel>
          {leftPanelQuestions.map((block, idx) => (
            <CategoryBox key={idx}>
              <CategoryTitle>{block.category}</CategoryTitle>
              {block.questions.map((q, i) => (
                <QuestionItem key={i} onClick={() => handleQuestionClick(q)}>
                  {q}
                </QuestionItem>
              ))}
            </CategoryBox>
          ))}
        </LeftPanel>

        <ChatContainer>
          <MessagesContainer>
            {messages.map((msg, index) => (
              <MessageRow key={index} $isUser={msg.sender === "user"}>
                <MessageBubble $isUser={msg.sender === "user"}>
                  <MessageContent>
                    <TextContent>{msg.text}</TextContent>
                    {msg.sender === "bot" && (
                      <ReadButton onClick={() => speakText(msg.text)}>
                        <FaVolumeUp />
                      </ReadButton>
                    )}
                  </MessageContent>
                  {msg.image && (
                    <MessageImage src={msg.image} alt="Reporte de Stock" />
                  )}
                </MessageBubble>
              </MessageRow>
            ))}
          </MessagesContainer>
          <InputRow>
            <MessageInput
              placeholder="Escribe un mensaje..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
            />
            <MicButton onClick={startListening}>
              <FaMicrophone />
            </MicButton>
            <SendButton onClick={handleSend}>Enviar</SendButton>
          </InputRow>
        </ChatContainer>
      </MainContent>
    </Container>
  );
}

// ====================== ESTILOS ======================
const Container = styled.div`
  width: 100%;
  height: 100vh;
  background-color: #f8f8f8;
  display: flex;
  flex-direction: column;
`;
const Header = styled.header`
  position: relative;
  height: 60px;
  background-color: #fff;
  border-bottom: 1px solid #ddd;
  display: flex;
  align-items: center;
  padding: 0 1rem;
  z-index: 1;
`;
const Logo = styled.h1`
  font-size: 1.5rem;
  font-weight: 700;
  color: #333;
  margin: 0;
  position: relative;
  z-index: 2;
`;
const BubbleContainer = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  height: 60px;
  width: 60px;
  overflow: visible;
  z-index: 1;
`;
const Bubble = styled.div`
  position: absolute;
  top: -20px;
  left: -20px;
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: linear-gradient(135deg, #a1f3c3, #4bbf73);
  opacity: 0.7;
  z-index: -1;
`;
const MainContent = styled.div`
  flex: 1;
  display: flex;
  overflow: hidden;
`;
const LeftPanel = styled.div`
  width: 300px;
  background-color: #fff;
  border-right: 1px solid #ddd;
  padding: 1rem;
  overflow-y: auto;
`;
const CategoryBox = styled.div`
  margin-bottom: 1.5rem;
`;
const CategoryTitle = styled.h2`
  font-size: 1rem;
  font-weight: 700;
  color: #333;
  margin: 0 0 0.5rem 0;
`;
const QuestionItem = styled.div`
  background-color: #f2f2f2;
  border-radius: 8px;
  padding: 0.5rem 0.75rem;
  margin-bottom: 0.5rem;
  color: #555;
  font-size: 0.9rem;
  cursor: pointer;
  &:hover {
    background-color: #e6e6e6;
  }
`;
const ChatContainer = styled.div`
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #f0f0f0;
`;
const MessagesContainer = styled.div`
  flex: 1;
  padding: 1rem;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`;
interface MessageRowProps {
  $isUser: boolean;
}
const MessageRow = styled.div<MessageRowProps>`
  display: flex;
  justify-content: ${(p) => (p.$isUser ? "flex-end" : "flex-start")};
`;
interface MessageBubbleProps {
  $isUser: boolean;
}
const MessageBubble = styled.div<MessageBubbleProps>`
  max-width: 60%;
  background-color: ${(p) => (p.$isUser ? "#d7ebff" : "#ffffff")};
  color: #333;
  padding: 0.6rem 0.8rem;
  border-radius: 8px;
  font-size: 0.9rem;
  line-height: 1.4;
  white-space: pre-wrap;
  position: relative;
`;
const MessageContent = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
`;
const TextContent = styled.div`
  flex: 1;
  margin-right: 0.5rem;
`;
const ReadButton = styled.button`
  background-color: transparent;
  border: none;
  color: #2e67f8;
  cursor: pointer;
  font-size: 1rem;
  display: inline-flex;
  align-items: center;
`;
const MessageImage = styled.img`
  max-width: 100%;
  margin-top: 0.5rem;
  border-radius: 8px;
`;
const MicButton = styled.button`
  background-color: #2e67f8;
  color: #fff;
  border: none;
  border-radius: 50%;
  padding: 0.5rem;
  font-size: 1.1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  &:hover {
    background-color: #1f4cbc;
  }
`;
const InputRow = styled.div`
  display: flex;
  padding: 0.5rem;
  gap: 0.5rem;
  background-color: #fff;
  border-top: 1px solid #ddd;
`;
const MessageInput = styled.input`
  flex: 1;
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 0.5rem;
  font-size: 0.9rem;
  background-color: #fff;
  color: #333;
  &::placeholder {
    color: #999;
  }
  &:focus {
    outline: none;
    border-color: #999;
  }
`;
const SendButton = styled.button`
  background-color: #2e67f8;
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 0 1rem;
  font-size: 0.9rem;
  font-weight: 600;
  cursor: pointer;
  &:hover {
    background-color: #1f4cbc;
  }
`;



===== Archivo: src/app/(protected)/items/page.tsx =====
"use client";

import React, { useState } from "react";
import styled from "styled-components";
import Image from "next/image";
import CappasityViewer from "../../../components/Items/CappasityViewer";

/** Modelo de datos */
interface LocationInfo {
  location: string;
  quantity: number;
  lastUpdate: string;
  status: "OK" | "LOW" | "OUT";
}

interface Item {
  id: number;
  name: string;
  brand: string;
  price: string;
  stock: number;
  sku: string;
  description: string;
  image: string;
  viewerUrl?: string;
  barcode: string;
  otherStock: LocationInfo[];
}

/** Datos de ejemplo: 
 * Los primeros 4 ítems son Nike, V-block, Sofá Reclinable y Taladro Inalámbrico (con API 3D).
 * Luego se agregan 8 ítems adicionales con datos demo.
 */
const mockItems: Item[] = [
  // ==================== PRIMEROS 4 ITEMS ====================
  {
    id: 1,
    name: "Nike Zoom Pro",
    brand: "Nike",
    price: "$129.99",
    stock: 48,
    sku: "SKU-NIKE-ZOOM-001",
    description:
      "Zapatillas deportivas de alta gama, ideales para running y entrenamiento profesional.",
    viewerUrl:
      "https://api.cappasity.com/api/player/1a7a1215-c5a0-4a83-bccd-ce334eb34b41/embedded?arbutton=0&autorun=0",
    barcode: "1234567890123",
    otherStock: [
      { location: "CDMX-WH1", quantity: 25, lastUpdate: "2025-03-20", status: "OK" },
      { location: "Monterrey-WH2", quantity: 15, lastUpdate: "2025-03-18", status: "LOW" },
      { location: "Tokio-WH9", quantity: 8, lastUpdate: "2025-03-22", status: "OK" },
    ],
  },
  {
    id: 2,
    name: "V-block",
    brand: "TechOne",
    price: "$899.99",
    stock: 12,
    sku: "SKU-LAPTOP-002",
    description:
      "Laptop de alto rendimiento con procesador Intel i9, 16GB RAM y pantalla 4K.",
    viewerUrl:
      "https://api.cappasity.com/api/player/59f608a5-937e-430c-8fa0-8f43aa942ba7/embedded?arbutton=0&autorun=0",
    barcode: "9876543210987",
    otherStock: [
      { location: "Houston-WH3", quantity: 5, lastUpdate: "2025-03-21", status: "OK" },
      { location: "Los Angeles-WH5", quantity: 2, lastUpdate: "2025-03-19", status: "LOW" },
      { location: "Tokio-WH9", quantity: 5, lastUpdate: "2025-03-23", status: "OK" },
    ],
  },
  {
    id: 3,
    name: "Sofá Reclinable Luxe",
    brand: "HomeComfort",
    price: "$1,299.99",
    stock: 5,
    sku: "SKU-SOFA-003",
    description:
      "Sofá premium reclinable de cuero sintético, con soporte lumbar y reposabrazos ajustables.",
    viewerUrl:
      "https://api.cappasity.com/api/player/97f8ef1b-a4db-462e-899b-f8c0059c9896/embedded?arbutton=0&autorun=0",
    barcode: "1122334455667",
    otherStock: [
      { location: "Monterrey-WH2", quantity: 2, lastUpdate: "2025-03-20", status: "OK" },
      { location: "CDMX-WH1", quantity: 1, lastUpdate: "2025-03-21", status: "LOW" },
      { location: "Houston-WH3", quantity: 2, lastUpdate: "2025-03-22", status: "OK" },
    ],
  },
  {
    id: 4,
    name: "Taladro Inalámbrico ProMax",
    brand: "ToolMaster",
    price: "$149.99",
    stock: 30,
    sku: "SKU-TALADRO-004",
    description:
      "Taladro inalámbrico con batería de larga duración y torque ajustable de hasta 50Nm.",
    viewerUrl:
      "https://api.cappasity.com/api/player/8840c5f0-1f88-4c47-aae8-93f139875895/embedded?arbutton=0&autorun=0",
    barcode: "1234509876543",
    otherStock: [
      { location: "Guadalajara-WH4", quantity: 10, lastUpdate: "2025-03-19", status: "OK" },
      { location: "CDMX-WH1", quantity: 10, lastUpdate: "2025-03-20", status: "OK" },
      { location: "Monterrey-WH2", quantity: 10, lastUpdate: "2025-03-18", status: "OK" },
    ],
  },

  // ==================== 8 ITEMS ADICIONALES ====================
  {
    id: 5,
    name: "Camisa Casual",
    brand: "UrbanStyle",
    price: "$29.99",
    stock: 60,
    sku: "SKU-CAMISA-005",
    description:
      "Camisa de algodón de alta calidad, perfecta para uso diario o reuniones informales.",
    barcode: "3456789012345",
    otherStock: [
      { location: "CDMX-WH1", quantity: 20, lastUpdate: "2025-03-20", status: "OK" },
      { location: "Houston-WH3", quantity: 20, lastUpdate: "2025-03-18", status: "OK" },
      { location: "Tokio-WH9", quantity: 20, lastUpdate: "2025-03-22", status: "OK" },
    ],
  },
  {
    id: 6,
    name: "Chamarra Acolchada",
    brand: "WinterPro",
    price: "$59.99",
    stock: 25,
    sku: "SKU-CHAMARRA-006",
    description:
      "Chamarra abrigadora para climas fríos, con relleno de alta calidad y diseño moderno.",
    viewerUrl:
      "https://api.cappasity.com/api/player/8840c5f0-1f88-4c47-aae8-93f139875895/embedded?arbutton=0&autorun=0",
    barcode: "4567890123456",
    otherStock: [
      { location: "Monterrey-WH2", quantity: 10, lastUpdate: "2025-03-20", status: "LOW" },
      { location: "Los Angeles-WH5", quantity: 5, lastUpdate: "2025-03-19", status: "OK" },
      { location: "CDMX-WH1", quantity: 10, lastUpdate: "2025-03-23", status: "OK" },
    ],
  },
  {
    id: 7,
    name: "Gorra Deportiva",
    brand: "ActiveGear",
    price: "$14.99",
    stock: 100,
    sku: "SKU-GORRA-007",
    description:
      "Gorra ajustable disponible en varios colores, ideal para actividades al aire libre.",
    barcode: "5678901234567",
    otherStock: [
      { location: "CDMX-WH1", quantity: 40, lastUpdate: "2025-03-18", status: "OK" },
      { location: "Houston-WH3", quantity: 30, lastUpdate: "2025-03-19", status: "OK" },
      { location: "Tokio-WH9", quantity: 30, lastUpdate: "2025-03-21", status: "OK" },
    ],
  },
  {
    id: 8,
    name: "Pantalones Mezclilla",
    brand: "DenimCo",
    price: "$39.99",
    stock: 45,
    sku: "SKU-PANTALONES-008",
    description:
      "Pantalones de mezclilla resistentes, corte clásico y bolsillos reforzados.",
    barcode: "6789012345678",
    otherStock: [
      { location: "Guadalajara-WH4", quantity: 15, lastUpdate: "2025-03-17", status: "OK" },
      { location: "CDMX-WH1", quantity: 15, lastUpdate: "2025-03-20", status: "OK" },
      { location: "Monterrey-WH2", quantity: 15, lastUpdate: "2025-03-22", status: "OK" },
    ],
  },
  {
    id: 9,
    name: "Zapatos Casual",
    brand: "UrbanStyle",
    price: "$49.99",
    stock: 35,
    sku: "SKU-ZAPATOS-009",
    description:
      "Zapatos cómodos para el día a día, suela antideslizante y plantilla acolchada.",
    barcode: "7890123456789",
    otherStock: [
      { location: "Monterrey-WH2", quantity: 15, lastUpdate: "2025-03-19", status: "OK" },
      { location: "CDMX-WH1", quantity: 10, lastUpdate: "2025-03-20", status: "LOW" },
      { location: "Houston-WH3", quantity: 10, lastUpdate: "2025-03-21", status: "OK" },
    ],
  },
  {
    id: 10,
    name: "Laptop X-5000",
    brand: "TechOne",
    price: "$999.99",
    stock: 8,
    sku: "SKU-LAPTOP-010",
    description:
      "Laptop de alto rendimiento con pantalla 4K y batería de larga duración.",
    barcode: "8901234567890",
    otherStock: [
      { location: "Houston-WH3", quantity: 3, lastUpdate: "2025-03-21", status: "OK" },
      { location: "Los Angeles-WH5", quantity: 2, lastUpdate: "2025-03-19", status: "LOW" },
      { location: "Tokio-WH9", quantity: 3, lastUpdate: "2025-03-23", status: "OK" },
    ],
  },
  {
    id: 11,
    name: "Sombrero de Playa",
    brand: "SunnyCo",
    price: "$19.99",
    stock: 50,
    sku: "SKU-SOMBRERO-011",
    description:
      "Sombrero amplio para proteger del sol, con cinta ajustable y tejido transpirable.",
    barcode: "9012345678901",
    otherStock: [
      { location: "CDMX-WH1", quantity: 20, lastUpdate: "2025-03-20", status: "OK" },
      { location: "Houston-WH3", quantity: 15, lastUpdate: "2025-03-18", status: "OK" },
      { location: "Monterrey-WH2", quantity: 15, lastUpdate: "2025-03-22", status: "OK" },
    ],
  },
  {
    id: 12,
    name: "Sudadera Deportiva",
    brand: "ActiveGear",
    price: "$34.99",
    stock: 60,
    sku: "SKU-SUDADERA-012",
    description:
      "Sudadera con capucha, ideal para entrenamiento o uso casual en climas frescos.",
    barcode: "0123456789012",
    otherStock: [
      { location: "Guadalajara-WH4", quantity: 20, lastUpdate: "2025-03-19", status: "OK" },
      { location: "CDMX-WH1", quantity: 20, lastUpdate: "2025-03-20", status: "OK" },
      { location: "Tokio-WH9", quantity: 20, lastUpdate: "2025-03-22", status: "OK" },
    ],
  },
];

export default function ItemsPage() {
  const [selectedItem, setSelectedItem] = useState<Item | null>(null);

  return (
    <PageContainer>
      <HeaderWrapper>
        <GreenCircle>
        </GreenCircle>
        <HeaderText>
          Items <span>{mockItems.length}</span>
        </HeaderText>
      </HeaderWrapper>

      {selectedItem ? (
        <DetailView item={selectedItem} onClose={() => setSelectedItem(null)} />
      ) : (
        <ItemsGrid>
          {mockItems.map((item) => (
            <ItemCard key={item.id} onClick={() => setSelectedItem(item)}>
              <ImageWrapper>
                <StyledImage
                  src={item.image}
                  alt={item.name}
                  fill
                  sizes="(max-width: 768px) 100vw, 240px"
                />
              </ImageWrapper>
              <ItemName>{item.name}</ItemName>
              <ItemBrand>{item.brand}</ItemBrand>
              <ItemPrice>{item.price}</ItemPrice>
            </ItemCard>
          ))}
        </ItemsGrid>
      )}
    </PageContainer>
  );
}

/** Vista de Detalle */
interface DetailViewProps {
  item: Item;
  onClose: () => void;
}

const DetailView: React.FC<DetailViewProps> = ({ item, onClose }) => {
  return (
    <DetailContainer>
      <DetailCard>
        <TopImageContainer>
          {item.viewerUrl ? (
            <CappasityViewer src={item.viewerUrl} />
          ) : (
            <DetailImage src={item.image} alt={item.name} />
          )}
        </TopImageContainer>

        <Row>
          <Price>{item.price}</Price>
          <ProductTitle>{item.name}</ProductTitle>
          <StockInfo>Stock <BlueNumber>{item.stock}</BlueNumber></StockInfo>
        </Row>

        <SecondaryText>{item.description}</SecondaryText>

        <InfoRow>
          <InfoColumn>
            <InfoLabel>SKU</InfoLabel>
            <InfoValue>{item.sku}</InfoValue>
          </InfoColumn>
          <InfoColumn>
            <InfoLabel>Marca</InfoLabel>
            <InfoValue>{item.brand}</InfoValue>
          </InfoColumn>
        </InfoRow>

        <BottomRow>
          <BarcodeSection>
            <BarcodeImage
              src={`https://barcode.tec-it.com/barcode.ashx?data=${encodeURIComponent(
                item.barcode
              )}&code=Code128&translate-esc=off`}
              alt="Barcode"
            />
            <BarcodeValue><BlueNumber>{item.barcode}</BlueNumber></BarcodeValue>
          </BarcodeSection>

          <LocationsSection>
            <LocationsTitle>Ubicaciones actuales</LocationsTitle>
            <LocationsTable>
              <thead>
                <tr>
                  <th>Almacén</th>
                  <th>Cantidad</th>
                  <th>Última Actualización</th>
                  <th>Estado</th>
                </tr>
              </thead>
              <tbody>
                {item.otherStock.map((loc, index) => (
                  <tr key={index}>
                    <td>{loc.location}</td>
                    <td><BlueNumber>{loc.quantity}</BlueNumber></td>
                    <td>{loc.lastUpdate}</td>
                    <td>
                      <StatusBadge status={loc.status}>
                        {loc.status}
                      </StatusBadge>
                    </td>
                  </tr>
                ))}
              </tbody>
            </LocationsTable>
          </LocationsSection>
        </BottomRow>

        <CloseButton onClick={onClose}>Volver</CloseButton>
      </DetailCard>
    </DetailContainer>
  );
};

///////////////////////////////////////////////////////////////////////////////
// Estilos con styled-components
///////////////////////////////////////////////////////////////////////////////

const PageContainer = styled.div`
  width: 100%;
  min-height: 100vh;
  background: #f7f7f7;
  padding: 2rem;
  box-sizing: border-box;
`;

/** Encabezado */
const HeaderWrapper = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 2rem;
`;

const GreenCircle = styled.div`
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, #a1f3c3, #4bbf73);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const IconImage = styled.img`
  width: 28px;
  height: 28px;
`;

const HeaderText = styled.h2`
  font-size: 2rem;
  font-weight: 700;
  margin: 0;
  color: #333;
  span {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1976d2; /* Números en azul */
    margin-left: 0.5rem;
  }
`;

////////////////////////////////////////////////////////////////////////////////
// Grid de Items
////////////////////////////////////////////////////////////////////////////////

const ItemsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 1.5rem;
`;

const ItemCard = styled.div`
  background: #fff;
  border-radius: 1rem;
  padding: 1rem;
  text-align: center;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  }
`;

const ImageWrapper = styled.div`
  position: relative;
  width: 100%;
  height: 180px;
  overflow: hidden;
  border-radius: 0.5rem;
  background: #f8f8f8;
`;

const StyledImage = styled(Image)`
  object-fit: contain;
`;

const ItemName = styled.h3`
  margin: 0.5rem 0 0.2rem;
  font-size: 1.2rem;
  font-weight: 600;
  color: #333;
`;

const ItemBrand = styled.div`
  font-size: 0.95rem;
  color: #666;
`;

const ItemPrice = styled.div`
  font-size: 1.1rem;
  color: #e53935;
  margin-top: 0.3rem;
  font-weight: 600;
`;

////////////////////////////////////////////////////////////////////////////////
// Vista de Detalle
////////////////////////////////////////////////////////////////////////////////

const DetailContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: flex-start;
`;

const DetailCard = styled.div`
  position: relative;
  background: #fff;
  width: 100%;
  max-width: 900px;
  border-radius: 1rem;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;

const TopImageContainer = styled.div`
  width: 100%;
  height: 350px;
  background: #fafafa;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
`;

const DetailImage = styled.img`
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
`;

const Row = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const Price = styled.div`
  font-size: 2rem;
  font-weight: 700;
  color: #333;
`;

const ProductTitle = styled.div`
  font-size: 1.4rem;
  font-weight: 600;
  color: #333;
`;

const StockInfo = styled.div`
  font-size: 1rem;
  font-weight: 500;
  color: #1976d2; /* Números en azul */
`;

const SecondaryText = styled.div`
  font-size: 1rem;
  color: #555;
  line-height: 1.4;
`;

const InfoRow = styled.div`
  display: flex;
  gap: 1rem;
  @media (max-width: 600px) {
    flex-direction: column;
  }
`;

const InfoColumn = styled.div`
  flex: 1;
`;

const InfoLabel = styled.div`
  font-weight: 600;
  color: #333;
  margin-bottom: 0.2rem;
`;

const InfoValue = styled.div`
  color: #555;
`;

////////////////////////////////////////////////////////////////////////////////
// Sección inferior: Barcode + Ubicaciones (tabla)
////////////////////////////////////////////////////////////////////////////////

const BottomRow = styled.div`
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
  @media (max-width: 600px) {
    flex-direction: column;
  }
`;

const BarcodeSection = styled.div`
  flex: 1;
  background: #f9f9f9;
  border-radius: 0.5rem;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
`;

const BarcodeImage = styled.img`
  width: 150px;
  height: auto;
  margin-bottom: 0.5rem;
`;

const BarcodeValue = styled.div`
  font-size: 0.9rem;
  color: #1976d2; /* Números en azul */
  letter-spacing: 0.1rem;
`;

const LocationsSection = styled.div`
  flex: 2;
  background: #f9f9f9;
  border-radius: 0.5rem;
  padding: 1rem;
`;

const LocationsTitle = styled.h3`
  font-size: 1.1rem;
  font-weight: 600;
  color: #333;
  margin: 0 0 0.5rem;
`;

const LocationsTable = styled.table`
  width: 100%;
  border-collapse: collapse;
  font-size: 0.95rem;
  thead {
    background: #f0f0f0;
    tr {
      th {
        text-align: left;
        padding: 0.5rem;
        color: #555;
        font-weight: 600;
      }
    }
  }
  tbody {
    tr {
      border-bottom: 1px solid #ddd;
      &:last-child {
        border-bottom: none;
      }
      td {
        padding: 0.5rem;
        color: #555;
      }
    }
  }
`;

////////////////////////////////////////////////////////////////////////////////
// StatusBadge
////////////////////////////////////////////////////////////////////////////////

interface StatusBadgeProps {
  status: "OK" | "LOW" | "OUT";
}
const StatusBadge = styled.span<StatusBadgeProps>`
  padding: 0.3rem 0.5rem;
  border-radius: 0.3rem;
  font-size: 0.8rem;
  font-weight: 600;
  text-transform: uppercase;
  background-color: ${(props) =>
    props.status === "OK"
      ? "#C8E6C9"
      : props.status === "LOW"
      ? "#FFE082"
      : "#FFCDD2"};
  color: ${(props) =>
    props.status === "OK"
      ? "#2E7D32"
      : props.status === "LOW"
      ? "#795548"
      : "#C62828"};
`;

////////////////////////////////////////////////////////////////////////////////
// Botón Cerrar
////////////////////////////////////////////////////////////////////////////////

const CloseButton = styled.button`
  align-self: flex-end;
  background: #e53935;
  color: #fff;
  border: none;
  border-radius: 0.5rem;
  padding: 0.7rem 1.5rem;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease;
  margin-top: 1rem;
  &:hover {
    background: #d32f2f;
  }
`;

/** Componente para envolver números y darles color azul */
const BlueNumber = styled.span`
  color: #1976d2;
`;



===== Archivo: src/app/(protected)/arrivals/page.tsx =====
"use client";

import React, { useState, useEffect, ChangeEvent, FormEvent } from "react";
import styled from "styled-components";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Tooltip,
  Legend,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Bar,
  Cell,
} from "recharts";
import { FaTruckLoading, FaPlus, FaEdit, FaTrash, FaSave, FaTimes } from "react-icons/fa";

// Definición de la interfaz para Arrival
interface Arrival {
  id: number;
  shipmentId: string;
  carrier: string;
  arrivalDate: string;
  status: string;
}

// Datos demo iniciales
const initialArrivals: Arrival[] = [
  {
    id: 1,
    shipmentId: "SHIP-101",
    carrier: "FedEx",
    arrivalDate: "2025-04-15T05:00:00",
    status: "Arrived",
  },
  {
    id: 2,
    shipmentId: "SHIP-102",
    carrier: "DHL",
    arrivalDate: "2025-04-16T09:30:00",
    status: "In Transit",
  },
  {
    id: 3,
    shipmentId: "SHIP-103",
    carrier: "UPS",
    arrivalDate: "2025-04-17T11:45:00",
    status: "Delayed",
  },
];

// Colores para el PieChart (distribución por estado)
const pieColors = ["#4BBF73", "#F9A826", "#FF5757"];

// Función que prepara la data para el gráfico de pastel, según estado.
const getStatusData = (arrivals: Arrival[]) => [
  { name: "Arrived", value: arrivals.filter((a) => a.status === "Arrived").length },
  { name: "In Transit", value: arrivals.filter((a) => a.status === "In Transit").length },
  { name: "Delayed", value: arrivals.filter((a) => a.status === "Delayed").length },
];

// Función que agrupa los arrivals por transportista para generar un gráfico de barras.
const getCarrierData = (arrivals: Arrival[]) => {
  const carriers: { [key: string]: number } = {};
  arrivals.forEach((a) => {
    carriers[a.carrier] = (carriers[a.carrier] || 0) + 1;
  });
  return Object.entries(carriers).map(([carrier, count]) => ({ carrier, count }));
};

export default function ArrivalsPage() {
  // Estado que mantiene los arrivals (simulación en local)
  const [arrivals, setArrivals] = useState<Arrival[]>(initialArrivals);

  // Estados para el formulario de nuevo arrival
  const [newArrival, setNewArrival] = useState<Omit<Arrival, "id">>({
    shipmentId: "",
    carrier: "",
    arrivalDate: "",
    status: "",
  });

  // Estados para la edición: almacena el ID a editar y sus datos temporales
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editArrival, setEditArrival] = useState<Omit<Arrival, "id">>({
    shipmentId: "",
    carrier: "",
    arrivalDate: "",
    status: "",
  });

  // (Simulación de fetch) – En un escenario real podrías obtener datos vía axios.
  useEffect(() => {
    // Ejemplo: axios.get('/api/arrivals')...
    // Si falla, se mantendrían los datos demo.
  }, []);

  // Manejo de cambios en el formulario de nuevo arrival
  const handleNewInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setNewArrival({
      ...newArrival,
      [e.target.name]: e.target.value,
    });
  };

  // Agrega un nuevo arrival y actualiza la vista
  const handleAddArrival = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const newId = arrivals.length > 0 ? Math.max(...arrivals.map((a) => a.id)) + 1 : 1;
    const arrivalToAdd: Arrival = { id: newId, ...newArrival };
    setArrivals([...arrivals, arrivalToAdd]);
    setNewArrival({ shipmentId: "", carrier: "", arrivalDate: "", status: "" });
  };

  // Inicia la edición de un arrival
  const handleEditClick = (arrival: Arrival) => {
    setEditingId(arrival.id);
    setEditArrival({
      shipmentId: arrival.shipmentId,
      carrier: arrival.carrier,
      arrivalDate: arrival.arrivalDate,
      status: arrival.status,
    });
  };

  // Maneja cambios en el formulario de edición
  const handleEditInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setEditArrival({
      ...editArrival,
      [e.target.name]: e.target.value,
    });
  };

  // Guarda la edición
  const handleSaveEdit = (id: number) => {
    const updatedArrivals = arrivals.map((a) =>
      a.id === id ? { id, ...editArrival } : a
    );
    setArrivals(updatedArrivals);
    setEditingId(null);
  };

  // Cancela la edición
  const handleCancelEdit = () => {
    setEditingId(null);
  };

  // Borra un arrival
  const handleDelete = (id: number) => {
    const updatedArrivals = arrivals.filter((a) => a.id !== id);
    setArrivals(updatedArrivals);
  };

  return (
    <Container>
      {/* Header del módulo */}
      <Header>
        <FaTruckLoading size={40} color="#4BBF73" />
        <Title>Módulo Arrivals</Title>
      </Header>
      
      {/* Formulario para agregar nuevo arrival */}
      <FormContainer onSubmit={handleAddArrival}>
        <Input
          name="shipmentId"
          placeholder="Shipment ID"
          value={newArrival.shipmentId}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="carrier"
          placeholder="Carrier"
          value={newArrival.carrier}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="datetime-local"
          name="arrivalDate"
          value={newArrival.arrivalDate}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="status"
          placeholder="Estado"
          value={newArrival.status}
          onChange={handleNewInputChange}
          required
        />
        <SubmitButton type="submit">
          <FaPlus /> Agregar Arrival
        </SubmitButton>
      </FormContainer>
      
      {/* Tabla con los arrivals y opciones de editar/borrar */}
      <TableContainer>
        <Table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Shipment ID</th>
              <th>Carrier</th>
              <th>Fecha de Llegada</th>
              <th>Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {arrivals.map((arrival) => (
              <tr key={arrival.id}>
                <td>{arrival.id}</td>
                <td>
                  {editingId === arrival.id ? (
                    <InputSmall
                      name="shipmentId"
                      value={editArrival.shipmentId}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    arrival.shipmentId
                  )}
                </td>
                <td>
                  {editingId === arrival.id ? (
                    <InputSmall
                      name="carrier"
                      value={editArrival.carrier}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    arrival.carrier
                  )}
                </td>
                <td>
                  {editingId === arrival.id ? (
                    <InputSmall
                      type="datetime-local"
                      name="arrivalDate"
                      value={editArrival.arrivalDate}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    new Date(arrival.arrivalDate).toLocaleString()
                  )}
                </td>
                <td>
                  {editingId === arrival.id ? (
                    <InputSmall
                      name="status"
                      value={editArrival.status}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    arrival.status
                  )}
                </td>
                <td>
                  {editingId === arrival.id ? (
                    <>
                      <ActionButton onClick={() => handleSaveEdit(arrival.id)} color="#4BBF73">
                        <FaSave />
                      </ActionButton>
                      <ActionButton onClick={handleCancelEdit} color="#FF5757">
                        <FaTimes />
                      </ActionButton>
                    </>
                  ) : (
                    <>
                      <ActionButton onClick={() => handleEditClick(arrival)} color="#F9A826">
                        <FaEdit />
                      </ActionButton>
                      <ActionButton onClick={() => handleDelete(arrival.id)} color="#FF5757">
                        <FaTrash />
                      </ActionButton>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </TableContainer>

      {/* Gráficos en tiempo real */}
      <ChartsContainer>
        {/* Pie Chart: Distribución por Estado */}
        <ChartWrapper>
          <ChartTitle>Distribución por Estado</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie dataKey="value" data={getStatusData(arrivals)} cx="50%" cy="50%" outerRadius={80} label>
                {getStatusData(arrivals).map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </ChartWrapper>
        {/* Bar Chart: Arrivals por Carrier */}
        <ChartWrapper>
          <ChartTitle>Arrivals por Carrier</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={getCarrierData(arrivals)}>
              <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
              <XAxis dataKey="carrier" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="count" fill="#82ca9d" name="Cantidad" />
            </BarChart>
          </ResponsiveContainer>
        </ChartWrapper>
      </ChartsContainer>
    </Container>
  );
}

/* ============================
   Estilos con styled-components
   ============================ */
const Container = styled.div`
  padding: 2rem;
  background-color: #f4f7fa;
  min-height: 100vh;
`;

const Header = styled.div`
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 2rem;
`;

const Title = styled.h1`
  color: #333;
  font-size: 2rem;
  font-weight: bold;
`;

const FormContainer = styled.form`
  display: flex;
  gap: 0.5rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
`;

const Input = styled.input`
  padding: 0.5rem;
  border-radius: 0.5rem;
  border: 1px solid #ccc;
  flex: 1 1 200px;
`;

const InputSmall = styled(Input)`
  width: 100%;
  flex: unset;
  margin-bottom: 0.5rem;
`;

const SubmitButton = styled.button`
  background-color: #4BBF73;
  color: #fff;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  &:hover {
    background-color: #3ea15e;
  }
`;

const TableContainer = styled.div`
  overflow-x: auto;
  margin-bottom: 2rem;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9rem;

  th, td {
    border: 1px solid #ddd;
    padding: 0.75rem;
    text-align: left;
  }

  th {
    background-color: #f0f0f0;
  }
`;

const ActionButton = styled.button<{ color: string }>`
  background-color: transparent;
  border: none;
  color: ${(props) => props.color};
  cursor: pointer;
  margin-right: 0.5rem;
  font-size: 1rem;
`;

const ChartsContainer = styled.div`
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const ChartWrapper = styled.div`
  background-color: #fff;
  flex: 1 1 400px;
  padding: 1rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
`;

const ChartTitle = styled.h2`
  font-size: 1.2rem;
  color: #333;
  margin-bottom: 1rem;
`;



===== Archivo: src/app/(protected)/packing/page.tsx =====
"use client";

import React, { useState, ChangeEvent, FormEvent } from "react";
import styled from "styled-components";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Tooltip,
  Legend,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Bar,
  Cell,
} from "recharts";
import { FaBoxes, FaEdit, FaTrash, FaSave, FaTimes } from "react-icons/fa";

// Interfaz para Packing
interface Packing {
  id: number;
  packingId: string;
  product: string;
  quantity: number;
  packingDate: string;
  status: string;
}

// Datos demo iniciales
const initialPackings: Packing[] = [
  {
    id: 1,
    packingId: "PKG-001",
    product: "Producto A",
    quantity: 100,
    packingDate: "2025-04-14T08:30:00",
    status: "Completed",
  },
  {
    id: 2,
    packingId: "PKG-002",
    product: "Producto B",
    quantity: 50,
    packingDate: "2025-04-15T09:00:00",
    status: "Pending",
  },
  {
    id: 3,
    packingId: "PKG-003",
    product: "Producto C",
    quantity: 75,
    packingDate: "2025-04-15T10:15:00",
    status: "In Progress",
  },
  {
    id: 4,
    packingId: "PKG-004",
    product: "Producto D",
    quantity: 200,
    packingDate: "2025-04-16T11:45:00",
    status: "Completed",
  },
  {
    id: 5,
    packingId: "PKG-005",
    product: "Producto E",
    quantity: 120,
    packingDate: "2025-04-16T14:30:00",
    status: "Pending",
  },
  {
    id: 6,
    packingId: "PKG-006",
    product: "Producto F",
    quantity: 30,
    packingDate: "2025-04-17T09:20:00",
    status: "In Progress",
  },
  {
    id: 7,
    packingId: "PKG-007",
    product: "Producto G",
    quantity: 60,
    packingDate: "2025-04-17T15:00:00",
    status: "Completed",
  },
  {
    id: 8,
    packingId: "PKG-008",
    product: "Producto H",
    quantity: 90,
    packingDate: "2025-04-18T10:00:00",
    status: "Pending",
  },
];

// Colores para el gráfico de pastel
const pieColors = ["#4BBF73", "#F9A826", "#FF5757"];

// Preparamos la data para el gráfico de pastel (distribución de estados)
const getStatusData = (packings: Packing[]) => [
  { name: "Completed", value: packings.filter((p) => p.status === "Completed").length },
  { name: "Pending", value: packings.filter((p) => p.status === "Pending").length },
  { name: "In Progress", value: packings.filter((p) => p.status === "In Progress").length },
];

export default function PackingPage() {
  // Estado que mantiene todos los packings (simulando data del backend)
  const [packings, setPackings] = useState<Packing[]>(initialPackings);

  // Estado para el formulario de adición de un nuevo packing
  const [newPacking, setNewPacking] = useState<Omit<Packing, "id">>({
    packingId: "",
    product: "",
    quantity: 0,
    packingDate: "",
    status: "",
  });

  // Estado para controlar la edición: almacena el ID del packing en edición y sus datos temporales
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editPacking, setEditPacking] = useState<Omit<Packing, "id">>({
    packingId: "",
    product: "",
    quantity: 0,
    packingDate: "",
    status: "",
  });

  // Maneja cambios en el formulario de nuevo packing
  const handleNewInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewPacking({
      ...newPacking,
      // Para quantity, convertimos a número
      [name]: name === "quantity" ? Number(value) : value,
    });
  };

  // Agrega un nuevo packing
  const handleAddPacking = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const newId = packings.length > 0 ? Math.max(...packings.map((p) => p.id)) + 1 : 1;
    const packingToAdd = { id: newId, ...newPacking };
    setPackings([...packings, packingToAdd]);
    setNewPacking({ packingId: "", product: "", quantity: 0, packingDate: "", status: "" });
  };

  // Inicia la edición de un packing
  const handleEditClick = (packing: Packing) => {
    setEditingId(packing.id);
    setEditPacking({
      packingId: packing.packingId,
      product: packing.product,
      quantity: packing.quantity,
      packingDate: packing.packingDate,
      status: packing.status,
    });
  };

  // Maneja cambios en el formulario de edición
  const handleEditInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditPacking({
      ...editPacking,
      [name]: name === "quantity" ? Number(value) : value,
    });
  };

  // Guarda los cambios de edición
  const handleSaveEdit = (id: number) => {
    const updatedPackings = packings.map((p) =>
      p.id === id ? { id, ...editPacking } : p
    );
    setPackings(updatedPackings);
    setEditingId(null);
  };

  // Cancela la edición
  const handleCancelEdit = () => {
    setEditingId(null);
  };

  // Borra un packing por ID
  const handleDelete = (id: number) => {
    const updatedPackings = packings.filter((p) => p.id !== id);
    setPackings(updatedPackings);
  };

  return (
    <Container>
      {/* Header */}
      <Header>
        <FaBoxes size={40} color="#4BBF73" />
        <Title>Módulo Packing</Title>
      </Header>
      <Subtitle>Coordinación y seguimiento de packing</Subtitle>

      {/* Formulario para agregar nuevo packing */}
      <FormContainer onSubmit={handleAddPacking}>
        <Input
          name="packingId"
          placeholder="Packing ID"
          value={newPacking.packingId}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="product"
          placeholder="Producto"
          value={newPacking.product}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="number"
          name="quantity"
          placeholder="Cantidad"
          value={newPacking.quantity === 0 ? "" : newPacking.quantity}
          onChange={handleNewInputChange}
          required
        />
        <Input
          type="datetime-local"
          name="packingDate"
          value={newPacking.packingDate}
          onChange={handleNewInputChange}
          required
        />
        <Input
          name="status"
          placeholder="Estado"
          value={newPacking.status}
          onChange={handleNewInputChange}
          required
        />
        <SubmitButton type="submit">Agregar Packing</SubmitButton>
      </FormContainer>

      {/* Tarjetas resumen */}
      <CardContainer>
        <Card>
          <CardTitle>Total Packings</CardTitle>
          <CardValue>{packings.length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Completed</CardTitle>
          <CardValue>{packings.filter((p) => p.status === "Completed").length}</CardValue>
        </Card>
        <Card>
          <CardTitle>Pending</CardTitle>
          <CardValue>{packings.filter((p) => p.status === "Pending").length}</CardValue>
        </Card>
        <Card>
          <CardTitle>In Progress</CardTitle>
          <CardValue>{packings.filter((p) => p.status === "In Progress").length}</CardValue>
        </Card>
      </CardContainer>

      {/* Tabla con opciones para editar y borrar */}
      <TableContainer>
        <Table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Packing ID</th>
              <th>Producto</th>
              <th>Cantidad</th>
              <th>Fecha de Packing</th>
              <th>Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {packings.map((packing) => (
              <tr key={packing.id}>
                <td>{packing.id}</td>
                <td>
                  {editingId === packing.id ? (
                    <InputSmall
                      name="packingId"
                      value={editPacking.packingId}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    packing.packingId
                  )}
                </td>
                <td>
                  {editingId === packing.id ? (
                    <InputSmall
                      name="product"
                      value={editPacking.product}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    packing.product
                  )}
                </td>
                <td>
                  {editingId === packing.id ? (
                    <InputSmall
                      type="number"
                      name="quantity"
                      value={editPacking.quantity === 0 ? "" : editPacking.quantity}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    packing.quantity
                  )}
                </td>
                <td>
                  {editingId === packing.id ? (
                    <InputSmall
                      type="datetime-local"
                      name="packingDate"
                      value={editPacking.packingDate}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    new Date(packing.packingDate).toLocaleString()
                  )}
                </td>
                <td>
                  {editingId === packing.id ? (
                    <InputSmall
                      name="status"
                      value={editPacking.status}
                      onChange={handleEditInputChange}
                      required
                    />
                  ) : (
                    packing.status
                  )}
                </td>
                <td>
                  {editingId === packing.id ? (
                    <>
                      <ActionButton onClick={() => handleSaveEdit(packing.id)} color="#4BBF73">
                        <FaSave />
                      </ActionButton>
                      <ActionButton onClick={handleCancelEdit} color="#FF5757">
                        <FaTimes />
                      </ActionButton>
                    </>
                  ) : (
                    <>
                      <ActionButton onClick={() => handleEditClick(packing)} color="#F9A826">
                        <FaEdit />
                      </ActionButton>
                      <ActionButton onClick={() => handleDelete(packing.id)} color="#FF5757">
                        <FaTrash />
                      </ActionButton>
                    </>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </TableContainer>

      {/* Gráficos con colores vibrantes */}
      <ChartsContainer>
        {/* Pie Chart: Distribución de estados */}
        <ChartWrapper>
          <ChartTitle>Distribución por Estado</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie dataKey="value" data={getStatusData(packings)} cx="50%" cy="50%" outerRadius={80} label>
                {getStatusData(packings).map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </ChartWrapper>
        {/* Bar Chart: Cantidad por Producto */}
        <ChartWrapper>
          <ChartTitle>Cantidad por Producto</ChartTitle>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={packings}>
              <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
              <XAxis dataKey="product" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="quantity" fill="#82ca9d" name="Cantidad" />
            </BarChart>
          </ResponsiveContainer>
        </ChartWrapper>
      </ChartsContainer>
    </Container>
  );
}

/* ============================
   Estilos con styled-components
   ============================ */
const Container = styled.div`
  padding: 2rem;
  background-color: #f4f7fa;
  min-height: 100vh;
`;

const Header = styled.div`
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
`;

const Title = styled.h1`
  color: #333;
  font-size: 2rem;
  font-weight: bold;
`;

const Subtitle = styled.p`
  color: #555;
  font-size: 1.2rem;
  margin-bottom: 2rem;
`;

const FormContainer = styled.form`
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const Input = styled.input`
  padding: 0.5rem;
  border-radius: 0.5rem;
  border: 1px solid #ccc;
  flex: 1 1 150px;
`;

const InputSmall = styled(Input)`
  width: 100%;
  flex: unset;
  margin-bottom: 0.5rem;
`;

const SubmitButton = styled.button`
  background-color: #4BBF73;
  color: #fff;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  cursor: pointer;
`;

const CardContainer = styled.div`
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const Card = styled.div`
  background-color: #fff;
  padding: 1rem 1.5rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  flex: 1 1 180px;
  text-align: center;
`;

const CardTitle = styled.p`
  margin: 0;
  font-size: 1rem;
  color: #777;
`;

const CardValue = styled.p`
  margin: 0.5rem 0 0;
  font-size: 1.5rem;
  font-weight: bold;
  color: #333;
`;

const TableContainer = styled.div`
  overflow-x: auto;
  margin-bottom: 2rem;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9rem;

  th, td {
    border: 1px solid #ddd;
    padding: 0.75rem;
    text-align: left;
  }

  th {
    background-color: #f0f0f0;
  }
`;

const ActionButton = styled.button<{ color: string }>`
  background-color: transparent;
  border: none;
  color: ${(props) => props.color};
  cursor: pointer;
  margin-right: 0.5rem;
  font-size: 1rem;
`;

const ChartsContainer = styled.div`
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  margin-bottom: 2rem;
`;

const ChartWrapper = styled.div`
  background-color: #fff;
  flex: 1 1 400px;
  padding: 1rem;
  border-radius: 0.75rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
`;

const ChartTitle = styled.h2`
  font-size: 1.2rem;
  color: #333;
  margin-bottom: 1rem;
`;



===== Archivo: src/app/loading.tsx =====
// src/app/loading.tsx
'use client';

import React, { useEffect, useState } from 'react';
import Loading from '@/components/Loading/Loading';

export default function LoadingFallback({ children }: { children: React.ReactNode }) {
  const [mounted, setMounted] = useState(false);
  const [showSplash, setShowSplash] = useState(true);

  useEffect(() => {
    setMounted(true);
    // Duración del splash: 10 segundos (ajustable)
    const timer = setTimeout(() => {
      setShowSplash(false);
    }, 10000);
    return () => clearTimeout(timer);
  }, []);

  if (!mounted || showSplash) {
    return <Loading />;
  }

  return <>{children}</>;
}



===== Archivo: src/app/ClientSplash.tsx =====
'use client';

import React, { useState, useEffect } from "react";
import Loading from "@/components/Loading/Loading";

export default function ClientSplash({
  children,
}: {
  children: React.ReactNode;
}) {
  const [mounted, setMounted] = useState(false);
  const [showSplash, setShowSplash] = useState(true);

  useEffect(() => {
    setMounted(true);
    const timer = setTimeout(() => {
      setShowSplash(false);
    }, 1000); // Ajusta el tiempo del splash según lo necesites
    return () => clearTimeout(timer);
  }, []);

  if (!mounted || showSplash) {
    return <Loading />;
  }

  return <>{children}</>;
}



===== Archivo: src/components/Sidebar/Sidebar.tsx =====
"use client";

import React from "react";
import {
  Drawer,
  ListItemButton,
  ListItemText,
  Button,
  Box,
} from "@mui/material";
import ExitToAppIcon from "@mui/icons-material/ExitToApp";
import { useRouter, usePathname } from "next/navigation";
import { sidebarItems } from "@/config/sidebarItems";

const headerHeight = 60;

// Mapeo entre el label del ítem y el archivo del logo
const sidebarLogos: Record<string, string> = {
};

export interface SidebarProps {
  open: boolean;
  onLogout: () => void;
}

export const Sidebar: React.FC<SidebarProps> = ({ open, onLogout }) => {
  const router = useRouter();
  const pathname = usePathname();

  // Función que mapea el label a la ruta
  const getPath = (label: string) => {
    return label.toLowerCase() === "home"
      ? "/dashboard"
      : `/${label.toLowerCase()}`;
  };

  const handleNavigate = (label: string) => {
    router.push(getPath(label));
  };

  const handleLogout = () => {
    localStorage.removeItem("user");
    onLogout();
    router.push("/auth/login");
  };

  return (
    <Drawer
      variant="persistent"
      open={open}
      sx={{
        width: open ? 200 : 0,
        flexShrink: 0,
        "& .MuiDrawer-paper": (theme: any) => ({
  width: open ? 200 : 0,
  overflowX: "hidden",
  transition: "width 0.3s ease",
  backgroundColor: "#fff",
  borderRight: "1px solid rgba(0,0,0,0.1)",
  fontFamily: "Nunito Sans",
  color: "#757575",
}),

      }}
    >
      {/* Espacio para compensar la altura del header */}
      <Box sx={{ height: headerHeight }} />

      {/* Encabezado: Logo de Apolo */}
      {open && (
        <Box sx={{ textAlign: "center", p: 2 }}>
          <img
            alt="Logo Apolo"
            style={{ width: 100, height: "auto" }}
          />
        </Box>
      )}

      {/* Contenido del sidebar */}
      <Box sx={{ flexGrow: 1, display: "flex", flexDirection: "column" }}>
        {/* Lista de ítems */}
        {sidebarItems.map((item) => {
          const itemPath = getPath(item.label);
          const active = pathname === itemPath;

          return (
            <ListItemButton
              key={item.label}
              onClick={() => handleNavigate(item.label)}
              sx={{
                "&:hover": { backgroundColor: "rgba(0,0,0,0.05)" },
                backgroundColor: active ? "rgba(0, 0, 255, 0.1)" : "inherit",
                justifyContent: open ? "initial" : "center",
                px: open ? 2 : 0,
              }}
            >
              {/* Logo del ítem con estilo condicional */}
              <img
                src={`/logos/${sidebarLogos[item.label]}`}
                alt={`${item.label} logo`}
                style={{
                  width: 32,
                  height: 32,
                  borderRadius: 4,
                  filter: active
                    ? "invert(27%) sepia(85%) saturate(620%) hue-rotate(190deg) brightness(96%) contrast(92%)"
                    : "none",
                }}
              />
              {open && (
                <ListItemText
                  primary={item.label}
                  sx={{
                    ml: 2,
                    "& .MuiTypography-root": {
                      fontWeight: "bold",
                      fontFamily: "Nunito Sans",
                      color: "#757575",
                    },
                  }}
                />
              )}
            </ListItemButton>
          );
        })}
        <Box sx={{ flexGrow: 1 }} />

        {/* Botón de Cerrar sesión */}
        {open && (
          <Box sx={{ p: 2, borderTop: "1px solid rgba(0,0,0,0.1)" }}>
            <Button
              variant="outlined"
              color="error"
              fullWidth
              onClick={handleLogout}
              startIcon={<ExitToAppIcon />}
              sx={{
                fontWeight: "bold",
                fontFamily: "Nunito Sans",
                // Aseguramos que el texto del botón tenga un tono gris similar
                color: "#757575",
              }}
            >
              Cerrar sesión
            </Button>
          </Box>
        )}
      </Box>
    </Drawer>
  );
};

export default Sidebar;



===== Archivo: src/components/Card/FlipCard.tsx =====
"use client";
import React from "react";
import styled from "styled-components";

// Contenedor de la tarjeta con perspectiva
const CardWrapper = styled.div`
  width: 300px;
  height: 250px;
  perspective: 1000px;
`;

// Contenedor interno que realiza el flip
const Content = styled.div`
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d;
  transition: transform 0.6s cubic-bezier(0.455, 0.03, 0.515, 0.955);
  will-change: transform;
  border-radius: 5px;
  box-shadow: 0px 0px 10px 1px #000000ee;
  transform: translateZ(0);
  &:hover {
    transform: rotateY(180deg);
  }
`;

// Estilo base para las dos caras de la tarjeta
const Face = styled.div`
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  border-radius: 5px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 10px;
  will-change: transform;
  transform: translateZ(0);
`;

// Parte frontal: el fondo se genera a partir del theme y se fuerza texto blanco y en negrita
const Front = styled(Face)`
  background: ${({ theme }) =>
    `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`};
  color: #fff;
  & * {
    font-weight: bold;
    color: #fff;
  }
`;

// Propiedad transient para la imagen de fondo
interface BackProps {
  $backgroundUrl: string;
}
const Back = styled(Face)<BackProps>`
  background: ${({ theme, $backgroundUrl }) =>
    `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${$backgroundUrl}) no-repeat center center`};
  background-size: cover;
  color: #fff;
  transform: rotateY(180deg);
  position: relative;
`;

// Contenedor para el ícono (o logo)
const IconContainer = styled.div`
  font-size: 48px;
  margin-bottom: 10px;
  img {
    width: 50px;
    height: auto;
  }
`;

// Etiqueta para el título: texto blanco y negrita
const TitleBadge = styled.div`
  background-color: rgba(0, 0, 0, 0.3);
  padding: 4px 12px;
  border-radius: 10px;
  margin-bottom: 10px;
  text-transform: uppercase;
  color: #fff;
  font-weight: bold;
`;

// Texto en la parte trasera: forzamos texto blanco y en negrita
const BackText = styled.p`
  text-align: center;
  font-size: 14px;
  margin: 0;
  color: #fff;
  font-weight: bold;
`;

interface FlipCardProps {
  title: string;
  description: string;
  imageName: string;
  logoName: string;
  frontIcon?: React.ReactNode;
}

const FlipCard: React.FC<FlipCardProps> = ({
  title,
  description,
  imageName,
  logoName,
  frontIcon,
}) => {
  const backgroundUrl = `/images/${imageName}`;
  const logoUrl = `/logos/${logoName}`;

  return (
    <CardWrapper>
      <Content>
        <Front>
          <IconContainer>
            {frontIcon ? frontIcon : <img src={logoUrl} alt={`${title} logo`} />}
          </IconContainer>
          <TitleBadge>{title}</TitleBadge>
        </Front>
        <Back $backgroundUrl={backgroundUrl}>
          <BackText>{description}</BackText>
        </Back>
      </Content>
    </CardWrapper>
  );
};

export default FlipCard;



===== Archivo: src/components/Loading/Loading.tsx =====
'use client';

import React from 'react';
import styles from './Loading.module.css';

const Loading = () => {
  return (
    <div className={styles.loader}>
      <div className={styles.content}>
        <p className={styles.loadingText}>CARGANDO APOLOWARE</p>
      </div>
    </div>
  );
};

export default Loading;



===== Archivo: src/components/ClientProviders.tsx =====
'use client';

import React from 'react';
import { Provider } from 'react-redux';
import { store } from '../store';
import { ThemeProvider as MuiThemeProvider } from '@mui/material/styles';
import { ThemeProvider as StyledThemeProvider } from 'styled-components';
import { AuthProvider } from '@/context/AuthContext';
import Notification from '../components/Notification/Notification';
import { ThemeProviderClient, useThemeContext } from '@/components/ThemeContext';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

interface ClientProvidersProps {
  children: React.ReactNode;
}

export default function ClientProviders({ children }: ClientProvidersProps) {
  return (
    <Provider store={store}>
      <AuthProvider>
        <ThemeProviderClient>
          <InnerProviders>{children}</InnerProviders>
        </ThemeProviderClient>
      </AuthProvider>
    </Provider>
  );
}

function InnerProviders({ children }: { children: React.ReactNode }) {
  const { theme } = useThemeContext();
  return (
    <MuiThemeProvider theme={theme}>
      <StyledThemeProvider theme={theme}>
        <ToastContainer position="top-right" autoClose={5000} />
        <Notification />
        {children}
      </StyledThemeProvider>
    </MuiThemeProvider>
  );
}



===== Archivo: src/components/Chat/CallModal.tsx =====
"use client";

import React, { useEffect, useRef, useState } from "react";
import styled from "styled-components";

interface User {
  id: number;
  name: string;
  isOnline: boolean;
  avatar: string;
}

type CallType = "audio" | "video";
type CallState = "calling" | "in-progress" | "ended";

interface CallModalProps {
  callType: CallType;
  user: User | null;
  onClose: () => void;
}

export default function CallModal({ callType, user, onClose }: CallModalProps) {
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [callState, setCallState] = useState<CallState>("calling");
  const [isMuted, setIsMuted] = useState(false);
  const [isVideoOn, setIsVideoOn] = useState(true);

  const localVideoRef = useRef<HTMLVideoElement>(null);
  const ringAudioRef = useRef<HTMLAudioElement | null>(null);

  useEffect(() => {
    let localStream: MediaStream;
    async function startCall() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({
          video: callType === "video",
          audio: true,
        });
        setStream(localStream);

        if (callType === "video" && localVideoRef.current) {
          localVideoRef.current.srcObject = localStream;
          // Intentar reproducir (puede requerir interacción)
          localVideoRef.current.play().catch((err) => {
            console.log("Auto-play blocked:", err);
          });
        }
      } catch (error) {
        console.error("Error al acceder a la cámara/micrófono:", error);
      }
    }
    startCall();

    // Ringtone en "calling"
    if (callState === "calling") {
      ringAudioRef.current = new Audio("/sounds/ringtone.mp3");
      ringAudioRef.current.loop = true;
      ringAudioRef.current.play().catch((err) => {
        console.log("Auto-play blocked:", err);
      });
    }

    return () => {
      if (localStream) {
        localStream.getTracks().forEach((track) => track.stop());
      }
      if (ringAudioRef.current) {
        ringAudioRef.current.pause();
        ringAudioRef.current = null;
      }
    };
  }, [callType, callState]);

  const handleSimulateAnswer = () => {
    setCallState("in-progress");
    if (ringAudioRef.current) {
      ringAudioRef.current.pause();
      ringAudioRef.current = null;
    }
    if (callType === "video" && localVideoRef.current) {
      localVideoRef.current.play().catch((err) => {
        console.log("Auto-play blocked on answer:", err);
      });
    }
  };

  const handleHangUp = () => {
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
    }
    if (ringAudioRef.current) {
      ringAudioRef.current.pause();
      ringAudioRef.current = null;
    }
    onClose();
  };

  const toggleMute = () => {
    setIsMuted((prev) => !prev);
    if (stream) {
      stream.getAudioTracks().forEach((track) => (track.enabled = !track.enabled));
    }
  };

  const toggleVideo = () => {
    setIsVideoOn((prev) => !prev);
    if (stream) {
      stream.getVideoTracks().forEach((track) => (track.enabled = !track.enabled));
    }
  };

  return (
    <ModalOverlay>
      <ModalContainer>
        <CallHeader>
          <CallTitle>
            {callType === "video" ? "Videollamada" : "Llamada de Voz"}
          </CallTitle>
          <CallStatus>
            {callState === "calling"
              ? `Llamando a ${user?.name || "Usuario"}...`
              : `En llamada con ${user?.name || "Usuario"}`}
          </CallStatus>
        </CallHeader>
        <CallBody>
          {callType === "video" && callState === "in-progress" ? (
            <>
              <RemoteVideoArea>
                {/* El “remoto” se simula con el avatar */}
              </RemoteVideoArea>
              <SelfVideoArea>
                <SelfVideo ref={localVideoRef} autoPlay playsInline muted />
              </SelfVideoArea>
            </>
          ) : callType === "video" && callState === "calling" ? (
            <WaitingMessage>
              <p>Esperando que {user?.name || "Usuario"} conteste...</p>
              <SimulateAnswerButton onClick={handleSimulateAnswer}>
                Simular Contestación
              </SimulateAnswerButton>
            </WaitingMessage>
          ) : (
            <AudioCallMessage>
              <p>Llamada de voz en progreso con {user?.name || "Usuario"}</p>
            </AudioCallMessage>
          )}
        </CallBody>
        <CallControls>
          <ControlButton onClick={toggleMute}>
            {isMuted ? "🔇" : "🎤"}
          </ControlButton>
          {callType === "video" && (
            <ControlButton onClick={toggleVideo}>
              {isVideoOn ? "📹" : "📷"}
            </ControlButton>
          )}
          <HangUpButton onClick={handleHangUp}>❌</HangUpButton>
        </CallControls>
      </ModalContainer>
    </ModalOverlay>
  );
}

/* ---------- Styled Components Ajustados ---------- */

const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  /* Que ocupe toda la pantalla, y permita scroll si es muy grande */
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.85);
  z-index: 3000;
  display: flex;
  align-items: center;
  justify-content: center;
  /* Permitir scroll en pantallas pequeñas */
  overflow-y: auto;
`;

const ModalContainer = styled.div`
  background: #1a1a1a;
  border-radius: 12px;
  /* Ajustes de tamaño para que no se corte */
  width: 90%;
  max-width: 1000px;
  height: 90%;
  max-height: 90%;
  display: flex;
  flex-direction: column;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
  /* Permite que si en pantallas pequeñas no cabe, se muestre scroll interno */
  overflow: hidden;
`;

const CallHeader = styled.div`
  padding: 1rem 2rem;
  background: #2c2c2c;
  border-bottom: 1px solid #444;
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const CallTitle = styled.h3`
  margin: 0;
  font-size: 1.8rem;
  color: #fff;
  font-weight: bold;
`;

const CallStatus = styled.span`
  margin-top: 0.5rem;
  font-size: 1rem;
  color: #ccc;
`;

const CallBody = styled.div`
  flex: 1;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #000;
  /* Si en pantallas muy chicas no cabe, se vería scroll.
     Normalmente lo evitamos para no cortar video. */
  overflow: hidden;
`;

const RemoteVideoArea = styled.div`
  width: 100%;
  height: 100%;
  position: relative;
`;

const RemoteVideo = styled.img`
  width: 100%;
  height: 100%;
  /* object-fit: contain para no recortar nada de la imagen remota */
  object-fit: contain;
  background: #000; /* relleno si sobra espacio */
`;

const SelfVideoArea = styled.div`
  position: absolute;
  bottom: 16px;
  right: 16px;
  width: 240px;
  height: 160px;
  border: 2px solid #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
`;

const SelfVideo = styled.video`
  width: 100%;
  height: 100%;
  /* Usar contain para no cortar tu video */
  object-fit: contain;
  background: #000;
`;

const WaitingMessage = styled.div`
  color: #fff;
  font-size: 1.2rem;
  text-align: center;
`;

const SimulateAnswerButton = styled.button`
  margin-top: 1rem;
  background: #59d3a5;
  color: #fff;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.2s;
  &:hover {
    background: #45b48b;
  }
`;

const AudioCallMessage = styled.div`
  color: #fff;
  font-size: 1.5rem;
`;

const CallControls = styled.div`
  padding: 1rem;
  background: #2c2c2c;
  border-top: 1px solid #444;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1.5rem;
`;

const ControlButton = styled.button`
  background: #444;
  border: none;
  border-radius: 50%;
  width: 56px;
  height: 56px;
  font-size: 1.5rem;
  color: #fff;
  cursor: pointer;
  transition: background 0.2s, transform 0.2s;
  &:hover {
    background: #555;
    transform: scale(1.1);
  }
`;

const HangUpButton = styled(ControlButton)`
  background: #e74c3c;
  &:hover {
    background: #c0392b;
  }
`;



===== Archivo: src/components/container.tsx =====
import { forwardRef } from "react";
import { cn } from "@/lib/utils";

const Container = forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(function Container({ className, children, ...props }, ref) {
  return (
    <div
      ref={ref}
      className={cn("max-w-8xl mx-auto w-full px-6 tablet:px-10 desktop:px-14", className)}
      {...props}
    >
      {children}
    </div>
  );
});

export default Container;



===== Archivo: src/components/Auth/LoginForm.tsx =====
// src/components/Auth/LoginForm.tsx
import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { fakeLogin } from "../../lib/auth";
import { 
  Form, 
  InputGroup, 
  IconHolder, 
  Input, 
  CheckRow, 
  ErrorMessage, 
  PrimaryButton, 
  SecondaryText,
  SocialRow,
  SocialButton 
} from "./AuthStyles";

interface LoginFormProps {
  onSwitch: () => void;
}

const LoginForm: React.FC<LoginFormProps> = ({ onSwitch }) => {
  const router = useRouter();
  const [loginUsername, setLoginUsername] = useState("");
  const [loginPassword, setLoginPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [loginError, setLoginError] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoginError("");
    try {
      await fakeLogin(loginUsername, loginPassword);
      router.push("/dashboard");
    } catch (err: any) {
      setLoginError(err.message || "Error al iniciar sesión");
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <InputGroup>
        <IconHolder>
          <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
            <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3Z" />
          </svg>
        </IconHolder>
        <Input 
          type="text" 
          placeholder="Username" 
          value={loginUsername} 
          onChange={(e) => setLoginUsername(e.target.value)}
          required 
        />
      </InputGroup>
      <InputGroup>
        <IconHolder>
          <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
            <path d="M8 4a3 3 0 0 0-3 3v1H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1V7a3 3 0 0 0-3-3z" />
          </svg>
        </IconHolder>
        <Input 
          type="password" 
          placeholder="Password" 
          value={loginPassword} 
          onChange={(e) => setLoginPassword(e.target.value)}
          required 
        />
      </InputGroup>
      <CheckRow>
        <label>
          <input 
            type="checkbox"
            checked={rememberMe}
            onChange={() => setRememberMe(!rememberMe)}
          />
          <span>Remember me</span>
        </label>
        <span>Forgot password?</span>
      </CheckRow>
      {loginError && <ErrorMessage>{loginError}</ErrorMessage>}
      <PrimaryButton type="submit">Login</PrimaryButton>
      <SecondaryText>
        Don’t have an account? <span onClick={onSwitch}>Sign Up</span>
      </SecondaryText>
      <div>Or with</div>
      <SocialRow>
        <SocialButton>option1</SocialButton>
        <SocialButton>option2</SocialButton>
      </SocialRow>
    </Form>
  );
};

export default LoginForm;



===== Archivo: src/components/Auth/RegisterForm.tsx =====
// src/components/Auth/RegisterForm.tsx
import React, { useState } from "react";
import { fakeRegister } from "../../lib/auth";
import { 
  Form, 
  InputGroup, 
  IconHolder, 
  Input, 
  ErrorMessage,
  PrimaryButton,
  SecondaryBtn,
  ButtonsRow
} from "./AuthStyles";

interface RegisterFormProps {
  onSwitch: () => void;
}

const RegisterForm: React.FC<RegisterFormProps> = ({ onSwitch }) => {
  const [regUsername, setRegUsername] = useState("");
  const [regEmail, setRegEmail] = useState("");
  const [regPassword, setRegPassword] = useState("");
  const [regConfirm, setRegConfirm] = useState("");
  const [regError, setRegError] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setRegError("");
    if (regPassword !== regConfirm) {
      setRegError("Las contraseñas no coinciden");
      return;
    }
    try {
      await fakeRegister(regUsername, regEmail, regPassword);
      onSwitch(); // Vuelve al formulario de login
    } catch (err: any) {
      setRegError(err.message || "Error al registrarse");
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <InputGroup>
        <IconHolder>
          <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
            <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3Z" />
          </svg>
        </IconHolder>
        <Input
          type="text"
          placeholder="Username"
          value={regUsername}
          onChange={(e) => setRegUsername(e.target.value)}
          required
        />
      </InputGroup>
      <InputGroup>
        <IconHolder>
          <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
            <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-.5a.5.5 0 0 0-.5.5v.217l6 3.6 6-3.6V4a.5.5 0 0 0-.5-.5H2zm12 2.383-5.28 3.168a.5.5 0 0 1-.44 0L3 5.883V12a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5V5.883z" />
          </svg>
        </IconHolder>
        <Input
          type="email"
          placeholder="Email"
          value={regEmail}
          onChange={(e) => setRegEmail(e.target.value)}
          required
        />
      </InputGroup>
      <InputGroup>
        <IconHolder>
          <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
            <path d="M8 4a3 3 0 0 0-3 3v1H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1V7a3 3 0 0 0-3-3z" />
          </svg>
        </IconHolder>
        <Input
          type="password"
          placeholder="Password"
          value={regPassword}
          onChange={(e) => setRegPassword(e.target.value)}
          required
        />
      </InputGroup>
      <InputGroup>
        <IconHolder>
          <svg width="16" height="16" fill="#999" viewBox="0 0 16 16">
            <path d="M8 4a3 3 0 0 0-3 3v1H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1V7a3 3 0 0 0-3-3z" />
          </svg>
        </IconHolder>
        <Input
          type="password"
          placeholder="Confirm Password"
          value={regConfirm}
          onChange={(e) => setRegConfirm(e.target.value)}
          required
        />
      </InputGroup>
      {regError && <ErrorMessage>{regError}</ErrorMessage>}
      <ButtonsRow>
        <PrimaryButton type="submit">Sign Up</PrimaryButton>
        <SecondaryBtn type="button" onClick={onSwitch}>
          Login
        </SecondaryBtn>
      </ButtonsRow>
    </Form>
  );
};

export default RegisterForm;



===== Archivo: src/components/Auth/ToggleSwitch.tsx =====
import React from "react";
import "./ToggleSwitch.css"; // Asegúrate de que la ruta sea correcta

type ToggleSwitchProps = {
  checked: boolean;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
};

const ToggleSwitch: React.FC<ToggleSwitchProps> = ({ checked, onChange }) => {
  return (
    <div style={{ transform: "scale(0.5)", margin: "0 auto" }}>
      <label>
        <input className="slider" type="checkbox" checked={checked} onChange={onChange} />
        <div className="switch">
          <div className="suns"></div>
          <div className="moons">
            <div className="star star-1"></div>
            <div className="star star-2"></div>
            <div className="star star-3"></div>
            <div className="star star-4"></div>
            <div className="star star-5"></div>
            <div className="first-moon"></div>
          </div>
          <div className="sand"></div>
          <div className="bb8">
            <div className="antennas">
              <div className="antenna short"></div>
              <div className="antenna long"></div>
            </div>
            <div className="head">
              <div className="stripe one"></div>
              <div className="stripe two"></div>
              <div className="eyes">
                <div className="eye one"></div>
                <div className="eye two"></div>
              </div>
              <div className="stripe detail">
                <div className="detail zero"></div>
                <div className="detail zero"></div>
                <div className="detail one"></div>
                <div className="detail two"></div>
                <div className="detail three"></div>
                <div className="detail four"></div>
                <div className="detail five"></div>
                <div className="detail five"></div>
              </div>
              <div className="stripe three"></div>
            </div>
            <div className="ball">
              <div className="lines one"></div>
              <div className="lines two"></div>
              <div className="ring one"></div>
              <div className="ring two"></div>
              <div className="ring three"></div>
            </div>
            <div className="shadow"></div>
          </div>
        </div>
      </label>
    </div>
  );
};

export default ToggleSwitch;



===== Archivo: src/components/Auth/AuthFlipCard.tsx =====
// src/components/Auth/AuthFlipCard.tsx
import React, { useState } from "react";
import styled from "styled-components";
import AnimatedLogo from "./AnimatedLogo";
import LoginForm from "./LoginForm";
import RegisterForm from "./RegisterForm";

const FlipContainer = styled.div`
  position: relative;
  width: 340px;
  height: 480px;
  perspective: 1000px;
`;

const FlipInner = styled.div<{ flipped: boolean }>`
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.8s cubic-bezier(0.45, 0.05, 0.55, 0.95);
  transform-style: preserve-3d;
  transform: ${(props) => (props.flipped ? "rotateY(180deg)" : "none")};
`;

const Side = styled.div`
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
`;

const CardShape = styled.div`
  width: 100%;
  height: 100%;
  padding: 2rem;
  background: #fff;
  border-radius: 0 50px 50px 0;
  box-shadow: 0 6px 18px rgba(0,0,0,0.15);
`;

const AuthFlipCard: React.FC = () => {
  const [flipped, setFlipped] = useState(false);

  return (
    <div style={{ position: "relative" }}>
      <AnimatedLogo />
      <FlipContainer>
        <FlipInner flipped={flipped}>
          <Side>
            <CardShape>
              <LoginForm onSwitch={() => setFlipped(true)} />
            </CardShape>
          </Side>
          <Side style={{ transform: "rotateY(180deg)" }}>
            <CardShape>
              <RegisterForm onSwitch={() => setFlipped(false)} />
            </CardShape>
          </Side>
        </FlipInner>
      </FlipContainer>
    </div>
  );
};

export default AuthFlipCard;



===== Archivo: src/components/Auth/AnimatedLogo.tsx =====
// src/components/Auth/AnimatedLogo.tsx
import React, { useState, useEffect } from "react";
import styled from "styled-components";

const LogoContainer = styled.div`
  /* Puedes agregar estilos propios para el contenedor del logo */
`;

const AnimatedLogo: React.FC = () => {
  const [active, setActive] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setActive(true), 200);
    return () => clearTimeout(timer);
  }, []);

  return (
    <LogoContainer>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="375"
        height="375"
        viewBox="0 0 375 375"
        className={active ? "active" : ""}
      >
        {/* Aquí va el contenido completo de tu SVG */}
      </svg>
    </LogoContainer>
  );
};

export default AnimatedLogo;



===== Archivo: src/components/Notification/Notification.tsx =====
'use client';

import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const NotificationContainer = styled.div`
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  gap: 10px;
`;

const NotificationItem = styled.div<{ type: string }>`
  padding: 10px 20px;
  border-radius: 4px;
  background-color: ${({ type }) => {
    switch (type) {
      case 'error':
        return 'rgba(255, 0, 0, 0.8)';
      case 'warning':
        return 'rgba(255, 165, 0, 0.8)';
      case 'success':
        return 'rgba(0, 128, 0, 0.8)';
      default:
        return 'rgba(0, 0, 255, 0.8)';
    }
  }};
  color: #fff;
`;

interface NotificationType {
  message: string;
  type: string;
  timestamp: number;
}

const Notification: React.FC = () => {
  const [notifications, setNotifications] = useState<NotificationType[]>([]);
  const [isMounted, setIsMounted] = useState(false);

  // Este efecto se asegura de que el componente se renderice solo en cliente.
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // Ejemplo: se simula agregar una notificación de éxito a los 2 segundos.
  useEffect(() => {
    const timer = setTimeout(() => {
      const newNotif: NotificationType = {
        message: "Operación exitosa",
        type: "success",
        timestamp: new Date().getTime(),
      };
      setNotifications(prev => [...prev, newNotif]);
    }, 2000);
    return () => clearTimeout(timer);
  }, []);

  // Cada segundo se remueven las notificaciones que tengan más de 5 segundos.
  useEffect(() => {
    const interval = setInterval(() => {
      setNotifications(prev =>
        prev.filter(notif => new Date().getTime() - notif.timestamp < 5000)
      );
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  if (!isMounted) return null;

  return ReactDOM.createPortal(
    <NotificationContainer>
      {notifications.map((notif, index) => (
        <NotificationItem key={index} type={notif.type}>
          {notif.message}
        </NotificationItem>
      ))}
    </NotificationContainer>,
    document.body
  );
};

export default Notification;



===== Archivo: src/components/chart-blocks/CustomerSatisfication.tsx =====
"use client";

import { SmilePlus, ThumbsDown, ThumbsUp } from "lucide-react";
import { customerSatisfication, totalCustomers } from "@/data/customer-satisfication";
import ChartTitle from "./components/chart-title";
import LinearProgress from "./components/linear-progress";

const customerSatisficationOptions = [
  {
    label: "Positive",
    color: "#5fb67a",
    percentage: customerSatisfication.positive,
    icon: <ThumbsUp className="h-6 w-6" stroke="#5fb67a" fill="#5fb67a" />,
  },
  {
    label: "Neutral",
    color: "#f5c36e",
    percentage: customerSatisfication.neutral,
    icon: <ThumbsUp className="h-6 w-6" stroke="#f5c36e" fill="#f5c36e" />,
  },
  {
    label: "Negative",
    color: "#da6d67",
    percentage: customerSatisfication.negative,
    icon: <ThumbsDown className="h-6 w-6" stroke="#da6d67" fill="#da6d67" />,
  },
];

function TotalCustomers() {
  return (
    <div className="flex flex-col items-start justify-center">
      <div className="text-xs text-gray-500">Responses Received</div>
      <div className="text-2xl font-medium">{totalCustomers} Customers</div>
    </div>
  );
}

export default function CustomerSatisfication() {
  return (
    <section className="flex h-full flex-col gap-2">
      <ChartTitle title="Customer Satisfication" icon={<SmilePlus />} />
      <div className="my-4 flex h-full items-center justify-between">
        <div className="mx-auto grid w-full grid-cols-2 gap-6">
          <TotalCustomers />
          {customerSatisficationOptions.map((option) => (
            <LinearProgress
              key={option.label}
              label={option.label}
              color={option.color}
              percentage={option.percentage}
              icon={option.icon}
            />
          ))}
        </div>
      </div>
    </section>
  );
}



===== Archivo: src/components/chart-blocks/components/linear-progress.tsx =====
"use client";

import { VChart } from "@visactor/react-vchart";
import type { ILinearProgressChartSpec } from "@visactor/vchart";
import { numberToPercentage } from "@/lib/utils";

const getSpec = (label: string, color: string, percentage: number): ILinearProgressChartSpec => {
  return {
    type: "linearProgress",
    data: [
      {
        id: "id0",
        values: [
          { type: label, value: percentage },
        ],
      },
    ],
    direction: "horizontal",
    xField: "value",
    yField: "type",
    seriesField: "type",
    height: 10,
    cornerRadius: 10,
    progress: { style: { cornerRadius: 0 } },
    color: [color],
    bandWidth: 10,
    padding: 0,
    tooltip: {
      trigger: ["click", "hover"],
      mark: {
        title: { visible: false },
        content: [
          { key: label, value: (datum: any) => (datum ? `${numberToPercentage(percentage)}` : "") },
        ],
      },
    },
    axes: [
      {
        orient: "right",
        type: "band",
        domainLine: { visible: false },
        tick: { visible: false },
        label: { formatMethod: () => numberToPercentage(percentage) },
        maxWidth: "60%",
        width: 36,
      },
    ],
  };
};

export default function LinearProgress({
  label,
  color,
  percentage,
  icon,
}: {
  label: string;
  color: string;
  percentage: number;
  icon: React.ReactNode;
}) {
  return (
    <div>
      <div className="mb-1 flex items-center gap-x-2">
        {icon}
        <div>
          <div className="text-xs text-gray-500">{label}</div>
          <div className="text-xl font-medium">{numberToPercentage(percentage)}</div>
        </div>
      </div>
      <div className="relative">
        <VChart spec={getSpec(label, color, percentage)} />
      </div>
    </div>
  );
}



===== Archivo: src/components/chart-blocks/components/metric-card.tsx =====
import { ArrowDownRight, ArrowUpRight } from "lucide-react";
import { cn } from "@/lib/utils";

export default function MetricCard({
  title,
  value,
  change,
  className,
}: {
  title: string;
  value: number;
  change: number;
  className?: string;
}) {
  return (
    <section className={cn("flex flex-col", className)}>
      <h2 className="mb-1 text-sm text-gray-600">{title}</h2>
      <div className="flex items-center gap-2">
        <span className="text-xl font-medium">{value.toLocaleString()}</span>
        <ChangeIndicator change={change} />
      </div>
      <div className="text-xs text-gray-500">Compare to last month</div>
    </section>
  );
}

function ChangeIndicator({ change }: { change: number }) {
  return (
    <span
      className={cn(
        "flex items-center rounded-sm px-1 py-0.5 text-xs",
        change > 0 ? "bg-green-50 text-green-500" : "bg-red-50 text-red-500"
      )}
    >
      {change > 0 ? "+" : ""}
      {Math.round(change * 100)}%
      {change > 0 ? (
        <ArrowUpRight className="ml-0.5 h-3 w-3" />
      ) : (
        <ArrowDownRight className="ml-0.5 h-3 w-3" />
      )}
    </span>
  );
}



===== Archivo: src/components/chart-blocks/components/chart-title.tsx =====
"use client";

import { cn } from "@/lib/utils";
import { ReactNode } from "react";

export default function ChartTitle({
  title,
  icon,
  className,
}: {
  title: string;
  icon: ReactNode;
  className?: string;
}) {
  return (
    <div className={cn("flex items-center gap-2", className)}>
      {icon}
      <h2 className="text-lg font-medium">{title}</h2>
    </div>
  );
}



===== Archivo: src/components/chart-blocks/Metrics.tsx =====
import Container from "@/components/container";
import { metrics } from "@/data/metrics";
import MetricCard from "./components/metric-card";

export default function Metrics() {
  return (
    <Container className="grid grid-cols-1 gap-y-6 border-b border-gray-300 py-4 phone:grid-cols-2 laptop:grid-cols-4">
      {metrics.map((metric) => (
        <MetricCard key={metric.title} {...metric} />
      ))}
    </Container>
  );
}



===== Archivo: src/components/chart-blocks/AverageTicketsCreated.tsx =====
// src/components/chart-blocks/AverageTicketsCreated.tsx
"use client";

import dynamic from "next/dynamic";
import { useAtomValue } from "jotai";
import type { IBarChartSpec } from "@visactor/vchart";
import { ticketChartDataAtom } from "@/lib/atoms";
import type { TicketMetric } from "@/lib/atoms";

// Importamos VChart dinámicamente para asegurarnos de que se ejecute solo en el cliente.
const VChart = dynamic(
  () => import("@visactor/react-vchart").then((mod) => mod.VChart),
  { ssr: false }
);

const generateSpec = (data: TicketMetric[]): IBarChartSpec => ({
  width: 400, // Ancho definido
  height: 300, // Alto definido
  type: "bar",
  data: [
    {
      id: "barData",
      values: data,
    },
  ],
  xField: "date",
  yField: "count",
  seriesField: "type",
  padding: [10, 0, 10, 0],
  legends: { visible: false },
  stack: false,
  tooltip: { trigger: ["click", "hover"] },
  bar: {
    state: {
      hover: { outerBorder: { distance: 2, lineWidth: 2 } },
    },
    style: {
      cornerRadius: [12, 12, 12, 12],
      zIndex: (datum: any) => (datum.type === "resolved" ? 2 : 1),
    },
  },
});

export default function AverageTicketsCreated() {
  const ticketChartData = useAtomValue(ticketChartDataAtom);
  const spec = generateSpec(ticketChartData);
  return <VChart spec={spec} />;
}



===== Archivo: src/components/chart-blocks/Conversions.tsx =====
// src/components/chart-blocks/Conversions.tsx
"use client";

import dynamic from "next/dynamic";
import type { ICirclePackingChartSpec } from "@visactor/vchart";
import { convertions } from "@/data/convertions";
import { addThousandsSeparator } from "@/lib/utils";

// Importación dinámica de VChart para evitar SSR
const VChart = dynamic(
  () => import("@visactor/react-vchart").then((mod) => mod.VChart),
  { ssr: false }
);

const spec: ICirclePackingChartSpec = {
  width: 400,
  height: 300,
  data: [{ id: "data", values: convertions }],
  type: "circlePacking",
  categoryField: "name",
  valueField: "value",
  drill: true,
  padding: 0,
  layoutPadding: 5,
  label: {
    style: {
      fill: "white",
      stroke: false,
      visible: (d: any) => d.depth === 0,
      text: (d: any) => addThousandsSeparator(d.value),
      fontSize: (d: any) => d.radius / 2,
      dy: (d: any) => d.radius / 8,
    },
  },
  legends: [{ visible: true, orient: "top", position: "start", padding: 0 }],
  tooltip: {
    trigger: ["click", "hover"],
    mark: { content: { value: (d: any) => addThousandsSeparator(d?.value) } },
  },
  animationEnter: { easing: "cubicInOut" },
  animationExit: { easing: "cubicInOut" },
  animationUpdate: { easing: "cubicInOut" },
};

export default function Conversions() {
  return <VChart spec={spec} />;
}



===== Archivo: src/components/chart-blocks/TicketByChannels.tsx =====
"use client";

import React from "react";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from "recharts";
import styled from "styled-components";

const data = [
  { channel: "Email", tickets: 400 },
  { channel: "Phone", tickets: 300 },
  { channel: "Chat", tickets: 500 },
  { channel: "Social", tickets: 200 },
];

const ChartWrapper = styled.div`
  width: 100%;
  height: 300px;
`;

export default function TicketByChannels() {
  return (
    <ChartWrapper>
      <BarChart width={400} height={300} data={data}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="channel" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Bar dataKey="tickets" fill="#8884d8" />
      </BarChart>
    </ChartWrapper>
  );
}



===== Archivo: src/components/ThemeContext.tsx =====
// src/components/ThemeContext.tsx
"use client";

import React, { createContext, useContext, useState } from "react";
import { themes } from "@/theme/themes";

interface ThemeContextType {
  currentTheme: number;
  theme: typeof themes[0];
  changeTheme: (index: number) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProviderClient({ children }: { children: React.ReactNode }) {
  // Ajustamos para que no se salga de [0..2]
  const initialIndex = new Date().getDay() % themes.length;

  // Creamos el state usando ese índice
  const [currentTheme, setCurrentTheme] = useState(initialIndex);
  const [theme, setTheme] = useState(themes[initialIndex]);

  const changeTheme = (index: number) => {
    // Validamos que index esté dentro de [0..themes.length-1]
    if (index >= 0 && index < themes.length) {
      setCurrentTheme(index);
      setTheme(themes[index]);
    }
  };

  return (
    <ThemeContext.Provider value={{ currentTheme, theme, changeTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useThemeContext() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error("useThemeContext must be used within a ThemeProviderClient");
  }
  return context;
}



===== Archivo: src/components/Locations/WarehouseScene.tsx =====
"use client";

import React from "react";
import { Canvas } from "@react-three/fiber";
import { OrbitControls } from "@react-three/drei";

/**
 * Componente que representa la escena 3D de un almacén.
 * Incluye un edificio, racks, pallets y un montacargas simple.
 */

export function WarehouseScene() {
  return (
    <Canvas
      // Configuramos la cámara ortográfica para un efecto "isométrico"
      orthographic
      camera={{ zoom: 50, position: [50, 50, 50], near: 1, far: 1000 }}
      style={{ width: "100%", height: "600px", background: "#cccccc" }}
    >
      {/* Controles para navegar la escena con el mouse */}
      <OrbitControls makeDefault />

      {/* Luces básicas */}
      <ambientLight intensity={0.5} />
      <directionalLight position={[100, 100, 100]} intensity={0.5} />

      {/* Edificio (paredes, piso, techo) */}
      <Building />

      {/* Racks con pallets */}
      <Racks />

      {/* Montacargas / forklift */}
      <Forklift position={[10, 0, 10]} />

      {/* Ejemplo de un camión estacionado afuera */}
      <Truck position={[30, 0, -10]} />
    </Canvas>
  );
}

/** Building: Piso, paredes, techo básicos */
function Building() {
  return (
    <group>
      {/* Piso */}
      <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]}>
        <planeGeometry args={[60, 60]} />
        <meshStandardMaterial color="#b8b8b8" />
      </mesh>

      {/* Paredes (4 paredes simples) */}
      {/* Pared trasera */}
      <mesh position={[0, 5, -30]}>
        <boxGeometry args={[60, 10, 1]} />
        <meshStandardMaterial color="#888888" />
      </mesh>
      {/* Pared delantera */}
      <mesh position={[0, 5, 30]}>
        <boxGeometry args={[60, 10, 1]} />
        <meshStandardMaterial color="#888888" />
      </mesh>
      {/* Pared izquierda */}
      <mesh position={[-30, 5, 0]}>
        <boxGeometry args={[1, 10, 60]} />
        <meshStandardMaterial color="#888888" />
      </mesh>
      {/* Pared derecha */}
      <mesh position={[30, 5, 0]}>
        <boxGeometry args={[1, 10, 60]} />
        <meshStandardMaterial color="#888888" />
      </mesh>

      {/* Techo */}
      <mesh position={[0, 10, 0]}>
        <boxGeometry args={[60, 1, 60]} />
        <meshStandardMaterial color="#aaaaaa" />
      </mesh>
    </group>
  );
}

/** Racks: Estanterías con pallets */
function Racks() {
  // Simplemente creamos un arreglo de posiciones para racks
  const rackPositions = [
    [-15, 0, -15],
    [-15, 0, 0],
    [-15, 0, 15],
    [0, 0, -15],
    [0, 0, 0],
    [0, 0, 15],
    [15, 0, -15],
    [15, 0, 0],
    [15, 0, 15],
  ];

  return (
    <group>
      {rackPositions.map((pos, i) => (
        <Rack key={i} position={[pos[0], pos[1], pos[2]]} />
      ))}
    </group>
  );
}

function Rack({ position = [0, 0, 0] }: { position?: [number, number, number] }) {
  return (
    <group position={position}>
      {/* Estructura del rack (cuatro postes) */}
      <mesh position={[0, 0, 0]}>
        <boxGeometry args={[0.5, 6, 0.5]} />
        <meshStandardMaterial color="#555555" />
      </mesh>
      <mesh position={[4, 0, 0]}>
        <boxGeometry args={[0.5, 6, 0.5]} />
        <meshStandardMaterial color="#555555" />
      </mesh>
      <mesh position={[0, 0, 2]}>
        <boxGeometry args={[0.5, 6, 0.5]} />
        <meshStandardMaterial color="#555555" />
      </mesh>
      <mesh position={[4, 0, 2]}>
        <boxGeometry args={[0.5, 6, 0.5]} />
        <meshStandardMaterial color="#555555" />
      </mesh>

      {/* Barras horizontales (nivel inferior y superior) */}
      <mesh position={[2, 1, 0]}>
        <boxGeometry args={[4, 0.3, 0.3]} />
        <meshStandardMaterial color="#777777" />
      </mesh>
      <mesh position={[2, 1, 2]}>
        <boxGeometry args={[4, 0.3, 0.3]} />
        <meshStandardMaterial color="#777777" />
      </mesh>
      <mesh position={[2, 3, 0]}>
        <boxGeometry args={[4, 0.3, 0.3]} />
        <meshStandardMaterial color="#777777" />
      </mesh>
      <mesh position={[2, 3, 2]}>
        <boxGeometry args={[4, 0.3, 0.3]} />
        <meshStandardMaterial color="#777777" />
      </mesh>

      {/* Pallets (uno en cada nivel) */}
      <Pallet position={[2, 1.2, 1]} />
      <Pallet position={[2, 3.2, 1]} />
    </group>
  );
}

/** Pallet con cajas */
function Pallet({ position = [0, 0, 0] }: { position?: [number, number, number] }) {
  return (
    <group position={position}>
      {/* Base del pallet */}
      <mesh>
        <boxGeometry args={[3.5, 0.2, 1.5]} />
        <meshStandardMaterial color="#aa7744" />
      </mesh>

      {/* Cajas sobre el pallet */}
      <mesh position={[0, 1, 0]}>
        <boxGeometry args={[3, 2, 1]} />
        <meshStandardMaterial color="#d8c28a" />
      </mesh>
    </group>
  );
}

/** Montacargas / Forklift sencillo */
function Forklift({ position = [0, 0, 0] }: { position?: [number, number, number] }) {
  return (
    <group position={position}>
      {/* Cuerpo principal */}
      <mesh>
        <boxGeometry args={[3, 2, 2]} />
        <meshStandardMaterial color="#ffaa00" />
      </mesh>
      {/* Mástil */}
      <mesh position={[1.2, 1, 1]}>
        <boxGeometry args={[0.2, 3, 0.2]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
      {/* Horquillas */}
      <mesh position={[1.2, 0.5, 1.4]}>
        <boxGeometry args={[0.1, 0.1, 1]} />
        <meshStandardMaterial color="#444444" />
      </mesh>
      <mesh position={[1.4, 0.5, 1.4]}>
        <boxGeometry args={[0.1, 0.1, 1]} />
        <meshStandardMaterial color="#444444" />
      </mesh>
      {/* Ruedas (simplificadas como cilindros) */}
      <Wheel position={[-1, -1, 0.7]} />
      <Wheel position={[-1, -1, -0.7]} />
      <Wheel position={[1.5, -1, 0.7]} />
      <Wheel position={[1.5, -1, -0.7]} />
    </group>
  );
}

function Wheel({ position = [0, 0, 0] }: { position?: [number, number, number] }) {
  return (
    <mesh position={position} rotation={[Math.PI / 2, 0, 0]}>
      <cylinderGeometry args={[0.4, 0.4, 0.5, 16]} />
      <meshStandardMaterial color="#000000" />
    </mesh>
  );
}

/** Camión simple */
function Truck({ position = [0, 0, 0] }: { position?: [number, number, number] }) {
  return (
    <group position={position}>
      {/* Cabina */}
      <mesh>
        <boxGeometry args={[3, 3, 2]} />
        <meshStandardMaterial color="#e0e000" />
      </mesh>
      {/* Remolque */}
      <mesh position={[0, 0, -4]}>
        <boxGeometry args={[3, 3, 8]} />
        <meshStandardMaterial color="#5555aa" />
      </mesh>
      {/* Ruedas */}
      <Wheel position={[-1.2, -1.5, 1]} />
      <Wheel position={[1.2, -1.5, 1]} />
      <Wheel position={[-1.2, -1.5, -1]} />
      <Wheel position={[1.2, -1.5, -1]} />
      {/* Para el remolque */}
      <Wheel position={[-1.2, -1.5, -2.5]} />
      <Wheel position={[1.2, -1.5, -2.5]} />
      <Wheel position={[-1.2, -1.5, -5.5]} />
      <Wheel position={[1.2, -1.5, -5.5]} />
    </group>
  );
}



===== Archivo: src/components/Locations/Warehouse.tsx =====
"use client";

import React from "react";
import { WarehouseScene } from "./WarehouseScene";

/**
 * Componente de alto nivel que muestra el almacén 3D.
 */
export function Warehouse() {
  return (
    <div style={{ padding: "1rem" }}>
      <h1>Almacén 3D</h1>
      <p>Ejemplo básico de modelado 3D con react-three-fiber (vista ortográfica).</p>
      <WarehouseScene />
    </div>
  );
}



===== Archivo: src/components/VisactorDashboard.tsx =====
// myorg/apps/frontend-web/src/components/VisactorDashboard.tsx
"use client";

import React from "react";
import styled from "styled-components";
import { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from "recharts";

// Contenedor con estilos inspirados en la plantilla Visactor
const DashboardContainer = styled.div`
  background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
  padding: 2rem;
  border-radius: 1rem;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
`;

const ChartTitle = styled.h2`
  font-size: 1.5rem;
  margin-bottom: 1rem;
  text-align: center;
`;

// Datos de ejemplo para el gráfico
const data = [
  { name: "Ene", value: 400 },
  { name: "Feb", value: 300 },
  { name: "Mar", value: 500 },
  { name: "Abr", value: 200 },
  { name: "May", value: 278 },
  { name: "Jun", value: 189 },
];

const VisactorDashboard: React.FC = () => {
  return (
    <DashboardContainer>
      <ChartTitle>Visactor Dashboard</ChartTitle>
      <LineChart width={500} height={300} data={data}>
        <Line type="monotone" dataKey="value" stroke="#8884d8" strokeWidth={2} />
        <CartesianGrid stroke="#ccc" />
        <XAxis dataKey="name" />
        <YAxis />
        <Tooltip />
      </LineChart>
    </DashboardContainer>
  );
};

export default VisactorDashboard;



===== Archivo: src/components/ButtonIA/FloatingChatButton.tsx =====
"use client";

import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { useThemeContext } from "../ThemeContext";
import { usePathname } from "next/navigation";

// ===================== Tipado de Mensajes =====================
interface Message {
  sender: "user" | "bot";
  text: string;
}

// ===================== Preguntas Predefinidas =====================
const predefinedQueries = {
  "Gestión de Ítems": {
    "Consultas": [
      "Quiero saber el ítem con SKU-001",
      "Necesito información del producto Producto A",
      "Consulta el ítem ABC",
    ],
    "Listados": [
      "Muéstrame todos los productos",
      "Lista todos los ítems",
      "Enséñame el catálogo completo",
    ],
    "Creación": [
      "Crea un producto con SKU 504-002, nombre Sudadera, descripción Sudadera grande, precio 100 y stock 20",
    ],
    "Edición": [
      "Edita el producto SKU-001 y cambia su nombre a ProductoBotTest",
      "Modifica el ítem Producto A y actualiza su precio a 29.99 y stock a 100",
    ],
    "Eliminación": [
      "Elimina el producto Zapatos",
      "Borra el ítem Producto B",
    ],
  },
  "Informes Gerenciales": {
    "Inventario": [
      "¿Cuál es el valor total de todos los productos?",
      "¿Cuántos productos hay en total?",
      "¿Cuántas unidades hay en total?",
    ],
    "Stock": [
      "¿Cuál es el producto con más stock?",
      "¿Cuál es el producto con menos stock?",
    ],
    "Precios": [
      "¿Cuál es el producto con mayor precio?",
      "¿Cuál es el producto con menor precio?",
      "¿Cuál es el precio promedio de los productos?",
    ],
    "Valoración": [
      "¿Cuál es el producto más valioso del inventario?",
    ],
  },
  "Otras preguntas": {
    "Básicas": [
      "Hola",
      "¿Eres un bot?",
      "¿Cómo te llamas?",
      "Adiós",
    ],
  },
};

// ===================== Imágenes del Botón según el Tema =====================
// Indice 0 → theme1, indice 1 → theme2, indice 2 → theme3
const TitanChatImages = [
];

// ===================== Componente Principal: TitanChatButton =====================
export default function TitanChatButton() {
  // Para saber la ruta actual (Next.js). Si NO usas Next, omite esto.
  const pathname = usePathname();

  // Ejemplo: ocultar el botón si la ruta es "/login" o "/titan"
  if (pathname === "/login" || pathname === "/titan") {
    return null; // No renderiza nada
  }

  // Obtenemos el índice del tema actual (0, 1 o 2)
  const { currentTheme } = useThemeContext();

  // Estado para abrir/cerrar el chat
  const [chatOpen, setChatOpen] = useState(false);

  // Determinamos la imagen a usar según el tema
  const chatIcon = TitanChatImages[currentTheme] || TitanChatImages[0];

  // Reiniciar la conversación
  const handleRestart = () => {
    localStorage.removeItem("chatMessages");
    setChatOpen(false);
  };

  return (
    <>
      {/* BOTÓN FLOTANTE TRANSPARENTE con la imagen */}
      <FloatingButton onClick={() => setChatOpen(!chatOpen)}>
        <IconImage src={chatIcon} alt="Titan Chat" />
      </FloatingButton>

      {/* Ventana de Chat */}
      {chatOpen && (
        <ChatWindow onClose={() => setChatOpen(false)} onRestart={handleRestart} />
      )}
    </>
  );
}

// ===================== Ventana de Chat (Misma lógica de Titan) =====================
const ChatWindow: React.FC<{ onClose: () => void; onRestart: () => void }> = ({
  onClose,
  onRestart,
}) => {
  // Mensajes en el chat
  const [messages, setMessages] = useState<Message[]>(() => {
    const saved = localStorage.getItem("chatMessages");
    return saved
      ? JSON.parse(saved)
      : [
          {
            sender: "bot",
            text:
              "¡Hola, soy Titan! Estoy aquí para ayudarte con la plataforma APOLO. ¿En qué puedo ayudarte?",
          },
        ];
  });
  const [input, setInput] = useState("");
  const [showHelp, setShowHelp] = useState(false);

  // Guardar conversación en localStorage cada vez que cambie
  useEffect(() => {
    localStorage.setItem("chatMessages", JSON.stringify(messages));
  }, [messages]);

  // Enviar mensaje al backend (Rasa, etc.)
  const sendMessage = async (msg: string) => {
    // Agregar mensaje del usuario al state
    setMessages((prev) => [...prev, { sender: "user", text: msg }]);

    try {
      // Ajusta la URL a la de tu servidor Rasa (o tu endpoint de IA)
      const response = await fetch("http://localhost:5005/webhooks/rest/webhook", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sender: "usuario", message: msg }),
      });
      const data = await response.json();

      data.forEach((botResp: { recipient_id: string; text: string }) => {
        setMessages((prev) => [...prev, { sender: "bot", text: botResp.text }]);
      });
    } catch (error) {
      console.error("Error al enviar el mensaje a Rasa:", error);
      setMessages((prev) => [
        ...prev,
        { sender: "bot", text: "Error de conexión con el chatbot." },
      ]);
    }
  };

  const handleSend = () => {
    if (input.trim() !== "") {
      sendMessage(input.trim());
      setInput("");
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleSend();
    }
  };

  // Copia la consulta al input al hacer clic en un botón
  const handlePredefinedClick = (query: string) => {
    setInput(query);
  };

  // Renderiza categorías y subcategorías de preguntas
  const renderPredefinedQueries = () => {
    return Object.entries(predefinedQueries).map(([category, subcats]) => (
      <CategoryContainer key={category}>
        <CategoryTitle>{category}</CategoryTitle>
        {Object.entries(subcats).map(([subcategory, queries]) => (
          <SubcategoryContainer key={subcategory}>
            <SubcategoryTitle>{subcategory}</SubcategoryTitle>
            <ButtonGroup>
              {queries.map((query, index) => (
                <QueryButton key={index} onClick={() => handlePredefinedClick(query)}>
                  {query}
                </QueryButton>
              ))}
            </ButtonGroup>
          </SubcategoryContainer>
        ))}
      </CategoryContainer>
    ));
  };

  return (
    <ChatContainer>
      {/* Header del Chat */}
      <ChatHeader>
        <h3>TITAN</h3>
        <HeaderButtons>
          <HelpButton onClick={() => setShowHelp((prev) => !prev)}>Ayuda</HelpButton>
          <RestartButton onClick={onRestart}>Reiniciar</RestartButton>
          <CloseButton onClick={onClose}>X</CloseButton>
        </HeaderButtons>
      </ChatHeader>

      {/* Panel de Ayuda / Preguntas Predefinidas */}
      {showHelp && (
        <HelpWrapper>
          <HelpContainer>
            <HelpTitle>Preguntas Disponibles</HelpTitle>
            <HelpInfo>
              APOLO es una plataforma integral para la gestión de inventarios y
              operaciones logísticas. Con Titan, puedes gestionar ítems
              (consultar, crear, editar, eliminar) y obtener informes gerenciales.
            </HelpInfo>
            {renderPredefinedQueries()}
          </HelpContainer>
        </HelpWrapper>
      )}

      {/* Lista de Mensajes */}
      <ChatMessages>
        {messages.map((msg, index) => (
          <MessageBubble key={index} $isUser={msg.sender === "user"}>
            {msg.text}
          </MessageBubble>
        ))}
      </ChatMessages>

      {/* Input y Botón "Enviar" */}
      <ChatInputContainer>
        <ChatInput
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder="Escribe tu mensaje..."
        />
        <SendButton onClick={handleSend}>Enviar</SendButton>
      </ChatInputContainer>
    </ChatContainer>
  );
};

/* ===================== Styled Components ===================== */

// BOTÓN FLOTANTE TRANSPARENTE
const FloatingButton = styled.button`
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 2000;
  outline: none;
  height: 60px;
  width: 60px;
  border: none;
  border-radius: 50%;
  background-color: transparent;  /* Sin fondo */
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0;
`;

// Imagen que se muestra dentro del botón
const IconImage = styled.img`
  width: 100%;
  height: 100%;
  object-fit: contain;
  pointer-events: none; /* para que el click pase al botón */
`;

// Contenedor principal del Chat
const ChatContainer = styled.div`
  position: fixed;
  bottom: 90px;
  right: 20px;
  width: 400px;
  height: 550px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
  z-index: 2100;
`;

// Header del Chat
const ChatHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #2e67f8;
  color: white;
  padding: 0.5rem 1rem;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;

  h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 700;
  }
`;

// Botones en el Header
const HeaderButtons = styled.div`
  display: flex;
  gap: 8px;
`;

const HelpButton = styled.button`
  background: transparent;
  border: 1px solid white;
  color: white;
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
  cursor: pointer;
`;

const RestartButton = styled.button`
  background: transparent;
  border: 1px solid white;
  color: white;
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
  cursor: pointer;
`;

const CloseButton = styled.button`
  background: transparent;
  border: none;
  color: white;
  cursor: pointer;
  font-size: 1rem;
`;

// Sección de Ayuda
const HelpWrapper = styled.div`
  padding: 0 1rem;
`;

const HelpContainer = styled.div`
  background: #f0f0f0;
  color: #333;
  padding: 0.5rem;
  font-size: 0.8rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  max-height: 180px;
  overflow-y: auto;
`;

const HelpTitle = styled.h4`
  margin: 0 0 0.5rem 0;
  font-size: 0.9rem;
  font-weight: bold;
`;

const HelpInfo = styled.p`
  margin: 0 0 0.5rem 0;
  font-size: 0.8rem;
`;

const CategoryContainer = styled.div`
  margin-bottom: 0.5rem;
`;

const CategoryTitle = styled.h5`
  margin: 0 0 0.3rem 0;
  font-size: 0.85rem;
  font-weight: bold;
  color: #555;
`;

const SubcategoryContainer = styled.div`
  margin-bottom: 0.3rem;
`;

const SubcategoryTitle = styled.p`
  margin: 0 0 0.2rem 0;
  font-size: 0.8rem;
  font-weight: bold;
  color: #777;
`;

const ButtonGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 0.4rem;
`;

const QueryButton = styled.button`
  background: #2e67f8;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 0.3rem 0.5rem;
  font-size: 0.75rem;
  cursor: pointer;
  transition: background 0.2s;
  &:hover {
    background: #1f4cbc;
  }
`;

// Área de mensajes
const ChatMessages = styled.div`
  flex: 1;
  padding: 1rem;
  overflow-y: auto;
  background: #f5f5f5;
`;

// Burbuja de mensaje
const MessageBubble = styled.div<{ $isUser: boolean }>`
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
  color: ${(props) => (props.$isUser ? "blue" : "#333")};
  text-align: ${(props) => (props.$isUser ? "right" : "left")};
  padding: 0.5rem;
  background: ${(props) => (props.$isUser ? "#e0f7fa" : "#fff")};
  border-radius: 8px;
  max-width: 80%;
  align-self: ${(props) => (props.$isUser ? "flex-end" : "flex-start")};
`;

// Input + Botón "Enviar"
const ChatInputContainer = styled.div`
  display: flex;
  padding: 0.5rem;
  border-top: 1px solid #ccc;
`;

const ChatInput = styled.input`
  flex: 1;
  padding: 0.5rem;
  border: none;
  outline: none;
  color: black;
  background: #fff;
`;

const SendButton = styled.button`
  padding: 0.5rem 1rem;
  background: #2e67f8;
  color: white;
  border: none;
  cursor: pointer;
  margin-left: 0.5rem;
`;



===== Archivo: src/components/Items/CappasityViewer.tsx =====
"use client";
import React, { useEffect } from "react";

interface CappasityViewerProps {
  src: string;
}

const CappasityViewer: React.FC<CappasityViewerProps> = ({ src }) => {
  useEffect(() => {
    const scriptId = "cappasity-script";
    // Inyecta el script de Cappasity una sola vez
    if (!document.getElementById(scriptId)) {
      const script = document.createElement("script");
      script.src = "https://api.cappasity.com/api/player/cappasity-ai";
      script.async = true;
      script.id = scriptId;
      document.body.appendChild(script);
    }
  }, []);

  return (
    <iframe
      width="100%"
      height="600px"
      frameBorder="0"
      allowFullScreen
      style={{ border: 0 }}
      src={src}
      {...({ mozallowfullscreen: "true", webkitallowfullscreen: "true" } as any)}
    />
  );
};

export default CappasityViewer;



===== Archivo: src/components/Header/DashboardHeader.tsx =====
"use client";

import React, { useState } from "react";
import styled from "styled-components";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import IconButton from "@mui/material/IconButton";
import { useAuth } from "@/context/AuthContext";
import EditProfileModal from "./EditProfileModal";

// INTERFAZ que incluye currentTheme
interface DashboardHeaderProps {
  toggleDrawer: () => void;
  drawerOpen: boolean;
  sidebarWidth: number;
  onThemeChange: (index: number) => void;  // si necesitas el index para cambiar tema
  currentTheme: number;                    // ← NUEVA propiedad
}

// Estilos
const HeaderContainer = styled.header<{ $sidebarWidth: number }>`
  position: fixed;
  top: 0;
  left: ${({ $sidebarWidth }) => $sidebarWidth}px;
  width: calc(100% - ${({ $sidebarWidth }) => $sidebarWidth}px);
  height: 60px;
  background: linear-gradient(45deg, #8391ff, #a5c1ff);
  display: flex;
  align-items: center;
  justify-content: space-between;
  z-index: 1100;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: left 0.3s ease, width 0.3s ease;
  padding: 0 1rem;
`;

const LeftSection = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
`;

const RightSection = styled.div`
  display: flex;
  align-items: center;
  gap: 1rem;
`;

const UserPill = styled.div`
  display: flex;
  align-items: center;
  border-radius: 30px;
  padding: 0.4rem 0.8rem;
  background: linear-gradient(45deg, #6adbef, #5ce1e6);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
  cursor: pointer;
`;

// Se reemplaza el AvatarPlaceholder por una imagen real
const AvatarImage = styled.img`
  width: 32px;
  height: 32px;
  border-radius: 50%;
  margin-right: 0.5rem;
  object-fit: cover;
`;

const UserName = styled.span`
  font-size: 14px;
  font-weight: 500;
  color: #fff;
`;

const ThemeCircle = styled.div`
  width: 24px;
  height: 24px;
  background: #fff;
  border-radius: 50%;
  margin-left: 0.5rem;
`;

// Componente principal
export default function DashboardHeader({
  toggleDrawer,
  drawerOpen,
  sidebarWidth,
  onThemeChange,
  currentTheme,
}: DashboardHeaderProps) {
  const { user } = useAuth();
  const [openProfile, setOpenProfile] = useState(false);

  const handleUserClick = () => {
    console.log("Clic en usuario. user =", user);
    setOpenProfile(true);
  };

  const handleProfileClose = () => {
    setOpenProfile(false);
  };

  return (
    <>
      <HeaderContainer $sidebarWidth={sidebarWidth}>
        {/* Sección Izquierda */}
        <LeftSection>
          <IconButton sx={{ color: "#fff" }} onClick={toggleDrawer}>
            {drawerOpen ? <ChevronLeftIcon /> : <MenuIcon />}
          </IconButton>
        </LeftSection>

        {/* Sección Derecha */}
        <RightSection>
          <UserPill onClick={handleUserClick}>
            <AvatarImage
              alt="Avatar"
            />
            <UserName>{user?.username || "Usuario"}</UserName>

            {/* Bolita para cambiar tema */}
            <ThemeCircle
              onClick={(e) => {
                e.stopPropagation();
                onThemeChange((currentTheme + 1) % 3);
              }}
            />
          </UserPill>
        </RightSection>
      </HeaderContainer>

      {/* Modal de perfil si openProfile = true */}
      {openProfile && (
        <EditProfileModal
          user={user || { id: "", username: "Usuario", email: "", role: "" }}
          onClose={handleProfileClose}
        />
      )}
    </>
  );
}



===== Archivo: src/components/Header/Header.tsx =====
import React from "react";
import styled from "styled-components";

// Contenedor principal del header con el mismo gradiente que el formulario
const HeaderContainer = styled.header`
  background: linear-gradient(45deg, #6adbef, #5ce1e6);
  padding: 10px 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

// Contenedor para el logo y el nombre de la app
const LogoContainer = styled.div`
  display: flex;
  align-items: center;
`;


// Nombre de la app con letras más robustas y contorno en las letras
const AppName = styled.h1`
  font-size: 28px;
  font-weight: 800; /* Fuente más gruesa */
  color: #fff;
  margin: 0;
  -webkit-text-stroke: 2px #fffff; /* Contorno más grueso */
  letter-spacing: 2px;
`;

// Imagen para el logo de soporte técnico
const SupportLogo = styled.img`
  height: 40px;
  width: auto;
`;

const Header: React.FC = () => {
  return (
    <HeaderContainer>
      <LogoContainer>
        <AppName>APOLOWARE</AppName>
      </LogoContainer>
      {/* Ajusta la ruta del logo de soporte técnico */}
    </HeaderContainer>
  );
};

export default Header;



===== Archivo: src/components/Header/EditProfileModal.tsx =====
"use client";

import React, { useRef, useState } from "react";
import styled from "styled-components";
import EditIcon from "@mui/icons-material/Edit";

/* Ajusta la interfaz 'User' a tu modelo real */
interface User {
  id: string;
  username: string;
  email: string;
  phone?: string;
  role: string;
  profileImage?: string; // nombre del archivo de la imagen
}

interface EditProfileModalProps {
  user: User;
  onClose: () => void;
}

const EditProfileModal: React.FC<EditProfileModalProps> = ({ user, onClose }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [username, setUsername] = useState(user.username);
  const [email, setEmail] = useState(user.email);
  const [phone, setPhone] = useState(user.phone || "");
  const [role, setRole] = useState(user.role);
  const [password, setPassword] = useState("");
  const [profileImage, setProfileImage] = useState<File | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append("username", username);
    formData.append("email", email);
    formData.append("phone", phone);
    formData.append("role", role);
    if (password) formData.append("password", password);
    if (profileImage) formData.append("profileImage", profileImage);

    try {
      const res = await fetch(`http://localhost:3000/users/${user.id}`, {
        method: "PATCH",
        body: formData,
      });
      const data = await res.json();
      if (res.ok) {
        // Actualiza localStorage si el backend devuelve el user
        localStorage.setItem("user", JSON.stringify(data));
        onClose();
        window.location.reload();
      } else {
        console.error("Error actualizando perfil:", res.status, data);
      }
    } catch (error) {
      console.error("Error en la petición:", error);
    }
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setProfileImage(e.target.files[0]);
    }
  };

  const handleAvatarClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <ModalOverlay>
      <ModalContainer>
        <HeaderSection>
          <AvatarContainer onClick={handleAvatarClick}>
            <ProfileLogo
              src={
                user.profileImage
                  ? `http://localhost:3000/uploads/${user.profileImage}`
              }
              alt={user.username}
            />
            <EditIconContainer>
              <EditIcon style={{ fontSize: "1.2rem", color: "#fff" }} />
            </EditIconContainer>
            <HiddenFileInput
              ref={fileInputRef}
              type="file"
              onChange={handleImageChange}
              accept="image/png, image/jpeg, image/jpg"
            />
          </AvatarContainer>
        </HeaderSection>

        {/* Puedes mostrar el nombre debajo de la imagen, si quieres que se parezca más al frame */}
        {/* <NameText>{username}</NameText> */}

        <Form onSubmit={handleSubmit}>
          <InputGroup>
            <label>Nombre</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </InputGroup>
          <InputGroup>
            <label>Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </InputGroup>
          <InputGroup>
            <label>Teléfono</label>
            <input
              type="text"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
            />
          </InputGroup>
          <InputGroup>
            <label>Rol</label>
            <input
              type="text"
              value={role}
              onChange={(e) => setRole(e.target.value)}
            />
          </InputGroup>
          <InputGroup>
            <label>Nueva contraseña</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </InputGroup>

          <ButtonGroup>
            <SubmitButton type="submit">Guardar</SubmitButton>
            <CancelButton type="button" onClick={onClose}>
              Cancelar
            </CancelButton>
          </ButtonGroup>
        </Form>
      </ModalContainer>
    </ModalOverlay>
  );
};

export default EditProfileModal;

// ======================= Styled Components =======================

const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5); 
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1200;
`;

const ModalContainer = styled.div`
  background: #fff;          /* Fondo blanco para simular tarjeta */
  padding: 2rem;
  border-radius: 1rem;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  color: #000;              /* Texto en negro */
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const HeaderSection = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 1rem;
`;

const AvatarContainer = styled.div`
  position: relative;
  cursor: pointer;
`;

const ProfileLogo = styled.img`
  width: 100px;
  height: 100px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #fff;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
`;

const EditIconContainer = styled.div`
  position: absolute;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.6);
  border-radius: 50%;
  padding: 3px;
`;

const HiddenFileInput = styled.input`
  display: none;
`;

/* Si deseas mostrar el nombre debajo de la imagen, usa algo así:
const NameText = styled.h2`
  margin-top: 0.8rem;
  font-size: 1.2rem;
  font-weight: 600;
`;
*/

const Form = styled.form`
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-top: 1rem;
`;

const InputGroup = styled.div`
  margin-bottom: 1rem;
  
  label {
    display: block;
    font-weight: 500;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
    color: #333;
  }

  input {
    width: 100%;
    border: none;
    border-bottom: 1px solid #ccc;
    padding: 0.4rem 0;
    font-size: 1rem;
    color: #000;

    &:focus {
      outline: none;
      border-bottom: 1px solid #000;
    }
  }
`;

const ButtonGroup = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 1rem;
`;

const SubmitButton = styled.button`
  padding: 0.6rem 1.2rem;
  border: none;
  border-radius: 0.5rem;
  background-color: #2e67f8; 
  color: #fff;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s;

  &:hover {
    background-color: #1f4cbc;
  }
`;

const CancelButton = styled.button`
  padding: 0.6rem 1.2rem;
  border: none;
  border-radius: 0.5rem;
  background-color: #d1d5db;
  color: #000;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s;

  &:hover {
    background-color: #9ca3af;
  }
`;



